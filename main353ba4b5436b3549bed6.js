/*! For license information please see main353ba4b5436b3549bed6.js.LICENSE.txt */
(()=>{"use strict";var n={"./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/style.scss":(n,e,t)=>{t.r(e),t.d(e,{default:()=>g});var i=t("./node_modules/css-loader/dist/runtime/sourceMaps.js"),o=t.n(i),r=t("./node_modules/css-loader/dist/runtime/api.js"),s=t.n(r),a=t("./node_modules/css-loader/dist/runtime/getUrl.js"),l=t.n(a),d=new URL(t("./src/resources/Cafe Francoise_D.otf"),t.b),A=new URL(t("./src/resources/background.jpg"),t.b),c=new URL(t("./src/resources/white-background.jpg"),t.b),m=s()(o()),u=l()(d),p=l()(A),h=l()(c);m.push([n.id,'@font-face {\n  font-family: "CafeRest";\n  src: url('+u+') format("opentype");\n  font-weight: 600;\n  font-style: normal;\n}\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: "CafeRest", "sharp_sans_display_no1bold", sans-serif;\n  letter-spacing: 2px;\n  color: white;\n  box-sizing: border-box;\n  min-height: calc(100vh + 250px);\n  position: relative;\n  background-image: url('+p+');\n  background-repeat: repeat;\n  background-attachment: fixed;\n}\n\n.content {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\na {\n  color: white;\n  text-decoration: none;\n}\n\nul {\n  list-style: none;\n}\n\n.button {\n  background-color: #de3c31;\n  padding: 12px 25px;\n  border: none;\n  border-radius: 8px;\n  text-align: center;\n  text-decoration: none;\n  font-weight: bold;\n  transition: 0.3s;\n}\n.button:hover {\n  background-color: rgb(180, 0, 0);\n}\n\n.fancy-button {\n  background-color: #f2c930;\n  color: black;\n}\n.fancy-button:hover {\n  background-color: #cfa200;\n}\n\n.important-button {\n  padding: 20px 30px;\n  font-size: 1.5rem;\n  transform: rotate(2deg);\n  font-family: "CafeRest", "sharp_sans_display_no1bold", sans-serif;\n  box-shadow: 8px 8px 0px 0px #cfa200;\n}\n.important-button:hover {\n  transform: scale(1.1);\n  box-shadow: none;\n}\n\n.navBar {\n  /*background-color: $main-background;*/\n  display: flex;\n}\n.navBar .logo {\n  margin-right: auto;\n}\n.navBar .logo img {\n  width: 100px;\n  height: auto;\n  transition: 0.3s;\n}\n.navBar .logo img:hover {\n  transform: rotate(15deg);\n}\n.navBar #hamburger-icon {\n  color: black;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 3.5rem;\n  align-self: center;\n  background-color: #de3c31;\n  padding: 1rem;\n  border-radius: 6px 0 6px 6px;\n  margin-bottom: auto;\n  z-index: 100;\n}\n@media only screen and (min-width: 1000px) {\n  .navBar #hamburger-icon {\n    display: none;\n  }\n}\n.navBar #desktop-menu {\n  display: none;\n}\n@media only screen and (min-width: 1000px) {\n  .navBar #desktop-menu {\n    display: flex;\n    padding: 1rem;\n    display: flex;\n    gap: 10px;\n  }\n}\n@media only screen and (min-width: 1000px) {\n  .navBar {\n    max-width: 55rem;\n    width: 100%;\n    margin-left: auto;\n    margin-right: auto;\n  }\n  .navBar .logo img {\n    width: 180px;\n    height: auto;\n  }\n}\n\n.mobile-menu {\n  display: none;\n  position: absolute;\n  flex-direction: column;\n  height: 50vh;\n  width: 100%;\n  background-color: #f3f3f3;\n  padding-top: 110px;\n  margin: 0;\n  border-bottom: 3px solid #de3c31;\n}\n.mobile-menu li {\n  margin: 20px;\n  margin-right: 25px;\n  align-self: flex-end;\n}\n.mobile-button {\n  padding: 0.5rem;\n  font-size: 2rem;\n  border: 1px solid #de3c31;\n  background-color: #de3c31;\n}\n\n.open {\n  display: flex;\n}\n\nmain {\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  gap: 30px;\n}\n\n.hero {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n}\n.hero img {\n  width: 90vw;\n  height: auto;\n  box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;\n}\n.hero .heroText {\n  background-color: #de3c31;\n  width: 100vw;\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  padding: 1rem;\n}\n@media only screen and (min-width: 1000px) {\n  .hero {\n    background-color: #de3c31;\n    flex-direction: row;\n    align-items: stretch;\n  }\n  .hero .heroImage img {\n    width: 450px;\n    height: auto;\n  }\n  .hero .heroText {\n    width: 250px;\n    padding: 3rem;\n  }\n  .hero .heroText h2 {\n    font-size: 2rem;\n  }\n  .hero .heroText p {\n    font-size: 1.2rem;\n  }\n}\n\n.info {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  background-color: #de3c31;\n  padding: 2rem;\n  border-radius: 18px;\n}\n.info ul {\n  list-style: disc;\n}\n\nfooter {\n  margin-top: 15px;\n  background-color: #de3c31;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;\n  border-top: 3px solid var(--main-color);\n  padding: 1rem;\n  position: absolute;\n  bottom: 0;\n  width: 100%;\n}\nfooter p {\n  margin: 0;\n}\n\nhr {\n  border: 1px solid red;\n}\n\n.menu-info {\n  color: black;\n  background-image: url('+h+');\n  background-repeat: repeat;\n  background-attachment: fixed;\n  padding: 1.2rem;\n  width: 100vw;\n  margin: 0;\n}\n.menu-info h2, .menu-info h3 {\n  margin: 0.5rem;\n}\n.menu-info h2 {\n  color: #de3c31;\n}\n@media only screen and (min-width: 1000px) {\n  .menu-info {\n    max-width: 80rem;\n    width: 100%;\n  }\n}\n\n#menu-item-container {\n  font-family: "sharp_sans_display_no1bold", sans-serif;\n  letter-spacing: normal;\n  display: grid;\n  grid-template-rows: 111px;\n  grid-auto-flow: row;\n  grid-template-rows: auto;\n  /*padding: 1.5rem;*/\n}\n#menu-item-container .menu-item {\n  display: flex;\n  background-color: #f3f3f3;\n  border: 1px solid rgb(138, 138, 138);\n  gap: 20px;\n}\n#menu-item-container .menu-item .item-description {\n  display: flex;\n  flex-direction: column;\n  width: 100%;\n  padding: 0.5rem;\n}\n#menu-item-container .menu-item .item-description h3 {\n  margin: 10px;\n  margin-inline: 0;\n  font-size: 1.5rem;\n}\n#menu-item-container .menu-item .item-description p {\n  margin: 0;\n  font-size: 1rem;\n}\n#menu-item-container .menu-item .item-description #food-price {\n  font-weight: bold;\n  align-self: flex-end;\n}\n#menu-item-container .menu-item .item-image {\n  border: 1px solid rgb(138, 138, 138);\n  display: flex;\n  height: 100%;\n}\n#menu-item-container .menu-item .item-image img {\n  width: 120px;\n  object-fit: contain;\n}\n@media only screen and (min-width: 1000px) {\n  #menu-item-container {\n    /*grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));*/\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: auto;\n    gap: 15px;\n  }\n  #menu-item-container .menu-item {\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\n  }\n  #menu-item-container .menu-item .item-image img {\n    width: 160px;\n  }\n}',"",{version:3,sources:["webpack://./src/style.scss"],names:[],mappings:"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",sourcesContent:["$font-color: white;\n$font-color-2: black;\n$main-color: #de3c31;\n$secondary-color: #f2c930;\n$main-color-dark: rgb(180, 0, 0);\n$secondary-color-dark: #cfa200;\n$secondary-color-light: #eed063;\n\n$fancy-light: #06aed5;\n$fancy-dark: #086788;\n\n$main-background: #de3c31;\n$secondary-background: #f3f3f3;\n$font-family: 'CafeRest', 'sharp_sans_display_no1bold', sans-serif;\n$font-family-readable: 'sharp_sans_display_no1bold', sans-serif;\n$small-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;\n\n@font-face {\n    font-family: 'CafeRest';\n    src: url('resources/Cafe\\ Francoise_D.otf') format('opentype');\n    font-weight: 600;\n    font-style: normal;\n}\n\n@mixin devices ($breakpoint) {\n    //the name of the mixin is devices\n\n    @if $breakpoint ==desktop {\n        @media only screen and (min-width: 1000px) {\n            @content;\n        }\n    }\n\n    @if $breakpoint ==tablet {\n        @media only screen and (max-width: 680px) {\n            @content;\n        }\n    }\n\n    @if $breakpoint ==mobile {\n        @media only screen and (max-width: 481px) {\n            @content;\n        }\n    }\n}\n\nbody {\n    margin: 0;\n    padding: 0;\n    font-family: $font-family;\n    letter-spacing: 2px;\n    color: $font-color;\n    box-sizing: border-box;\n    min-height: calc(100vh + 250px);\n    position: relative;\n\n    background-image: url(resources/background.jpg);\n    background-repeat: repeat;\n    background-attachment: fixed;\n}\n\n.content {\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n}\n\na {\n    color: $font-color;\n    text-decoration: none;\n}\n\nul {\n    list-style: none;\n}\n\n.button {\n    background-color: $main-color;\n    padding: 12px 25px;\n    border: none;\n    border-radius: 8px;\n    text-align: center;\n    text-decoration: none;\n    font-weight: bold;\n    transition: 0.3s;\n\n    &:hover {\n        background-color: $main-color-dark;\n    }\n}\n\n.fancy-button {\n    background-color: $secondary-color;\n    color: black;\n\n    &:hover {\n        background-color: $secondary-color-dark;\n    }\n}\n\n.important-button {\n    padding: 20px 30px;\n    font-size: 1.5rem;\n    transform: rotate(2deg);\n    font-family: $font-family;\n    box-shadow: 8px 8px 0px 0px $secondary-color-dark;\n\n    &:hover {\n        transform: scale(1.1);\n        box-shadow: none;\n    }\n}\n\n.navBar {\n    /*background-color: $main-background;*/\n    display: flex;\n\n    .logo {\n        margin-right: auto;\n\n        img {\n            width: 100px;\n            height: auto;\n            transition: 0.3s;\n\n            &:hover {\n                transform: rotate(15deg);\n            }\n        }\n    }\n\n    #hamburger-icon {\n        color: $font-color-2;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        font-size: 3.5rem;\n        align-self: center;\n        background-color: $main-background;\n        padding: 1rem;\n        border-radius: 6px 0 6px 6px;\n        margin-bottom: auto;\n        z-index: 100;\n\n        @include devices(desktop) {\n            display: none;\n        }\n    }\n\n    #desktop-menu {\n        display: none;\n\n        @include devices(desktop) {\n            display: flex;\n            padding: 1rem;\n            display: flex;\n            gap: 10px;\n        }\n    }\n\n    @include devices(desktop) {\n        max-width: 55rem;\n        width: 100%;\n        margin-left: auto;\n        margin-right: auto;\n\n        .logo {\n            img {\n                width: 180px;\n                height: auto;\n            }\n        }\n    }\n}\n\n\n\n.mobile-menu {\n    //ul\n    display: none;\n    position: absolute;\n\n    flex-direction: column;\n    height: 50vh;\n    width: 100%;\n    background-color: $secondary-background;\n    padding-top: 110px;\n    margin: 0;\n    border-bottom: 3px solid $main-color;\n\n    li {\n        margin: 20px;\n        margin-right: 25px;\n        align-self: flex-end;\n\n        a {}\n    }\n}\n\n.mobile-button {\n    padding: 0.5rem;\n    font-size: 2rem;\n    border: 1px solid $main-color;\n    background-color: $main-color;\n}\n\n.open {\n    display: flex;\n}\n\nmain {\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    gap: 30px;\n}\n\n.hero {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n\n    img {\n        width: 90vw;\n        height: auto;\n        box-shadow: $small-shadow;\n\n    }\n\n    .heroText {\n        background-color: $main-background;\n        width: 100vw;\n        text-align: center;\n        display: flex;\n        flex-direction: column;\n        padding: 1rem;\n    }\n\n    @include devices(desktop) {\n        background-color: $main-background;\n        flex-direction: row;\n        align-items: stretch;\n\n        .heroImage {\n            img {\n                width: 450px;\n                height: auto;\n            }\n        }\n\n        .heroText {\n            width: 250px;\n            padding: 3rem;\n\n            h2 {\n                font-size: 2rem;\n            }\n\n            p {\n                font-size: 1.2rem;\n            }\n        }\n    }\n}\n\n.info {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    text-align: center;\n    background-color: $main-background;\n    padding: 2rem;\n    border-radius: 18px;\n\n    ul {\n        list-style: disc;\n    }\n}\n\nfooter {\n    margin-top: 15px;\n    background-color: $main-background;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    box-shadow: $small-shadow;\n    border-top: 3px solid var(--main-color);\n    padding: 1rem;\n\n    position: absolute;\n    bottom: 0;\n    width: 100%;\n\n    p {\n        margin: 0;\n    }\n}\n\nhr {\n    border: 1px solid red;\n}\n.menu-info {\n    color: $font-color-2;\n    background-image: url(resources/white-background.jpg);\n    background-repeat: repeat;\n    background-attachment: fixed;\n\n    padding: 1.2rem;\n    width: 100vw;\n    margin: 0;\n\n    h2, h3 {\n        margin: 0.5rem;\n    }\n    h2 {\n        color:$main-color;\n    }\n\n    @include devices(desktop) {\n        max-width: 80rem;\n        width: 100%;\n    }\n}\n\n#menu-item-container {\n    font-family: $font-family-readable;\n    letter-spacing: normal;\n\n    display: grid;\n    grid-template-rows: 111px;\n    grid-auto-flow: row;\n    grid-template-rows: auto;\n\n    /*padding: 1.5rem;*/\n    .menu-item {\n        display: flex;\n\n        background-color: $secondary-background;\n        border: 1px solid rgb(138, 138, 138);\n        gap: 20px;\n\n        .item-description {\n            display: flex;\n            flex-direction: column;\n            width: 100%;\n            padding: 0.5rem;\n\n            h3 {\n                margin: 10px;\n                margin-inline: 0;\n                font-size: 1.5rem;\n            }\n\n            p {\n                margin: 0;\n                font-size: 1rem;\n            }\n\n            #food-price {\n                font-weight: bold;\n                align-self: flex-end;\n            }\n        }\n\n        .item-image {\n            border: 1px solid rgb(138, 138, 138);\n            display: flex;\n            height: 100%;\n\n            img {\n                width: 120px;\n                object-fit: contain;\n            }\n        }\n    }\n\n    @include devices(desktop) {\n        /*grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));*/\n        grid-template-columns: 1fr 1fr;\n        grid-template-rows: auto;\n        gap: 15px;\n\n        .menu-item {\n            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\n\n            .item-image {\n                img {\n                    width: 160px;\n                }\n            }\n        }\n    }\n}"],sourceRoot:""}]);const g=m},"./node_modules/css-loader/dist/runtime/api.js":n=>{n.exports=function(n){var e=[];return e.toString=function(){return this.map((function(e){var t="",i=void 0!==e[5];return e[4]&&(t+="@supports (".concat(e[4],") {")),e[2]&&(t+="@media ".concat(e[2]," {")),i&&(t+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),t+=n(e),i&&(t+="}"),e[2]&&(t+="}"),e[4]&&(t+="}"),t})).join("")},e.i=function(n,t,i,o,r){"string"==typeof n&&(n=[[null,n,void 0]]);var s={};if(i)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(s[l]=!0)}for(var d=0;d<n.length;d++){var A=[].concat(n[d]);i&&s[A[0]]||(void 0!==r&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=r),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),e.push(A))}},e}},"./node_modules/css-loader/dist/runtime/getUrl.js":n=>{n.exports=function(n,e){return e||(e={}),n?(n=String(n.__esModule?n.default:n),/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),e.hash&&(n+=e.hash),/["'() \t\n]|(%20)/.test(n)||e.needQuotes?'"'.concat(n.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):n):n}},"./node_modules/css-loader/dist/runtime/sourceMaps.js":n=>{n.exports=function(n){var e=n[1],t=n[3];if(!t)return e;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),r="/*# ".concat(o," */"),s=t.sources.map((function(n){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(n," */")}));return[e].concat(s).concat([r]).join("\n")}return[e].join("\n")}},"./src/style.scss":(n,e,t)=>{t.r(e),t.d(e,{default:()=>f});var i=t("./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"),o=t.n(i),r=t("./node_modules/style-loader/dist/runtime/styleDomAPI.js"),s=t.n(r),a=t("./node_modules/style-loader/dist/runtime/insertBySelector.js"),l=t.n(a),d=t("./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js"),A=t.n(d),c=t("./node_modules/style-loader/dist/runtime/insertStyleElement.js"),m=t.n(c),u=t("./node_modules/style-loader/dist/runtime/styleTagTransform.js"),p=t.n(u),h=t("./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/style.scss"),g={};g.styleTagTransform=p(),g.setAttributes=A(),g.insert=l().bind(null,"head"),g.domAPI=s(),g.insertStyleElement=m();o()(h.default,g);const f=h.default&&h.default.locals?h.default.locals:void 0},"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":n=>{var e=[];function t(n){for(var t=-1,i=0;i<e.length;i++)if(e[i].identifier===n){t=i;break}return t}function i(n,i){for(var r={},s=[],a=0;a<n.length;a++){var l=n[a],d=i.base?l[0]+i.base:l[0],A=r[d]||0,c="".concat(d," ").concat(A);r[d]=A+1;var m=t(c),u={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==m)e[m].references++,e[m].updater(u);else{var p=o(u,i);i.byIndex=a,e.splice(a,0,{identifier:c,updater:p,references:1})}s.push(c)}return s}function o(n,e){var t=e.domAPI(e);t.update(n);return function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap&&e.supports===n.supports&&e.layer===n.layer)return;t.update(n=e)}else t.remove()}}n.exports=function(n,o){var r=i(n=n||[],o=o||{});return function(n){n=n||[];for(var s=0;s<r.length;s++){var a=t(r[s]);e[a].references--}for(var l=i(n,o),d=0;d<r.length;d++){var A=t(r[d]);0===e[A].references&&(e[A].updater(),e.splice(A,1))}r=l}}},"./node_modules/style-loader/dist/runtime/insertBySelector.js":n=>{var e={};n.exports=function(n,t){var i=function(n){if(void 0===e[n]){var t=document.querySelector(n);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(n){t=null}e[n]=t}return e[n]}(n);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}},"./node_modules/style-loader/dist/runtime/insertStyleElement.js":n=>{n.exports=function(n){var e=document.createElement("style");return n.setAttributes(e,n.attributes),n.insert(e,n.options),e}},"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":(n,e,t)=>{n.exports=function(n){var e=t.nc;e&&n.setAttribute("nonce",e)}},"./node_modules/style-loader/dist/runtime/styleDomAPI.js":n=>{n.exports=function(n){var e=n.insertStyleElement(n);return{update:function(t){!function(n,e,t){var i="";t.supports&&(i+="@supports (".concat(t.supports,") {")),t.media&&(i+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(i+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),i+=t.css,o&&(i+="}"),t.media&&(i+="}"),t.supports&&(i+="}");var r=t.sourceMap;r&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(r))))," */")),e.styleTagTransform(i,n,e.options)}(e,n,t)},remove:function(){!function(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n)}(e)}}}},"./node_modules/style-loader/dist/runtime/styleTagTransform.js":n=>{n.exports=function(n,e){if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}},"./src/menuItem.js":(n,e,t)=>{t.r(e),t.d(e,{default:()=>i});class i{constructor(n,e,t,i){this.title=n,this.description=e,this.price=t,this.image=i}}},"./src/menuItems.js":(n,e,t)=>{t.r(e),t.d(e,{addItem:()=>a,itemsStored:()=>s});var i=t("./src/menuItem.js");let o=new i.default("Pizza Natural","Mmm yummy x2!",15.99,"pizza.jpg"),r=new i.default("Empanadas","Mmm yummy x3!",5.99,"empanada.jpg");const s=[];function a(n){s.push(n)}a(o),a(r)},"./src/tabs/about.js":(n,e,t)=>{t.r(e),t.d(e,{default:()=>s});var i=t("./src/resources/template_main.jpg"),o=t("./src/tabs/menu.js"),r=t("./node_modules/lit-html/development/lit-html.js");const s=function(){const n=document.querySelector("#content");(0,r.render)(r.html`<main>
        
        <div class="hero">
            <div class="heroImage">
                <img src="${i}" alt="Main Image">
            </div>
            <div class="heroText">
                <h2>Welcome to the best restaurant!</h2>
                <p>We sell a lot of food.</p>
                <button id="bigMenuButton" style="cursor:pointer" 
                class="button fancy-button important-button">Go to Menu >></button>
            </div>
        </div>
        <div class="info">
            <div class="hoursInfo">
                <h2>Business Hours:</h2>
                <ul>
                    <li><p>00:00 PM - 6:00 PM</p></li>
                    <li><p>8:00 PM - 0:00 AM</p></li>
                    <li><p>00:00 PM - 6:00 PM</p></li>
                </ul>
            </div>
        </div>
    </main>`,n),document.querySelector("#bigMenuButton").addEventListener("click",(()=>{(0,o.default)()}))}},"./src/tabs/menu.js":(n,e,t)=>{t.r(e),t.d(e,{default:()=>r});var i=t("./node_modules/lit-html/development/lit-html.js"),o=t("./src/menuItems.js");const r=function(){const n=document.querySelector("#content");(0,i.render)(i.html`
    <main>
        <div class="menu-info">
            <h2>Menu Items:</h2>
            <hr />
            <h3 id="menu-category">Principal</h3>
            <div id="menu-item-container">
    
            </div>
        </div>
    </main>
    `,n),function(){console.log("rendering Items...");const n=document.querySelector("#menu-item-container");n.innerHTML="",console.log(o.itemsStored),o.itemsStored.forEach(((e,t)=>{const o=()=>i.html`
        <div class="menu-item" id="item-${t}">
            <div class="item-image">
                <img src="${e.image}" alt="${e.title}" />
            </div>
            <div class="item-description">
                <h3 id="food-title">${e.title}</h3>
                <p id="food-description">${e.description}</p>
                <p id="food-price">${e.price}</p>
            </div>
        </div>
        `;(0,i.render)(o(),n),console.log(`rendering ${t}`)}))}()}},"./src/resources/Cafe Francoise_D.otf":(n,e,t)=>{n.exports=t.p+"199f8081722487c0837a.otf"},"./src/resources/background.jpg":(n,e,t)=>{n.exports=t.p+"images/background-ed98c18fb190d3d04bc8.jpg"},"./src/resources/template_main.jpg":(n,e,t)=>{n.exports=t.p+"images/template_main-9ef787e8117197268fd7.jpg"},"./src/resources/white-background.jpg":(n,e,t)=>{n.exports=t.p+"images/white-background-b9019079bae5febb76d4.jpg"},"./node_modules/lit-html/development/lit-html.js":(n,e,t)=>{var i,o,r,s;t.r(e),t.d(e,{_$LH:()=>nn,html:()=>M,noChange:()=>L,nothing:()=>R,render:()=>tn,svg:()=>z});const a=window,l=n=>{a.emitLitDebugLogEvents&&a.dispatchEvent(new CustomEvent("lit-debug",{detail:n}))};let d,A=0;null!==(i=a.litIssuedWarnings)&&void 0!==i||(a.litIssuedWarnings=new Set),d=(n,e)=>{e+=n?` See https://lit.dev/msg/${n} for more information.`:"",a.litIssuedWarnings.has(e)||(console.warn(e),a.litIssuedWarnings.add(e))},d("dev-mode","Lit is in dev mode. Not recommended for production!");const c=(null===(o=a.ShadyDOM)||void 0===o?void 0:o.inUse)&&!0===(null===(r=a.ShadyDOM)||void 0===r?void 0:r.noPatch)?a.ShadyDOM.wrap:n=>n,m=a.trustedTypes,u=m?m.createPolicy("lit-html",{createHTML:n=>n}):void 0,p=n=>n,h=(n,e,t)=>p,g=n=>{if(q!==h)throw new Error("Attempted to overwrite existing lit-html security policy. setSanitizeDOMValueFactory should be called at most once.");q=n},f=()=>{q=h},v=(n,e,t)=>q(n,e,t),y="$lit$",b=`lit$${String(Math.random()).slice(9)}$`,x="?"+b,E=`<${x}>`,C=document,_=(n="")=>C.createComment(n),$=n=>null===n||"object"!=typeof n&&"function"!=typeof n,w=Array.isArray,k=n=>w(n)||"function"==typeof(null==n?void 0:n[Symbol.iterator]),I=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,B=/-->/g,S=/>/g,j=new RegExp(">|[ \t\n\f\r](?:([^\\s\"'>=/]+)([ \t\n\f\r]*=[ \t\n\f\r]*(?:[^ \t\n\f\r\"'`<>=]|(\"|')|))|$)","g"),T=/'/g,N=/"/g,V=/^(?:script|style|textarea|title)$/i,D=n=>(e,...t)=>(e.some((n=>void 0===n))&&console.warn("Some template strings are undefined.\nThis is probably caused by illegal octal escape sequences."),{_$litType$:n,strings:e,values:t}),M=D(1),z=D(2),L=Symbol.for("lit-noChange"),R=Symbol.for("lit-nothing"),P=new WeakMap,Y=C.createTreeWalker(C,129,null,!1);let q=h;const U=(n,e)=>{const t=n.length-1,i=[];let o,r=2===e?"<svg>":"",s=I;for(let e=0;e<t;e++){const t=n[e];let a,l,d=-1,A=0;for(;A<t.length&&(s.lastIndex=A,l=s.exec(t),null!==l);)if(A=s.lastIndex,s===I){if("!--"===l[1])s=B;else if(void 0!==l[1])s=S;else if(void 0!==l[2])V.test(l[2])&&(o=new RegExp(`</${l[2]}`,"g")),s=j;else if(void 0!==l[3])throw new Error("Bindings in tag names are not supported. Please use static templates instead. See https://lit.dev/docs/templates/expressions/#static-expressions")}else s===j?">"===l[0]?(s=null!=o?o:I,d=-1):void 0===l[1]?d=-2:(d=s.lastIndex-l[2].length,a=l[1],s=void 0===l[3]?j:'"'===l[3]?N:T):s===N||s===T?s=j:s===B||s===S?s=I:(s=j,o=void 0);console.assert(-1===d||s===j||s===T||s===N,"unexpected parse state B");const c=s===j&&n[e+1].startsWith("/>")?" ":"";r+=s===I?t+E:d>=0?(i.push(a),t.slice(0,d)+y+t.slice(d)+b+c):t+b+(-2===d?(i.push(void 0),e):c)}const a=r+(n[t]||"<?>")+(2===e?"</svg>":"");if(!Array.isArray(n)||!n.hasOwnProperty("raw")){let n="invalid template strings array";throw n="\n          Internal Error: expected template strings to be an array\n          with a 'raw' field. Faking a template strings array by\n          calling html or svg like an ordinary function is effectively\n          the same as calling unsafeHtml and can lead to major security\n          issues, e.g. opening your code up to XSS attacks.\n\n          If you're using the html or svg tagged template functions normally\n          and and still seeing this error, please file a bug at\n          https://github.com/lit/lit/issues/new?template=bug_report.md\n          and include information about your build tooling, if any.\n        ".trim().replace(/\n */g,"\n"),new Error(n)}return[void 0!==u?u.createHTML(a):a,i]};class F{constructor({strings:n,_$litType$:e},t){let i;this.parts=[];let o=0,r=0;const s=n.length-1,a=this.parts,[A,c]=U(n,e);if(this.el=F.createElement(A,t),Y.currentNode=this.el.content,2===e){const n=this.el.content,e=n.firstChild;e.remove(),n.append(...e.childNodes)}for(;null!==(i=Y.nextNode())&&a.length<s;){if(1===i.nodeType){{const n=i.localName;if(/^(?:textarea|template)$/i.test(n)&&i.innerHTML.includes(b)){const e=`Expressions are not supported inside \`${n}\` elements. See https://lit.dev/msg/expression-in-${n} for more information.`;if("template"===n)throw new Error(e);d("",e)}}if(i.hasAttributes()){const n=[];for(const e of i.getAttributeNames())if(e.endsWith(y)||e.startsWith(b)){const t=c[r++];if(n.push(e),void 0!==t){const n=i.getAttribute(t.toLowerCase()+y).split(b),e=/([.?@])?(.*)/.exec(t);a.push({type:1,index:o,name:e[2],strings:n,ctor:"."===e[1]?H:"?"===e[1]?K:"@"===e[1]?X:W})}else a.push({type:6,index:o})}for(const e of n)i.removeAttribute(e)}if(V.test(i.tagName)){const n=i.textContent.split(b),e=n.length-1;if(e>0){i.textContent=m?m.emptyScript:"";for(let t=0;t<e;t++)i.append(n[t],_()),Y.nextNode(),a.push({type:2,index:++o});i.append(n[e],_())}}}else if(8===i.nodeType){if(i.data===x)a.push({type:2,index:o});else{let n=-1;for(;-1!==(n=i.data.indexOf(b,n+1));)a.push({type:7,index:o}),n+=b.length-1}}o++}null==l||l({kind:"template prep",template:this,clonableTemplate:this.el,parts:this.parts,strings:n})}static createElement(n,e){const t=C.createElement("template");return t.innerHTML=n,t}}function J(n,e,t=n,i){var o,r,s,a;if(e===L)return e;let l=void 0!==i?null===(o=t.__directives)||void 0===o?void 0:o[i]:t.__directive;const d=$(e)?void 0:e._$litDirective$;return(null==l?void 0:l.constructor)!==d&&(null===(r=null==l?void 0:l._$notifyDirectiveConnectionChanged)||void 0===r||r.call(l,!1),void 0===d?l=void 0:(l=new d(n),l._$initialize(n,t,i)),void 0!==i?(null!==(s=(a=t).__directives)&&void 0!==s?s:a.__directives=[])[i]=l:t.__directive=l),void 0!==l&&(e=J(n,l._$resolve(n,e.values),l,i)),e}class O{constructor(n,e){this._parts=[],this._$disconnectableChildren=void 0,this._$template=n,this._$parent=e}get parentNode(){return this._$parent.parentNode}get _$isConnected(){return this._$parent._$isConnected}_clone(n){var e;const{el:{content:t},parts:i}=this._$template,o=(null!==(e=null==n?void 0:n.creationScope)&&void 0!==e?e:C).importNode(t,!0);Y.currentNode=o;let r=Y.nextNode(),s=0,a=0,l=i[0];for(;void 0!==l;){if(s===l.index){let e;2===l.type?e=new Q(r,r.nextSibling,this,n):1===l.type?e=new l.ctor(r,l.name,l.strings,this,n):6===l.type&&(e=new G(r,this,n)),this._parts.push(e),l=i[++a]}s!==(null==l?void 0:l.index)&&(r=Y.nextNode(),s++)}return o}_update(n){let e=0;for(const t of this._parts)void 0!==t&&(null==l||l({kind:"set part",part:t,value:n[e],valueIndex:e,values:n,templateInstance:this}),void 0!==t.strings?(t._$setValue(n,t,e),e+=t.strings.length-2):t._$setValue(n[e])),e++}}class Q{constructor(n,e,t,i){var o;this.type=2,this._$committedValue=R,this._$disconnectableChildren=void 0,this._$startNode=n,this._$endNode=e,this._$parent=t,this.options=i,this.__isConnected=null===(o=null==i?void 0:i.isConnected)||void 0===o||o,this._textSanitizer=void 0}get _$isConnected(){var n,e;return null!==(e=null===(n=this._$parent)||void 0===n?void 0:n._$isConnected)&&void 0!==e?e:this.__isConnected}get parentNode(){let n=c(this._$startNode).parentNode;const e=this._$parent;return void 0!==e&&11===n.nodeType&&(n=e.parentNode),n}get startNode(){return this._$startNode}get endNode(){return this._$endNode}_$setValue(n,e=this){var t;if(null===this.parentNode)throw new Error("This `ChildPart` has no `parentNode` and therefore cannot accept a value. This likely means the element containing the part was manipulated in an unsupported way outside of Lit's control such that the part's marker nodes were ejected from DOM. For example, setting the element's `innerHTML` or `textContent` can do this.");if(n=J(this,n,e),$(n))n===R||null==n||""===n?(this._$committedValue!==R&&(null==l||l({kind:"commit nothing to child",start:this._$startNode,end:this._$endNode,parent:this._$parent,options:this.options}),this._$clear()),this._$committedValue=R):n!==this._$committedValue&&n!==L&&this._commitText(n);else if(void 0!==n._$litType$)this._commitTemplateResult(n);else if(void 0!==n.nodeType){if((null===(t=this.options)||void 0===t?void 0:t.host)===n)return this._commitText("[probable mistake: rendered a template's host in itself (commonly caused by writing ${this} in a template]"),void console.warn("Attempted to render the template host",n,"inside itself. This is almost always a mistake, and in dev mode ","we render some warning text. In production however, we'll ","render it, which will usually result in an error, and sometimes ","in the element disappearing from the DOM.");this._commitNode(n)}else k(n)?this._commitIterable(n):this._commitText(n)}_insert(n,e=this._$endNode){return c(c(this._$startNode).parentNode).insertBefore(n,e)}_commitNode(n){var e;if(this._$committedValue!==n){if(this._$clear(),q!==h){const n=null===(e=this._$startNode.parentNode)||void 0===e?void 0:e.nodeName;if("STYLE"===n||"SCRIPT"===n){let e="Forbidden";throw e="STYLE"===n?"Lit does not support binding inside style nodes. This is a security risk, as style injection attacks can exfiltrate data and spoof UIs. Consider instead using css`...` literals to compose styles, and make do dynamic styling with css custom properties, ::parts, <slot>s, and by mutating the DOM rather than stylesheets.":"Lit does not support binding inside script nodes. This is a security risk, as it could allow arbitrary code execution.",new Error(e)}}null==l||l({kind:"commit node",start:this._$startNode,parent:this._$parent,value:n,options:this.options}),this._$committedValue=this._insert(n)}}_commitText(n){if(this._$committedValue!==R&&$(this._$committedValue)){const e=c(this._$startNode).nextSibling;void 0===this._textSanitizer&&(this._textSanitizer=v(e,"data","property")),n=this._textSanitizer(n),null==l||l({kind:"commit text",node:e,value:n,options:this.options}),e.data=n}else{const e=document.createTextNode("");this._commitNode(e),void 0===this._textSanitizer&&(this._textSanitizer=v(e,"data","property")),n=this._textSanitizer(n),null==l||l({kind:"commit text",node:e,value:n,options:this.options}),e.data=n}this._$committedValue=n}_commitTemplateResult(n){var e;const{values:t,_$litType$:i}=n,o="number"==typeof i?this._$getTemplate(n):(void 0===i.el&&(i.el=F.createElement(i.h,this.options)),i);if((null===(e=this._$committedValue)||void 0===e?void 0:e._$template)===o)null==l||l({kind:"template updating",template:o,instance:this._$committedValue,parts:this._$committedValue._parts,options:this.options,values:t}),this._$committedValue._update(t);else{const n=new O(o,this),e=n._clone(this.options);null==l||l({kind:"template instantiated",template:o,instance:n,parts:n._parts,options:this.options,fragment:e,values:t}),n._update(t),null==l||l({kind:"template instantiated and updated",template:o,instance:n,parts:n._parts,options:this.options,fragment:e,values:t}),this._commitNode(e),this._$committedValue=n}}_$getTemplate(n){let e=P.get(n.strings);return void 0===e&&P.set(n.strings,e=new F(n)),e}_commitIterable(n){w(this._$committedValue)||(this._$committedValue=[],this._$clear());const e=this._$committedValue;let t,i=0;for(const o of n)i===e.length?e.push(t=new Q(this._insert(_()),this._insert(_()),this,this.options)):t=e[i],t._$setValue(o),i++;i<e.length&&(this._$clear(t&&c(t._$endNode).nextSibling,i),e.length=i)}_$clear(n=c(this._$startNode).nextSibling,e){var t;for(null===(t=this._$notifyConnectionChanged)||void 0===t||t.call(this,!1,!0,e);n&&n!==this._$endNode;){const e=c(n).nextSibling;c(n).remove(),n=e}}setConnected(n){var e;if(void 0!==this._$parent)throw new Error("part.setConnected() may only be called on a RootPart returned from render().");this.__isConnected=n,null===(e=this._$notifyConnectionChanged)||void 0===e||e.call(this,n)}}class W{constructor(n,e,t,i,o){this.type=1,this._$committedValue=R,this._$disconnectableChildren=void 0,this.element=n,this.name=e,this._$parent=i,this.options=o,t.length>2||""!==t[0]||""!==t[1]?(this._$committedValue=new Array(t.length-1).fill(new String),this.strings=t):this._$committedValue=R,this._sanitizer=void 0}get tagName(){return this.element.tagName}get _$isConnected(){return this._$parent._$isConnected}_$setValue(n,e=this,t,i){const o=this.strings;let r=!1;if(void 0===o)n=J(this,n,e,0),r=!$(n)||n!==this._$committedValue&&n!==L,r&&(this._$committedValue=n);else{const i=n;let s,a;for(n=o[0],s=0;s<o.length-1;s++)a=J(this,i[t+s],e,s),a===L&&(a=this._$committedValue[s]),r||(r=!$(a)||a!==this._$committedValue[s]),a===R?n=R:n!==R&&(n+=(null!=a?a:"")+o[s+1]),this._$committedValue[s]=a}r&&!i&&this._commitValue(n)}_commitValue(n){n===R?c(this.element).removeAttribute(this.name):(void 0===this._sanitizer&&(this._sanitizer=q(this.element,this.name,"attribute")),n=this._sanitizer(null!=n?n:""),null==l||l({kind:"commit attribute",element:this.element,name:this.name,value:n,options:this.options}),c(this.element).setAttribute(this.name,null!=n?n:""))}}class H extends W{constructor(){super(...arguments),this.type=3}_commitValue(n){void 0===this._sanitizer&&(this._sanitizer=q(this.element,this.name,"property")),n=this._sanitizer(n),null==l||l({kind:"commit property",element:this.element,name:this.name,value:n,options:this.options}),this.element[this.name]=n===R?void 0:n}}const Z=m?m.emptyScript:"";class K extends W{constructor(){super(...arguments),this.type=4}_commitValue(n){null==l||l({kind:"commit boolean attribute",element:this.element,name:this.name,value:!(!n||n===R),options:this.options}),n&&n!==R?c(this.element).setAttribute(this.name,Z):c(this.element).removeAttribute(this.name)}}class X extends W{constructor(n,e,t,i,o){if(super(n,e,t,i,o),this.type=5,void 0!==this.strings)throw new Error(`A \`<${n.localName}>\` has a \`@${e}=...\` listener with invalid content. Event listeners in templates must have exactly one expression and no surrounding text.`)}_$setValue(n,e=this){var t;if((n=null!==(t=J(this,n,e,0))&&void 0!==t?t:R)===L)return;const i=this._$committedValue,o=n===R&&i!==R||n.capture!==i.capture||n.once!==i.once||n.passive!==i.passive,r=n!==R&&(i===R||o);null==l||l({kind:"commit event listener",element:this.element,name:this.name,value:n,options:this.options,removeListener:o,addListener:r,oldListener:i}),o&&this.element.removeEventListener(this.name,this,i),r&&this.element.addEventListener(this.name,this,n),this._$committedValue=n}handleEvent(n){var e,t;"function"==typeof this._$committedValue?this._$committedValue.call(null!==(t=null===(e=this.options)||void 0===e?void 0:e.host)&&void 0!==t?t:this.element,n):this._$committedValue.handleEvent(n)}}class G{constructor(n,e,t){this.element=n,this.type=6,this._$disconnectableChildren=void 0,this._$parent=e,this.options=t}get _$isConnected(){return this._$parent._$isConnected}_$setValue(n){null==l||l({kind:"commit to element binding",element:this.element,value:n,options:this.options}),J(this,n)}}const nn={_boundAttributeSuffix:y,_marker:b,_markerMatch:x,_HTML_RESULT:1,_getTemplateHtml:U,_TemplateInstance:O,_isIterable:k,_resolveDirective:J,_ChildPart:Q,_AttributePart:W,_BooleanAttributePart:K,_EventPart:X,_PropertyPart:H,_ElementPart:G},en=a.litHtmlPolyfillSupportDevMode;null==en||en(F,Q),(null!==(s=a.litHtmlVersions)&&void 0!==s?s:a.litHtmlVersions=[]).push("2.4.0"),a.litHtmlVersions.length>1&&d("multiple-versions","Multiple versions of Lit loaded. Loading multiple versions is not recommended.");const tn=(n,e,t)=>{var i,o;if(null==e)throw new TypeError(`The container to render into may not be ${e}`);const r=A++,s=null!==(i=null==t?void 0:t.renderBefore)&&void 0!==i?i:e;let a=s._$litPart$;if(null==l||l({kind:"begin render",id:r,value:n,container:e,options:t,part:a}),void 0===a){const n=null!==(o=null==t?void 0:t.renderBefore)&&void 0!==o?o:null;s._$litPart$=a=new Q(e.insertBefore(_(),n),n,void 0,null!=t?t:{})}return a._$setValue(n),null==l||l({kind:"end render",id:r,value:n,container:e,options:t,part:a}),a};tn.setSanitizer=g,tn.createSanitizer=v,tn._testOnlyClearSanitizerFactoryDoNotCallOrElse=f}},e={};function t(i){var o=e[i];if(void 0!==o)return o.exports;var r=e[i]={id:i,exports:{}};return n[i](r,r.exports,t),r.exports}t.m=n,t.n=n=>{var e=n&&n.__esModule?()=>n.default:()=>n;return t.d(e,{a:e}),e},t.d=(n,e)=>{for(var i in e)t.o(e,i)&&!t.o(n,i)&&Object.defineProperty(n,i,{enumerable:!0,get:e[i]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(n){if("object"==typeof window)return window}}(),t.o=(n,e)=>Object.prototype.hasOwnProperty.call(n,e),t.r=n=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},(()=>{var n;t.g.importScripts&&(n=t.g.location+"");var e=t.g.document;if(!n&&e&&(e.currentScript&&(n=e.currentScript.src),!n)){var i=e.getElementsByTagName("script");i.length&&(n=i[i.length-1].src)}if(!n)throw new Error("Automatic publicPath is not supported in this browser");n=n.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=n})(),t.b=document.baseURI||self.location.href,t.nc=void 0;var i={};(()=>{t.r(i);var n=t("./src/tabs/about.js"),e=t("./src/tabs/menu.js");t("./src/style.scss");document.querySelector("#content");let o=document.querySelector("#menuMenu"),r=document.querySelector("#mobileMenu");(0,n.default)(),(0,e.default)(),r.addEventListener("click",(()=>{(0,e.default)(),l.classList.toggle("open")})),o.addEventListener("click",(()=>{(0,e.default)()}));let s=document.querySelector("#aboutMenu"),a=document.querySelector("#mobileAbout");s.addEventListener("click",(()=>{(0,n.default)()})),a.addEventListener("click",(()=>{(0,n.default)(),l.classList.toggle("open")}));const l=document.querySelector(".mobile-menu");document.querySelector("#hamburger-icon").addEventListener("click",(()=>{l.classList.toggle("open")}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,