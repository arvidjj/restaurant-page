/*! For license information please see main42f4ab9cb3d9289122e4.js.LICENSE.txt */
(()=>{"use strict";var e={"./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/style.scss":(e,n,t)=>{t.r(n),t.d(n,{default:()=>p});var i=t("./node_modules/css-loader/dist/runtime/sourceMaps.js"),o=t.n(i),s=t("./node_modules/css-loader/dist/runtime/api.js"),r=t.n(s),a=t("./node_modules/css-loader/dist/runtime/getUrl.js"),l=t.n(a),d=new URL(t("./src/resources/Cafe Francoise_D.otf"),t.b),A=new URL(t("./src/resources/background.jpg"),t.b),c=r()(o()),m=l()(d),u=l()(A);c.push([e.id,'@font-face {\n  font-family: "CafeRest";\n  src: url('+m+') format("opentype");\n  font-weight: 600;\n  font-style: normal;\n}\nbody {\n  margin: 0;\n  padding: 0;\n  font-family: "CafeRest", "sharp_sans_display_no1bold", sans-serif;\n  letter-spacing: 2px;\n  color: white;\n  box-sizing: border-box;\n  min-height: calc(100vh + 250px);\n  position: relative;\n  background-image: url('+u+');\n  background-repeat: repeat;\n  background-attachment: fixed;\n}\n\n.content {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\na {\n  color: white;\n  text-decoration: none;\n}\n\nul {\n  list-style: none;\n}\n\n.button {\n  background-color: #de3c31;\n  padding: 12px 25px;\n  border: none;\n  border-radius: 8px;\n  text-align: center;\n  text-decoration: none;\n  font-weight: bold;\n  transition: 0.3s;\n}\n.button:hover {\n  background-color: rgb(180, 0, 0);\n}\n\n.fancy-button {\n  background-color: #f2c930;\n  color: black;\n}\n.fancy-button:hover {\n  background-color: #cfa200;\n}\n\n.important-button {\n  padding: 20px 30px;\n  font-size: 1.5rem;\n  transform: rotate(2deg);\n  font-family: "CafeRest", "sharp_sans_display_no1bold", sans-serif;\n  box-shadow: 8px 8px 0px 0px #cfa200;\n}\n.important-button:hover {\n  transform: scale(1.1);\n  box-shadow: none;\n}\n\n.navBar {\n  /*background-color: $main-background;*/\n  display: flex;\n}\n.navBar .logo {\n  margin-right: auto;\n}\n.navBar .logo img {\n  width: 100px;\n  height: auto;\n  transition: 0.3s;\n}\n.navBar .logo img:hover {\n  transform: rotate(15deg);\n}\n.navBar ul {\n  padding: 1rem;\n  display: flex;\n  gap: 10px;\n}\n@media only screen and (min-width: 1000px) {\n  .navBar {\n    max-width: 55rem;\n    width: 100%;\n    margin-left: auto;\n    margin-right: auto;\n  }\n  .navBar .logo img {\n    width: 180px;\n    height: auto;\n  }\n}\n\n.mobile-menu {\n  display: none;\n  position: absolute;\n  top: 50px;\n  left: 0;\n  height: calc(100vh - 50px);\n  width: 100%;\n}\n.mobile-menu li {\n  margin-bottom: 10px;\n}\n\n@media only screen and (max-width: 600px) {\n  #desktop-menu {\n    display: none;\n  }\n  #hamburger-icon {\n    display: block;\n  }\n}\n.open .mobile-menu {\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: flex-start;\n}\n\nmain {\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  gap: 30px;\n}\n\n.hero {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  flex-direction: column;\n}\n.hero img {\n  width: 90vw;\n  height: auto;\n  box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;\n}\n.hero .heroText {\n  background-color: #de3c31;\n  width: 100vw;\n  text-align: center;\n  display: flex;\n  flex-direction: column;\n  padding: 1rem;\n}\n@media only screen and (min-width: 1000px) {\n  .hero {\n    background-color: #de3c31;\n    flex-direction: row;\n    align-items: stretch;\n  }\n  .hero .heroImage img {\n    width: 450px;\n    height: auto;\n  }\n  .hero .heroText {\n    width: 250px;\n    padding: 3rem;\n  }\n  .hero .heroText h2 {\n    font-size: 2rem;\n  }\n  .hero .heroText p {\n    font-size: 1.2rem;\n  }\n}\n\n.info {\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  background-color: #de3c31;\n  padding: 2rem;\n  border-radius: 18px;\n}\n.info ul {\n  list-style: disc;\n}\n\nfooter {\n  margin-top: 15px;\n  background-color: #de3c31;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  box-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;\n  border-top: 3px solid var(--main-color);\n  padding: 1rem;\n  position: absolute;\n  bottom: 0;\n  width: 100%;\n}\nfooter p {\n  margin: 0;\n}\n\n.menu-info {\n  color: black;\n  background-color: #f3f3f3;\n  padding: 1.2rem;\n  width: 95vw;\n}\n.menu-info h2 {\n  margin-bottom: 0.5rem;\n}\n@media only screen and (min-width: 1000px) {\n  .menu-info {\n    max-width: 80rem;\n    width: 100%;\n  }\n}\n\n#menu-item-container {\n  font-family: "sharp_sans_display_no1bold", sans-serif;\n  letter-spacing: normal;\n  display: grid;\n  grid-template-rows: 111px;\n  grid-auto-flow: row;\n  grid-template-rows: auto;\n  /*padding: 1.5rem;*/\n}\n#menu-item-container .menu-item {\n  display: flex;\n  border: 1px solid rgb(138, 138, 138);\n  gap: 10px;\n}\n#menu-item-container .menu-item .item-description {\n  display: flex;\n  flex-direction: column;\n}\n#menu-item-container .menu-item .item-description h3 {\n  margin: 5px;\n  margin-inline: 0;\n  font-size: 1.5rem;\n}\n#menu-item-container .menu-item .item-description p {\n  margin: 0;\n  font-size: 1rem;\n}\n#menu-item-container .menu-item .item-image {\n  border: 1px solid rgb(138, 138, 138);\n}\n#menu-item-container .menu-item .item-image img {\n  height: 110px;\n  width: auto;\n}\n@media only screen and (min-width: 1000px) {\n  #menu-item-container {\n    /*grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));*/\n    grid-template-columns: 1fr 1fr;\n    grid-template-rows: auto;\n    gap: 15px;\n  }\n  #menu-item-container .menu-item {\n    box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\n  }\n}',"",{version:3,sources:["webpack://./src/style.scss"],names:[],mappings:"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",sourcesContent:["$font-color: white;\n$font-color-2: black;\n$main-color: #de3c31;\n$secondary-color: #f2c930;\n$main-color-dark: rgb(180, 0, 0);\n$secondary-color-dark: #cfa200;\n$secondary-color-light: #eed063;\n\n$fancy-light: #06aed5;\n$fancy-dark: #086788;\n\n$main-background: #de3c31;\n$secondary-background: #f3f3f3;\n$font-family: 'CafeRest', 'sharp_sans_display_no1bold', sans-serif;\n$font-family-readable: 'sharp_sans_display_no1bold', sans-serif;\n$small-shadow: rgba(0, 0, 0, 0.35) 0px 5px 15px;\n\n@font-face {\n    font-family: 'CafeRest';\n    src: url('resources/Cafe\\ Francoise_D.otf') format('opentype');\n    font-weight: 600;\n    font-style: normal;\n}\n\n@mixin devices ($breakpoint) {\n    //the name of the mixin is devices\n\n    @if $breakpoint ==desktop {\n        @media only screen and (min-width: 1000px) {\n            @content;\n        }\n    }\n\n    @if $breakpoint ==tablet {\n        @media only screen and (max-width: 680px) {\n            @content;\n        }\n    }\n\n    @if $breakpoint ==mobile {\n        @media only screen and (max-width: 481px) {\n            @content;\n        }\n    }\n}\n\nbody {\n    margin: 0;\n    padding: 0;\n    font-family: $font-family;\n    letter-spacing: 2px;\n    color: $font-color;\n    box-sizing: border-box;\n    min-height: calc(100vh + 250px);\n    position: relative;\n\n    background-image: url(resources/background.jpg);\n    background-repeat: repeat;\n    background-attachment: fixed;\n}\n\n.content {\n    display: flex;\n    flex-direction: column;\n    gap: 20px;\n}\n\na {\n    color: $font-color;\n    text-decoration: none;\n}\n\nul {\n    list-style: none;\n}\n\n.button {\n    background-color: $main-color;\n    padding: 12px 25px;\n    border: none;\n    border-radius: 8px;\n    text-align: center;\n    text-decoration: none;\n    font-weight: bold;\n    transition: 0.3s;\n\n    &:hover {\n        background-color: $main-color-dark;\n    }\n}\n\n.fancy-button {\n    background-color: $secondary-color;\n    color: black;\n\n    &:hover {\n        background-color: $secondary-color-dark;\n    }\n}\n\n.important-button {\n    padding: 20px 30px;\n    font-size: 1.5rem;\n    transform: rotate(2deg);\n    font-family: $font-family;\n    box-shadow: 8px 8px 0px 0px $secondary-color-dark;\n\n    &:hover {\n        transform: scale(1.1);\n        box-shadow: none;\n    }\n}\n\n.navBar {\n    /*background-color: $main-background;*/\n    display: flex;\n\n    .logo {\n        margin-right: auto;\n\n        img {\n            width: 100px;\n            height: auto;\n            transition: 0.3s;\n\n            &:hover {\n                transform: rotate(15deg);\n            }\n        }\n    }\n\n    ul {\n        padding: 1rem;\n        display: flex;\n        gap: 10px;\n    }\n\n    @include devices(desktop) {\n        max-width: 55rem;\n        width: 100%;\n        margin-left: auto;\n        margin-right: auto;\n\n        .logo {\n            img {\n                width: 180px;\n                height: auto;\n            }\n        }\n    }\n}\n\n.mobile-menu {\n    display: none;\n    position: absolute;\n    top: 50px;\n    left: 0;\n    height: calc(100vh - 50px);\n    width: 100%;\n\n    li {\n        margin-bottom: 10px;\n    }\n}\n\n@media only screen and (max-width: 600px) {\n    #desktop-menu {\n      display: none;\n    }\n  \n    #hamburger-icon {\n      display: block;\n    }\n  }\n\n.open .mobile-menu {\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    justify-content: flex-start;\n}\n\nmain {\n    display: flex;\n    align-items: center;\n    flex-direction: column;\n    gap: 30px;\n}\n\n.hero {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex-direction: column;\n\n    img {\n        width: 90vw;\n        height: auto;\n        box-shadow: $small-shadow;\n\n    }\n\n    .heroText {\n        background-color: $main-background;\n        width: 100vw;\n        text-align: center;\n        display: flex;\n        flex-direction: column;\n        padding: 1rem;\n    }\n\n    @include devices(desktop) {\n        background-color: $main-background;\n        flex-direction: row;\n        align-items: stretch;\n\n        .heroImage {\n            img {\n                width: 450px;\n                height: auto;\n            }\n        }\n\n        .heroText {\n            width: 250px;\n            padding: 3rem;\n\n            h2 {\n                font-size: 2rem;\n            }\n\n            p {\n                font-size: 1.2rem;\n            }\n        }\n    }\n}\n\n.info {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    text-align: center;\n    background-color: $main-background;\n    padding: 2rem;\n    border-radius: 18px;\n\n    ul {\n        list-style: disc;\n    }\n}\n\nfooter {\n    margin-top: 15px;\n    background-color: $main-background;\n    display: flex;\n    flex-direction: column;\n    align-items: center;\n    box-shadow: $small-shadow;\n    border-top: 3px solid var(--main-color);\n    padding: 1rem;\n\n    position: absolute;\n    bottom: 0;\n    width: 100%;\n\n    p {\n        margin: 0;\n    }\n}\n\n.menu-info {\n    color: $font-color-2;\n    background-color: $secondary-background;\n\n    padding: 1.2rem;\n    width: 95vw;\n\n    h2 {\n        margin-bottom: 0.5rem;\n    }\n\n    @include devices(desktop) {\n        max-width: 80rem;\n        width: 100%;\n    }\n}\n\n#menu-item-container {\n    font-family: $font-family-readable;\n    letter-spacing: normal;\n\n    display: grid;\n    grid-template-rows: 111px;\n    grid-auto-flow: row;\n    grid-template-rows: auto;\n\n    /*padding: 1.5rem;*/\n    .menu-item {\n        display: flex;\n\n        border: 1px solid rgb(138, 138, 138);\n        gap: 10px;\n\n        .item-description {\n            display: flex;\n            flex-direction: column;\n\n            h3 {\n                margin: 5px;\n                margin-inline: 0;\n                font-size: 1.5rem;\n            }\n\n            p {\n                margin: 0;\n                font-size: 1rem;\n            }\n        }\n\n        .item-image {\n            border: 1px solid rgb(138, 138, 138);\n\n            img {\n                height: 110px;\n                width: auto;\n            }\n        }\n    }\n\n    @include devices(desktop) {\n        /*grid-template-columns: repeat(auto-fill, minmax(150px, 1fr));*/\n        grid-template-columns: 1fr 1fr;\n        grid-template-rows: auto;\n        gap: 15px;\n\n        .menu-item {\n            box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2);\n        }\n    }\n}"],sourceRoot:""}]);const p=c},"./node_modules/css-loader/dist/runtime/api.js":e=>{e.exports=function(e){var n=[];return n.toString=function(){return this.map((function(n){var t="",i=void 0!==n[5];return n[4]&&(t+="@supports (".concat(n[4],") {")),n[2]&&(t+="@media ".concat(n[2]," {")),i&&(t+="@layer".concat(n[5].length>0?" ".concat(n[5]):""," {")),t+=e(n),i&&(t+="}"),n[2]&&(t+="}"),n[4]&&(t+="}"),t})).join("")},n.i=function(e,t,i,o,s){"string"==typeof e&&(e=[[null,e,void 0]]);var r={};if(i)for(var a=0;a<this.length;a++){var l=this[a][0];null!=l&&(r[l]=!0)}for(var d=0;d<e.length;d++){var A=[].concat(e[d]);i&&r[A[0]]||(void 0!==s&&(void 0===A[5]||(A[1]="@layer".concat(A[5].length>0?" ".concat(A[5]):""," {").concat(A[1],"}")),A[5]=s),t&&(A[2]?(A[1]="@media ".concat(A[2]," {").concat(A[1],"}"),A[2]=t):A[2]=t),o&&(A[4]?(A[1]="@supports (".concat(A[4],") {").concat(A[1],"}"),A[4]=o):A[4]="".concat(o)),n.push(A))}},n}},"./node_modules/css-loader/dist/runtime/getUrl.js":e=>{e.exports=function(e,n){return n||(n={}),e?(e=String(e.__esModule?e.default:e),/^['"].*['"]$/.test(e)&&(e=e.slice(1,-1)),n.hash&&(e+=n.hash),/["'() \t\n]|(%20)/.test(e)||n.needQuotes?'"'.concat(e.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):e):e}},"./node_modules/css-loader/dist/runtime/sourceMaps.js":e=>{e.exports=function(e){var n=e[1],t=e[3];if(!t)return n;if("function"==typeof btoa){var i=btoa(unescape(encodeURIComponent(JSON.stringify(t)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(i),s="/*# ".concat(o," */"),r=t.sources.map((function(e){return"/*# sourceURL=".concat(t.sourceRoot||"").concat(e," */")}));return[n].concat(r).concat([s]).join("\n")}return[n].join("\n")}},"./src/style.scss":(e,n,t)=>{t.r(n),t.d(n,{default:()=>f});var i=t("./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js"),o=t.n(i),s=t("./node_modules/style-loader/dist/runtime/styleDomAPI.js"),r=t.n(s),a=t("./node_modules/style-loader/dist/runtime/insertBySelector.js"),l=t.n(a),d=t("./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js"),A=t.n(d),c=t("./node_modules/style-loader/dist/runtime/insertStyleElement.js"),m=t.n(c),u=t("./node_modules/style-loader/dist/runtime/styleTagTransform.js"),p=t.n(u),h=t("./node_modules/css-loader/dist/cjs.js!./node_modules/sass-loader/dist/cjs.js!./src/style.scss"),g={};g.styleTagTransform=p(),g.setAttributes=A(),g.insert=l().bind(null,"head"),g.domAPI=r(),g.insertStyleElement=m();o()(h.default,g);const f=h.default&&h.default.locals?h.default.locals:void 0},"./node_modules/style-loader/dist/runtime/injectStylesIntoStyleTag.js":e=>{var n=[];function t(e){for(var t=-1,i=0;i<n.length;i++)if(n[i].identifier===e){t=i;break}return t}function i(e,i){for(var s={},r=[],a=0;a<e.length;a++){var l=e[a],d=i.base?l[0]+i.base:l[0],A=s[d]||0,c="".concat(d," ").concat(A);s[d]=A+1;var m=t(c),u={css:l[1],media:l[2],sourceMap:l[3],supports:l[4],layer:l[5]};if(-1!==m)n[m].references++,n[m].updater(u);else{var p=o(u,i);i.byIndex=a,n.splice(a,0,{identifier:c,updater:p,references:1})}r.push(c)}return r}function o(e,n){var t=n.domAPI(n);t.update(e);return function(n){if(n){if(n.css===e.css&&n.media===e.media&&n.sourceMap===e.sourceMap&&n.supports===e.supports&&n.layer===e.layer)return;t.update(e=n)}else t.remove()}}e.exports=function(e,o){var s=i(e=e||[],o=o||{});return function(e){e=e||[];for(var r=0;r<s.length;r++){var a=t(s[r]);n[a].references--}for(var l=i(e,o),d=0;d<s.length;d++){var A=t(s[d]);0===n[A].references&&(n[A].updater(),n.splice(A,1))}s=l}}},"./node_modules/style-loader/dist/runtime/insertBySelector.js":e=>{var n={};e.exports=function(e,t){var i=function(e){if(void 0===n[e]){var t=document.querySelector(e);if(window.HTMLIFrameElement&&t instanceof window.HTMLIFrameElement)try{t=t.contentDocument.head}catch(e){t=null}n[e]=t}return n[e]}(e);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(t)}},"./node_modules/style-loader/dist/runtime/insertStyleElement.js":e=>{e.exports=function(e){var n=document.createElement("style");return e.setAttributes(n,e.attributes),e.insert(n,e.options),n}},"./node_modules/style-loader/dist/runtime/setAttributesWithoutAttributes.js":(e,n,t)=>{e.exports=function(e){var n=t.nc;n&&e.setAttribute("nonce",n)}},"./node_modules/style-loader/dist/runtime/styleDomAPI.js":e=>{e.exports=function(e){var n=e.insertStyleElement(e);return{update:function(t){!function(e,n,t){var i="";t.supports&&(i+="@supports (".concat(t.supports,") {")),t.media&&(i+="@media ".concat(t.media," {"));var o=void 0!==t.layer;o&&(i+="@layer".concat(t.layer.length>0?" ".concat(t.layer):""," {")),i+=t.css,o&&(i+="}"),t.media&&(i+="}"),t.supports&&(i+="}");var s=t.sourceMap;s&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(s))))," */")),n.styleTagTransform(i,e,n.options)}(n,e,t)},remove:function(){!function(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e)}(n)}}}},"./node_modules/style-loader/dist/runtime/styleTagTransform.js":e=>{e.exports=function(e,n){if(n.styleSheet)n.styleSheet.cssText=e;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(e))}}},"./src/tabs/about/about.js":(e,n,t)=>{t.r(n),t.d(n,{default:()=>r});var i=t("./src/resources/template_main.jpg"),o=t("./src/tabs/menu/menu.js"),s=t("./node_modules/lit-html/development/lit-html.js");const r=function(){const e=document.querySelector("#content");(0,s.render)(s.html`<main>
        
        <div class="hero">
            <div class="heroImage">
                <img src="${i}" alt="Main Image">
            </div>
            <div class="heroText">
                <h2>Welcome to the best restaurant!</h2>
                <p>We sell a lot of food.</p>
                <button id="bigMenuButton" style="cursor:pointer" 
                class="button fancy-button important-button">Go to Menu >></button>
            </div>
        </div>
        <div class="info">
            <div class="hoursInfo">
                <h2>Business Hours:</h2>
                <ul>
                    <li><p>00:00 PM - 6:00 PM</p></li>
                    <li><p>8:00 PM - 0:00 AM</p></li>
                    <li><p>00:00 PM - 6:00 PM</p></li>
                </ul>
            </div>
        </div>
    </main>`,e),document.querySelector("#bigMenuButton").addEventListener("click",(()=>{(0,o.default)()}))}},"./src/tabs/menu/menu.js":(e,n,t)=>{t.r(n),t.d(n,{default:()=>s});var i=t("./node_modules/lit-html/development/lit-html.js"),o=t("./src/resources/menuitems/pizza.jpg");const s=function(){const e=document.querySelector("#content");(0,i.render)(i.html`
    <main>
        <div class="menu-info">
            <h2>Menu Items:</h2>
            <div id="menu-item-container">
                <div class="menu-item">
                    <div class="item-image">
                        <img src="${o}" alt="Food" />
                    </div>
                    <div class="item-description">
                        <h3>Pizza Natural</h3>
                        <p>Mmm yummy</p>
                    </div>
                </div>

                <div class="menu-item">
                    <div class="item-image">
                        <img src="${o}" alt="Food" />
                    </div>
                    <div class="item-description">
                        <p>THIS FOOD IS TASTY!</p>
                    </div>
                </div>
            </div>
        </div>
    </main>
    `,e)}},"./src/resources/Cafe Francoise_D.otf":(e,n,t)=>{e.exports=t.p+"199f8081722487c0837a.otf"},"./src/resources/background.jpg":(e,n,t)=>{e.exports=t.p+"images/background-ed98c18fb190d3d04bc8.jpg"},"./src/resources/menuitems/pizza.jpg":(e,n,t)=>{e.exports=t.p+"images/pizza-3465420826def7e78e4b.jpg"},"./src/resources/template_main.jpg":(e,n,t)=>{e.exports=t.p+"images/template_main-9ef787e8117197268fd7.jpg"},"./node_modules/lit-html/development/lit-html.js":(e,n,t)=>{var i,o,s,r;t.r(n),t.d(n,{_$LH:()=>ee,html:()=>V,noChange:()=>R,nothing:()=>P,render:()=>te,svg:()=>z});const a=window,l=e=>{a.emitLitDebugLogEvents&&a.dispatchEvent(new CustomEvent("lit-debug",{detail:e}))};let d,A=0;null!==(i=a.litIssuedWarnings)&&void 0!==i||(a.litIssuedWarnings=new Set),d=(e,n)=>{n+=e?` See https://lit.dev/msg/${e} for more information.`:"",a.litIssuedWarnings.has(n)||(console.warn(n),a.litIssuedWarnings.add(n))},d("dev-mode","Lit is in dev mode. Not recommended for production!");const c=(null===(o=a.ShadyDOM)||void 0===o?void 0:o.inUse)&&!0===(null===(s=a.ShadyDOM)||void 0===s?void 0:s.noPatch)?a.ShadyDOM.wrap:e=>e,m=a.trustedTypes,u=m?m.createPolicy("lit-html",{createHTML:e=>e}):void 0,p=e=>e,h=(e,n,t)=>p,g=e=>{if(O!==h)throw new Error("Attempted to overwrite existing lit-html security policy. setSanitizeDOMValueFactory should be called at most once.");O=e},f=()=>{O=h},v=(e,n,t)=>O(e,n,t),y="$lit$",x=`lit$${String(Math.random()).slice(9)}$`,b="?"+x,_=`<${b}>`,E=document,C=(e="")=>E.createComment(e),$=e=>null===e||"object"!=typeof e&&"function"!=typeof e,w=Array.isArray,I=e=>w(e)||"function"==typeof(null==e?void 0:e[Symbol.iterator]),k=/<(?:(!--|\/[^a-zA-Z])|(\/?[a-zA-Z][^>\s]*)|(\/?$))/g,B=/-->/g,S=/>/g,T=new RegExp(">|[ \t\n\f\r](?:([^\\s\"'>=/]+)([ \t\n\f\r]*=[ \t\n\f\r]*(?:[^ \t\n\f\r\"'`<>=]|(\"|')|))|$)","g"),j=/'/g,D=/"/g,N=/^(?:script|style|textarea|title)$/i,M=e=>(n,...t)=>(n.some((e=>void 0===e))&&console.warn("Some template strings are undefined.\nThis is probably caused by illegal octal escape sequences."),{_$litType$:e,strings:n,values:t}),V=M(1),z=M(2),R=Symbol.for("lit-noChange"),P=Symbol.for("lit-nothing"),L=new WeakMap,F=E.createTreeWalker(E,129,null,!1);let O=h;const U=(e,n)=>{const t=e.length-1,i=[];let o,s=2===n?"<svg>":"",r=k;for(let n=0;n<t;n++){const t=e[n];let a,l,d=-1,A=0;for(;A<t.length&&(r.lastIndex=A,l=r.exec(t),null!==l);)if(A=r.lastIndex,r===k){if("!--"===l[1])r=B;else if(void 0!==l[1])r=S;else if(void 0!==l[2])N.test(l[2])&&(o=new RegExp(`</${l[2]}`,"g")),r=T;else if(void 0!==l[3])throw new Error("Bindings in tag names are not supported. Please use static templates instead. See https://lit.dev/docs/templates/expressions/#static-expressions")}else r===T?">"===l[0]?(r=null!=o?o:k,d=-1):void 0===l[1]?d=-2:(d=r.lastIndex-l[2].length,a=l[1],r=void 0===l[3]?T:'"'===l[3]?D:j):r===D||r===j?r=T:r===B||r===S?r=k:(r=T,o=void 0);console.assert(-1===d||r===T||r===j||r===D,"unexpected parse state B");const c=r===T&&e[n+1].startsWith("/>")?" ":"";s+=r===k?t+_:d>=0?(i.push(a),t.slice(0,d)+y+t.slice(d)+x+c):t+x+(-2===d?(i.push(void 0),n):c)}const a=s+(e[t]||"<?>")+(2===n?"</svg>":"");if(!Array.isArray(e)||!e.hasOwnProperty("raw")){let e="invalid template strings array";throw e="\n          Internal Error: expected template strings to be an array\n          with a 'raw' field. Faking a template strings array by\n          calling html or svg like an ordinary function is effectively\n          the same as calling unsafeHtml and can lead to major security\n          issues, e.g. opening your code up to XSS attacks.\n\n          If you're using the html or svg tagged template functions normally\n          and and still seeing this error, please file a bug at\n          https://github.com/lit/lit/issues/new?template=bug_report.md\n          and include information about your build tooling, if any.\n        ".trim().replace(/\n */g,"\n"),new Error(e)}return[void 0!==u?u.createHTML(a):a,i]};class W{constructor({strings:e,_$litType$:n},t){let i;this.parts=[];let o=0,s=0;const r=e.length-1,a=this.parts,[A,c]=U(e,n);if(this.el=W.createElement(A,t),F.currentNode=this.el.content,2===n){const e=this.el.content,n=e.firstChild;n.remove(),e.append(...n.childNodes)}for(;null!==(i=F.nextNode())&&a.length<r;){if(1===i.nodeType){{const e=i.localName;if(/^(?:textarea|template)$/i.test(e)&&i.innerHTML.includes(x)){const n=`Expressions are not supported inside \`${e}\` elements. See https://lit.dev/msg/expression-in-${e} for more information.`;if("template"===e)throw new Error(n);d("",n)}}if(i.hasAttributes()){const e=[];for(const n of i.getAttributeNames())if(n.endsWith(y)||n.startsWith(x)){const t=c[s++];if(e.push(n),void 0!==t){const e=i.getAttribute(t.toLowerCase()+y).split(x),n=/([.?@])?(.*)/.exec(t);a.push({type:1,index:o,name:n[2],strings:e,ctor:"."===n[1]?Q:"?"===n[1]?X:"@"===n[1]?G:H})}else a.push({type:6,index:o})}for(const n of e)i.removeAttribute(n)}if(N.test(i.tagName)){const e=i.textContent.split(x),n=e.length-1;if(n>0){i.textContent=m?m.emptyScript:"";for(let t=0;t<n;t++)i.append(e[t],C()),F.nextNode(),a.push({type:2,index:++o});i.append(e[n],C())}}}else if(8===i.nodeType){if(i.data===b)a.push({type:2,index:o});else{let e=-1;for(;-1!==(e=i.data.indexOf(x,e+1));)a.push({type:7,index:o}),e+=x.length-1}}o++}null==l||l({kind:"template prep",template:this,clonableTemplate:this.el,parts:this.parts,strings:e})}static createElement(e,n){const t=E.createElement("template");return t.innerHTML=e,t}}function Y(e,n,t=e,i){var o,s,r,a;if(n===R)return n;let l=void 0!==i?null===(o=t.__directives)||void 0===o?void 0:o[i]:t.__directive;const d=$(n)?void 0:n._$litDirective$;return(null==l?void 0:l.constructor)!==d&&(null===(s=null==l?void 0:l._$notifyDirectiveConnectionChanged)||void 0===s||s.call(l,!1),void 0===d?l=void 0:(l=new d(e),l._$initialize(e,t,i)),void 0!==i?(null!==(r=(a=t).__directives)&&void 0!==r?r:a.__directives=[])[i]=l:t.__directive=l),void 0!==l&&(n=Y(e,l._$resolve(e,n.values),l,i)),n}class J{constructor(e,n){this._parts=[],this._$disconnectableChildren=void 0,this._$template=e,this._$parent=n}get parentNode(){return this._$parent.parentNode}get _$isConnected(){return this._$parent._$isConnected}_clone(e){var n;const{el:{content:t},parts:i}=this._$template,o=(null!==(n=null==e?void 0:e.creationScope)&&void 0!==n?n:E).importNode(t,!0);F.currentNode=o;let s=F.nextNode(),r=0,a=0,l=i[0];for(;void 0!==l;){if(r===l.index){let n;2===l.type?n=new q(s,s.nextSibling,this,e):1===l.type?n=new l.ctor(s,l.name,l.strings,this,e):6===l.type&&(n=new K(s,this,e)),this._parts.push(n),l=i[++a]}r!==(null==l?void 0:l.index)&&(s=F.nextNode(),r++)}return o}_update(e){let n=0;for(const t of this._parts)void 0!==t&&(null==l||l({kind:"set part",part:t,value:e[n],valueIndex:n,values:e,templateInstance:this}),void 0!==t.strings?(t._$setValue(e,t,n),n+=t.strings.length-2):t._$setValue(e[n])),n++}}class q{constructor(e,n,t,i){var o;this.type=2,this._$committedValue=P,this._$disconnectableChildren=void 0,this._$startNode=e,this._$endNode=n,this._$parent=t,this.options=i,this.__isConnected=null===(o=null==i?void 0:i.isConnected)||void 0===o||o,this._textSanitizer=void 0}get _$isConnected(){var e,n;return null!==(n=null===(e=this._$parent)||void 0===e?void 0:e._$isConnected)&&void 0!==n?n:this.__isConnected}get parentNode(){let e=c(this._$startNode).parentNode;const n=this._$parent;return void 0!==n&&11===e.nodeType&&(e=n.parentNode),e}get startNode(){return this._$startNode}get endNode(){return this._$endNode}_$setValue(e,n=this){var t;if(null===this.parentNode)throw new Error("This `ChildPart` has no `parentNode` and therefore cannot accept a value. This likely means the element containing the part was manipulated in an unsupported way outside of Lit's control such that the part's marker nodes were ejected from DOM. For example, setting the element's `innerHTML` or `textContent` can do this.");if(e=Y(this,e,n),$(e))e===P||null==e||""===e?(this._$committedValue!==P&&(null==l||l({kind:"commit nothing to child",start:this._$startNode,end:this._$endNode,parent:this._$parent,options:this.options}),this._$clear()),this._$committedValue=P):e!==this._$committedValue&&e!==R&&this._commitText(e);else if(void 0!==e._$litType$)this._commitTemplateResult(e);else if(void 0!==e.nodeType){if((null===(t=this.options)||void 0===t?void 0:t.host)===e)return this._commitText("[probable mistake: rendered a template's host in itself (commonly caused by writing ${this} in a template]"),void console.warn("Attempted to render the template host",e,"inside itself. This is almost always a mistake, and in dev mode ","we render some warning text. In production however, we'll ","render it, which will usually result in an error, and sometimes ","in the element disappearing from the DOM.");this._commitNode(e)}else I(e)?this._commitIterable(e):this._commitText(e)}_insert(e,n=this._$endNode){return c(c(this._$startNode).parentNode).insertBefore(e,n)}_commitNode(e){var n;if(this._$committedValue!==e){if(this._$clear(),O!==h){const e=null===(n=this._$startNode.parentNode)||void 0===n?void 0:n.nodeName;if("STYLE"===e||"SCRIPT"===e){let n="Forbidden";throw n="STYLE"===e?"Lit does not support binding inside style nodes. This is a security risk, as style injection attacks can exfiltrate data and spoof UIs. Consider instead using css`...` literals to compose styles, and make do dynamic styling with css custom properties, ::parts, <slot>s, and by mutating the DOM rather than stylesheets.":"Lit does not support binding inside script nodes. This is a security risk, as it could allow arbitrary code execution.",new Error(n)}}null==l||l({kind:"commit node",start:this._$startNode,parent:this._$parent,value:e,options:this.options}),this._$committedValue=this._insert(e)}}_commitText(e){if(this._$committedValue!==P&&$(this._$committedValue)){const n=c(this._$startNode).nextSibling;void 0===this._textSanitizer&&(this._textSanitizer=v(n,"data","property")),e=this._textSanitizer(e),null==l||l({kind:"commit text",node:n,value:e,options:this.options}),n.data=e}else{const n=document.createTextNode("");this._commitNode(n),void 0===this._textSanitizer&&(this._textSanitizer=v(n,"data","property")),e=this._textSanitizer(e),null==l||l({kind:"commit text",node:n,value:e,options:this.options}),n.data=e}this._$committedValue=e}_commitTemplateResult(e){var n;const{values:t,_$litType$:i}=e,o="number"==typeof i?this._$getTemplate(e):(void 0===i.el&&(i.el=W.createElement(i.h,this.options)),i);if((null===(n=this._$committedValue)||void 0===n?void 0:n._$template)===o)null==l||l({kind:"template updating",template:o,instance:this._$committedValue,parts:this._$committedValue._parts,options:this.options,values:t}),this._$committedValue._update(t);else{const e=new J(o,this),n=e._clone(this.options);null==l||l({kind:"template instantiated",template:o,instance:e,parts:e._parts,options:this.options,fragment:n,values:t}),e._update(t),null==l||l({kind:"template instantiated and updated",template:o,instance:e,parts:e._parts,options:this.options,fragment:n,values:t}),this._commitNode(n),this._$committedValue=e}}_$getTemplate(e){let n=L.get(e.strings);return void 0===n&&L.set(e.strings,n=new W(e)),n}_commitIterable(e){w(this._$committedValue)||(this._$committedValue=[],this._$clear());const n=this._$committedValue;let t,i=0;for(const o of e)i===n.length?n.push(t=new q(this._insert(C()),this._insert(C()),this,this.options)):t=n[i],t._$setValue(o),i++;i<n.length&&(this._$clear(t&&c(t._$endNode).nextSibling,i),n.length=i)}_$clear(e=c(this._$startNode).nextSibling,n){var t;for(null===(t=this._$notifyConnectionChanged)||void 0===t||t.call(this,!1,!0,n);e&&e!==this._$endNode;){const n=c(e).nextSibling;c(e).remove(),e=n}}setConnected(e){var n;if(void 0!==this._$parent)throw new Error("part.setConnected() may only be called on a RootPart returned from render().");this.__isConnected=e,null===(n=this._$notifyConnectionChanged)||void 0===n||n.call(this,e)}}class H{constructor(e,n,t,i,o){this.type=1,this._$committedValue=P,this._$disconnectableChildren=void 0,this.element=e,this.name=n,this._$parent=i,this.options=o,t.length>2||""!==t[0]||""!==t[1]?(this._$committedValue=new Array(t.length-1).fill(new String),this.strings=t):this._$committedValue=P,this._sanitizer=void 0}get tagName(){return this.element.tagName}get _$isConnected(){return this._$parent._$isConnected}_$setValue(e,n=this,t,i){const o=this.strings;let s=!1;if(void 0===o)e=Y(this,e,n,0),s=!$(e)||e!==this._$committedValue&&e!==R,s&&(this._$committedValue=e);else{const i=e;let r,a;for(e=o[0],r=0;r<o.length-1;r++)a=Y(this,i[t+r],n,r),a===R&&(a=this._$committedValue[r]),s||(s=!$(a)||a!==this._$committedValue[r]),a===P?e=P:e!==P&&(e+=(null!=a?a:"")+o[r+1]),this._$committedValue[r]=a}s&&!i&&this._commitValue(e)}_commitValue(e){e===P?c(this.element).removeAttribute(this.name):(void 0===this._sanitizer&&(this._sanitizer=O(this.element,this.name,"attribute")),e=this._sanitizer(null!=e?e:""),null==l||l({kind:"commit attribute",element:this.element,name:this.name,value:e,options:this.options}),c(this.element).setAttribute(this.name,null!=e?e:""))}}class Q extends H{constructor(){super(...arguments),this.type=3}_commitValue(e){void 0===this._sanitizer&&(this._sanitizer=O(this.element,this.name,"property")),e=this._sanitizer(e),null==l||l({kind:"commit property",element:this.element,name:this.name,value:e,options:this.options}),this.element[this.name]=e===P?void 0:e}}const Z=m?m.emptyScript:"";class X extends H{constructor(){super(...arguments),this.type=4}_commitValue(e){null==l||l({kind:"commit boolean attribute",element:this.element,name:this.name,value:!(!e||e===P),options:this.options}),e&&e!==P?c(this.element).setAttribute(this.name,Z):c(this.element).removeAttribute(this.name)}}class G extends H{constructor(e,n,t,i,o){if(super(e,n,t,i,o),this.type=5,void 0!==this.strings)throw new Error(`A \`<${e.localName}>\` has a \`@${n}=...\` listener with invalid content. Event listeners in templates must have exactly one expression and no surrounding text.`)}_$setValue(e,n=this){var t;if((e=null!==(t=Y(this,e,n,0))&&void 0!==t?t:P)===R)return;const i=this._$committedValue,o=e===P&&i!==P||e.capture!==i.capture||e.once!==i.once||e.passive!==i.passive,s=e!==P&&(i===P||o);null==l||l({kind:"commit event listener",element:this.element,name:this.name,value:e,options:this.options,removeListener:o,addListener:s,oldListener:i}),o&&this.element.removeEventListener(this.name,this,i),s&&this.element.addEventListener(this.name,this,e),this._$committedValue=e}handleEvent(e){var n,t;"function"==typeof this._$committedValue?this._$committedValue.call(null!==(t=null===(n=this.options)||void 0===n?void 0:n.host)&&void 0!==t?t:this.element,e):this._$committedValue.handleEvent(e)}}class K{constructor(e,n,t){this.element=e,this.type=6,this._$disconnectableChildren=void 0,this._$parent=n,this.options=t}get _$isConnected(){return this._$parent._$isConnected}_$setValue(e){null==l||l({kind:"commit to element binding",element:this.element,value:e,options:this.options}),Y(this,e)}}const ee={_boundAttributeSuffix:y,_marker:x,_markerMatch:b,_HTML_RESULT:1,_getTemplateHtml:U,_TemplateInstance:J,_isIterable:I,_resolveDirective:Y,_ChildPart:q,_AttributePart:H,_BooleanAttributePart:X,_EventPart:G,_PropertyPart:Q,_ElementPart:K},ne=a.litHtmlPolyfillSupportDevMode;null==ne||ne(W,q),(null!==(r=a.litHtmlVersions)&&void 0!==r?r:a.litHtmlVersions=[]).push("2.4.0"),a.litHtmlVersions.length>1&&d("multiple-versions","Multiple versions of Lit loaded. Loading multiple versions is not recommended.");const te=(e,n,t)=>{var i,o;if(null==n)throw new TypeError(`The container to render into may not be ${n}`);const s=A++,r=null!==(i=null==t?void 0:t.renderBefore)&&void 0!==i?i:n;let a=r._$litPart$;if(null==l||l({kind:"begin render",id:s,value:e,container:n,options:t,part:a}),void 0===a){const e=null!==(o=null==t?void 0:t.renderBefore)&&void 0!==o?o:null;r._$litPart$=a=new q(n.insertBefore(C(),e),e,void 0,null!=t?t:{})}return a._$setValue(e),null==l||l({kind:"end render",id:s,value:e,container:n,options:t,part:a}),a};te.setSanitizer=g,te.createSanitizer=v,te._testOnlyClearSanitizerFactoryDoNotCallOrElse=f}},n={};function t(i){var o=n[i];if(void 0!==o)return o.exports;var s=n[i]={id:i,exports:{}};return e[i](s,s.exports,t),s.exports}t.m=e,t.n=e=>{var n=e&&e.__esModule?()=>e.default:()=>e;return t.d(n,{a:n}),n},t.d=(e,n)=>{for(var i in n)t.o(n,i)&&!t.o(e,i)&&Object.defineProperty(e,i,{enumerable:!0,get:n[i]})},t.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(e){if("object"==typeof window)return window}}(),t.o=(e,n)=>Object.prototype.hasOwnProperty.call(e,n),t.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{var e;t.g.importScripts&&(e=t.g.location+"");var n=t.g.document;if(!e&&n&&(n.currentScript&&(e=n.currentScript.src),!e)){var i=n.getElementsByTagName("script");i.length&&(e=i[i.length-1].src)}if(!e)throw new Error("Automatic publicPath is not supported in this browser");e=e.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),t.p=e})(),t.b=document.baseURI||self.location.href,t.nc=void 0;var i={};(()=>{t.r(i);var e=t("./src/tabs/about/about.js"),n=t("./src/tabs/menu/menu.js");t("./src/style.scss");document.querySelector("#content");let o=document.querySelector("#menuMenu");(0,e.default)(),(0,n.default)(),o.addEventListener("click",(()=>{(0,n.default)()})),document.querySelector("#aboutMenu").addEventListener("click",(()=>{(0,e.default)()}))})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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SENJTGdFLFNBQVNDLGNBQWMsWUFJM0MsSUFBSStTLEVBQWlCaFQsU0FBU0MsY0FBYyxjQUU1QyxnQkFDQSxlQUNBK1MsRUFBZXJSLGlCQUFpQixTQUFTLE1BQ3JDLGNBQVMsSUFJUzNCLFNBQVNDLGNBQWMsY0FDN0IwQixpQkFBaUIsU0FBUyxNQUN0QyxjQUFVIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vcmVzdGF1cmFudC1wYWdlLy4vc3JjL3N0eWxlLnNjc3MiLCJ3ZWJwYWNrOi8vcmVzdGF1cmFudC1wYWdlLy4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9yZXN0YXVyYW50LXBhZ2UvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzIiwid2VicGFjazovL3Jlc3RhdXJhbnQtcGFnZS8uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9zb3VyY2VNYXBzLmpzIiwid2VicGFjazovL3Jlc3RhdXJhbnQtcGFnZS8uL3NyYy9zdHlsZS5zY3NzPzc1YmEiLCJ3ZWJwYWNrOi8vcmVzdGF1cmFudC1wYWdlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzIiwid2VicGFjazovL3Jlc3RhdXJhbnQtcGFnZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydEJ5U2VsZWN0b3IuanMiLCJ3ZWJwYWNrOi8vcmVzdGF1cmFudC1wYWdlLy4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0U3R5bGVFbGVtZW50LmpzIiwid2VicGFjazovL3Jlc3RhdXJhbnQtcGFnZS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qcyIsIndlYnBhY2s6Ly9yZXN0YXVyYW50LXBhZ2UvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qcyIsIndlYnBhY2s6Ly9yZXN0YXVyYW50LXBhZ2UvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qcyIsIndlYnBhY2s6Ly9yZXN0YXVyYW50LXBhZ2UvLi9zcmMvdGFicy9hYm91dC9hYm91dC5qcyIsIndlYnBhY2s6Ly9yZXN0YXVyYW50LXBhZ2UvLi9zcmMvdGFicy9tZW51L21lbnUuanMiLCJ3ZWJwYWNrOi8vcmVzdGF1cmFudC1wYWdlLy4vbm9kZV9tb2R1bGVzL2xpdC1odG1sL2RldmVsb3BtZW50L2xpdC1odG1sLmpzIiwid2VicGFjazovL3Jlc3RhdXJhbnQtcGFnZS93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9yZXN0YXVyYW50LXBhZ2Uvd2VicGFjay9ydW50aW1lL2NvbXBhdCBnZXQgZGVmYXVsdCBleHBvcnQiLCJ3ZWJwYWNrOi8vcmVzdGF1cmFudC1wYWdlL3dlYnBhY2svcnVudGltZS9kZWZpbmUgcHJvcGVydHkgZ2V0dGVycyIsIndlYnBhY2s6Ly9yZXN0YXVyYW50LXBhZ2Uvd2VicGFjay9ydW50aW1lL2dsb2JhbCIsIndlYnBhY2s6Ly9yZXN0YXVyYW50LXBhZ2Uvd2VicGFjay9ydW50aW1lL2hhc093blByb3BlcnR5IHNob3J0aGFuZCIsIndlYnBhY2s6Ly9yZXN0YXVyYW50LXBhZ2Uvd2VicGFjay9ydW50aW1lL21ha2UgbmFtZXNwYWNlIG9iamVjdCIsIndlYnBhY2s6Ly9yZXN0YXVyYW50LXBhZ2Uvd2VicGFjay9ydW50aW1lL3B1YmxpY1BhdGgiLCJ3ZWJwYWNrOi8vcmVzdGF1cmFudC1wYWdlL3dlYnBhY2svcnVudGltZS9qc29ucCBjaHVuayBsb2FkaW5nIiwid2VicGFjazovL3Jlc3RhdXJhbnQtcGFnZS93ZWJwYWNrL3J1bnRpbWUvbm9uY2UiLCJ3ZWJwYWNrOi8vcmVzdGF1cmFudC1wYWdlLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEltcG9ydHNcbmltcG9ydCBfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fIGZyb20gXCIuLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvc291cmNlTWFwcy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18gZnJvbSBcIi4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvcnVudGltZS9nZXRVcmwuanNcIjtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyA9IG5ldyBVUkwoXCJyZXNvdXJjZXMvQ2FmZSBGcmFuY29pc2VfRC5vdGZcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyA9IG5ldyBVUkwoXCJyZXNvdXJjZXMvYmFja2dyb3VuZC5qcGdcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18pO1xuLy8gTW9kdWxlXG5fX19DU1NfTE9BREVSX0VYUE9SVF9fXy5wdXNoKFttb2R1bGUuaWQsIFwiQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogXFxcIkNhZmVSZXN0XFxcIjtcXG4gIHNyYzogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMF9fXyArIFwiKSBmb3JtYXQoXFxcIm9wZW50eXBlXFxcIik7XFxuICBmb250LXdlaWdodDogNjAwO1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbn1cXG5ib2R5IHtcXG4gIG1hcmdpbjogMDtcXG4gIHBhZGRpbmc6IDA7XFxuICBmb250LWZhbWlseTogXFxcIkNhZmVSZXN0XFxcIiwgXFxcInNoYXJwX3NhbnNfZGlzcGxheV9ubzFib2xkXFxcIiwgc2Fucy1zZXJpZjtcXG4gIGxldHRlci1zcGFjaW5nOiAycHg7XFxuICBjb2xvcjogd2hpdGU7XFxuICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgbWluLWhlaWdodDogY2FsYygxMDB2aCArIDI1MHB4KTtcXG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcXG4gIGJhY2tncm91bmQtaW1hZ2U6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzFfX18gKyBcIik7XFxuICBiYWNrZ3JvdW5kLXJlcGVhdDogcmVwZWF0O1xcbiAgYmFja2dyb3VuZC1hdHRhY2htZW50OiBmaXhlZDtcXG59XFxuXFxuLmNvbnRlbnQge1xcbiAgZGlzcGxheTogZmxleDtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBnYXA6IDIwcHg7XFxufVxcblxcbmEge1xcbiAgY29sb3I6IHdoaXRlO1xcbiAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbn1cXG5cXG51bCB7XFxuICBsaXN0LXN0eWxlOiBub25lO1xcbn1cXG5cXG4uYnV0dG9uIHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkZTNjMzE7XFxuICBwYWRkaW5nOiAxMnB4IDI1cHg7XFxuICBib3JkZXI6IG5vbmU7XFxuICBib3JkZXItcmFkaXVzOiA4cHg7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICBmb250LXdlaWdodDogYm9sZDtcXG4gIHRyYW5zaXRpb246IDAuM3M7XFxufVxcbi5idXR0b246aG92ZXIge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogcmdiKDE4MCwgMCwgMCk7XFxufVxcblxcbi5mYW5jeS1idXR0b24ge1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2YyYzkzMDtcXG4gIGNvbG9yOiBibGFjaztcXG59XFxuLmZhbmN5LWJ1dHRvbjpob3ZlciB7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjY2ZhMjAwO1xcbn1cXG5cXG4uaW1wb3J0YW50LWJ1dHRvbiB7XFxuICBwYWRkaW5nOiAyMHB4IDMwcHg7XFxuICBmb250LXNpemU6IDEuNXJlbTtcXG4gIHRyYW5zZm9ybTogcm90YXRlKDJkZWcpO1xcbiAgZm9udC1mYW1pbHk6IFxcXCJDYWZlUmVzdFxcXCIsIFxcXCJzaGFycF9zYW5zX2Rpc3BsYXlfbm8xYm9sZFxcXCIsIHNhbnMtc2VyaWY7XFxuICBib3gtc2hhZG93OiA4cHggOHB4IDBweCAwcHggI2NmYTIwMDtcXG59XFxuLmltcG9ydGFudC1idXR0b246aG92ZXIge1xcbiAgdHJhbnNmb3JtOiBzY2FsZSgxLjEpO1xcbiAgYm94LXNoYWRvdzogbm9uZTtcXG59XFxuXFxuLm5hdkJhciB7XFxuICAvKmJhY2tncm91bmQtY29sb3I6ICRtYWluLWJhY2tncm91bmQ7Ki9cXG4gIGRpc3BsYXk6IGZsZXg7XFxufVxcbi5uYXZCYXIgLmxvZ28ge1xcbiAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xcbn1cXG4ubmF2QmFyIC5sb2dvIGltZyB7XFxuICB3aWR0aDogMTAwcHg7XFxuICBoZWlnaHQ6IGF1dG87XFxuICB0cmFuc2l0aW9uOiAwLjNzO1xcbn1cXG4ubmF2QmFyIC5sb2dvIGltZzpob3ZlciB7XFxuICB0cmFuc2Zvcm06IHJvdGF0ZSgxNWRlZyk7XFxufVxcbi5uYXZCYXIgdWwge1xcbiAgcGFkZGluZzogMXJlbTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBnYXA6IDEwcHg7XFxufVxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAwMHB4KSB7XFxuICAubmF2QmFyIHtcXG4gICAgbWF4LXdpZHRoOiA1NXJlbTtcXG4gICAgd2lkdGg6IDEwMCU7XFxuICAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xcbiAgICBtYXJnaW4tcmlnaHQ6IGF1dG87XFxuICB9XFxuICAubmF2QmFyIC5sb2dvIGltZyB7XFxuICAgIHdpZHRoOiAxODBweDtcXG4gICAgaGVpZ2h0OiBhdXRvO1xcbiAgfVxcbn1cXG5cXG4ubW9iaWxlLW1lbnUge1xcbiAgZGlzcGxheTogbm9uZTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIHRvcDogNTBweDtcXG4gIGxlZnQ6IDA7XFxuICBoZWlnaHQ6IGNhbGMoMTAwdmggLSA1MHB4KTtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG4ubW9iaWxlLW1lbnUgbGkge1xcbiAgbWFyZ2luLWJvdHRvbTogMTBweDtcXG59XFxuXFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA2MDBweCkge1xcbiAgI2Rlc2t0b3AtbWVudSB7XFxuICAgIGRpc3BsYXk6IG5vbmU7XFxuICB9XFxuICAjaGFtYnVyZ2VyLWljb24ge1xcbiAgICBkaXNwbGF5OiBibG9jaztcXG4gIH1cXG59XFxuLm9wZW4gLm1vYmlsZS1tZW51IHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGp1c3RpZnktY29udGVudDogZmxleC1zdGFydDtcXG59XFxuXFxubWFpbiB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICBnYXA6IDMwcHg7XFxufVxcblxcbi5oZXJvIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbn1cXG4uaGVybyBpbWcge1xcbiAgd2lkdGg6IDkwdnc7XFxuICBoZWlnaHQ6IGF1dG87XFxuICBib3gtc2hhZG93OiByZ2JhKDAsIDAsIDAsIDAuMzUpIDBweCA1cHggMTVweDtcXG59XFxuLmhlcm8gLmhlcm9UZXh0IHtcXG4gIGJhY2tncm91bmQtY29sb3I6ICNkZTNjMzE7XFxuICB3aWR0aDogMTAwdnc7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gIHBhZGRpbmc6IDFyZW07XFxufVxcbkBtZWRpYSBvbmx5IHNjcmVlbiBhbmQgKG1pbi13aWR0aDogMTAwMHB4KSB7XFxuICAuaGVybyB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICNkZTNjMzE7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICAgIGFsaWduLWl0ZW1zOiBzdHJldGNoO1xcbiAgfVxcbiAgLmhlcm8gLmhlcm9JbWFnZSBpbWcge1xcbiAgICB3aWR0aDogNDUwcHg7XFxuICAgIGhlaWdodDogYXV0bztcXG4gIH1cXG4gIC5oZXJvIC5oZXJvVGV4dCB7XFxuICAgIHdpZHRoOiAyNTBweDtcXG4gICAgcGFkZGluZzogM3JlbTtcXG4gIH1cXG4gIC5oZXJvIC5oZXJvVGV4dCBoMiB7XFxuICAgIGZvbnQtc2l6ZTogMnJlbTtcXG4gIH1cXG4gIC5oZXJvIC5oZXJvVGV4dCBwIHtcXG4gICAgZm9udC1zaXplOiAxLjJyZW07XFxuICB9XFxufVxcblxcbi5pbmZvIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XFxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XFxuICBiYWNrZ3JvdW5kLWNvbG9yOiAjZGUzYzMxO1xcbiAgcGFkZGluZzogMnJlbTtcXG4gIGJvcmRlci1yYWRpdXM6IDE4cHg7XFxufVxcbi5pbmZvIHVsIHtcXG4gIGxpc3Qtc3R5bGU6IGRpc2M7XFxufVxcblxcbmZvb3RlciB7XFxuICBtYXJnaW4tdG9wOiAxNXB4O1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2RlM2MzMTtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gIGJveC1zaGFkb3c6IHJnYmEoMCwgMCwgMCwgMC4zNSkgMHB4IDVweCAxNXB4O1xcbiAgYm9yZGVyLXRvcDogM3B4IHNvbGlkIHZhcigtLW1haW4tY29sb3IpO1xcbiAgcGFkZGluZzogMXJlbTtcXG4gIHBvc2l0aW9uOiBhYnNvbHV0ZTtcXG4gIGJvdHRvbTogMDtcXG4gIHdpZHRoOiAxMDAlO1xcbn1cXG5mb290ZXIgcCB7XFxuICBtYXJnaW46IDA7XFxufVxcblxcbi5tZW51LWluZm8ge1xcbiAgY29sb3I6IGJsYWNrO1xcbiAgYmFja2dyb3VuZC1jb2xvcjogI2YzZjNmMztcXG4gIHBhZGRpbmc6IDEuMnJlbTtcXG4gIHdpZHRoOiA5NXZ3O1xcbn1cXG4ubWVudS1pbmZvIGgyIHtcXG4gIG1hcmdpbi1ib3R0b206IDAuNXJlbTtcXG59XFxuQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMDAwcHgpIHtcXG4gIC5tZW51LWluZm8ge1xcbiAgICBtYXgtd2lkdGg6IDgwcmVtO1xcbiAgICB3aWR0aDogMTAwJTtcXG4gIH1cXG59XFxuXFxuI21lbnUtaXRlbS1jb250YWluZXIge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJzaGFycF9zYW5zX2Rpc3BsYXlfbm8xYm9sZFxcXCIsIHNhbnMtc2VyaWY7XFxuICBsZXR0ZXItc3BhY2luZzogbm9ybWFsO1xcbiAgZGlzcGxheTogZ3JpZDtcXG4gIGdyaWQtdGVtcGxhdGUtcm93czogMTExcHg7XFxuICBncmlkLWF1dG8tZmxvdzogcm93O1xcbiAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBhdXRvO1xcbiAgLypwYWRkaW5nOiAxLjVyZW07Ki9cXG59XFxuI21lbnUtaXRlbS1jb250YWluZXIgLm1lbnUtaXRlbSB7XFxuICBkaXNwbGF5OiBmbGV4O1xcbiAgYm9yZGVyOiAxcHggc29saWQgcmdiKDEzOCwgMTM4LCAxMzgpO1xcbiAgZ2FwOiAxMHB4O1xcbn1cXG4jbWVudS1pdGVtLWNvbnRhaW5lciAubWVudS1pdGVtIC5pdGVtLWRlc2NyaXB0aW9uIHtcXG4gIGRpc3BsYXk6IGZsZXg7XFxuICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcbn1cXG4jbWVudS1pdGVtLWNvbnRhaW5lciAubWVudS1pdGVtIC5pdGVtLWRlc2NyaXB0aW9uIGgzIHtcXG4gIG1hcmdpbjogNXB4O1xcbiAgbWFyZ2luLWlubGluZTogMDtcXG4gIGZvbnQtc2l6ZTogMS41cmVtO1xcbn1cXG4jbWVudS1pdGVtLWNvbnRhaW5lciAubWVudS1pdGVtIC5pdGVtLWRlc2NyaXB0aW9uIHAge1xcbiAgbWFyZ2luOiAwO1xcbiAgZm9udC1zaXplOiAxcmVtO1xcbn1cXG4jbWVudS1pdGVtLWNvbnRhaW5lciAubWVudS1pdGVtIC5pdGVtLWltYWdlIHtcXG4gIGJvcmRlcjogMXB4IHNvbGlkIHJnYigxMzgsIDEzOCwgMTM4KTtcXG59XFxuI21lbnUtaXRlbS1jb250YWluZXIgLm1lbnUtaXRlbSAuaXRlbS1pbWFnZSBpbWcge1xcbiAgaGVpZ2h0OiAxMTBweDtcXG4gIHdpZHRoOiBhdXRvO1xcbn1cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtaW4td2lkdGg6IDEwMDBweCkge1xcbiAgI21lbnUtaXRlbS1jb250YWluZXIge1xcbiAgICAvKmdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KGF1dG8tZmlsbCwgbWlubWF4KDE1MHB4LCAxZnIpKTsqL1xcbiAgICBncmlkLXRlbXBsYXRlLWNvbHVtbnM6IDFmciAxZnI7XFxuICAgIGdyaWQtdGVtcGxhdGUtcm93czogYXV0bztcXG4gICAgZ2FwOiAxNXB4O1xcbiAgfVxcbiAgI21lbnUtaXRlbS1jb250YWluZXIgLm1lbnUtaXRlbSB7XFxuICAgIGJveC1zaGFkb3c6IDAgNHB4IDhweCAwIHJnYmEoMCwgMCwgMCwgMC4yKTtcXG4gIH1cXG59XCIsIFwiXCIse1widmVyc2lvblwiOjMsXCJzb3VyY2VzXCI6W1wid2VicGFjazovLy4vc3JjL3N0eWxlLnNjc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBaUJBO0VBQ0ksdUJBQUE7RUFDQSwrREFBQTtFQUNBLGdCQUFBO0VBQ0Esa0JBQUE7QUFoQko7QUF5Q0E7RUFDSSxTQUFBO0VBQ0EsVUFBQTtFQUNBLGlFQXBDVTtFQXFDVixtQkFBQTtFQUNBLFlBbkRTO0VBb0RULHNCQUFBO0VBQ0EsK0JBQUE7RUFDQSxrQkFBQTtFQUVBLHlEQUFBO0VBQ0EseUJBQUE7RUFDQSw0QkFBQTtBQXhDSjs7QUEyQ0E7RUFDSSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSxTQUFBO0FBeENKOztBQTJDQTtFQUNJLFlBcEVTO0VBcUVULHFCQUFBO0FBeENKOztBQTJDQTtFQUNJLGdCQUFBO0FBeENKOztBQTJDQTtFQUNJLHlCQTNFUztFQTRFVCxrQkFBQTtFQUNBLFlBQUE7RUFDQSxrQkFBQTtFQUNBLGtCQUFBO0VBQ0EscUJBQUE7RUFDQSxpQkFBQTtFQUNBLGdCQUFBO0FBeENKO0FBMENJO0VBQ0ksZ0NBbkZVO0FBMkNsQjs7QUE0Q0E7RUFDSSx5QkF6RmM7RUEwRmQsWUFBQTtBQXpDSjtBQTJDSTtFQUNJLHlCQTNGZTtBQWtEdkI7O0FBNkNBO0VBQ0ksa0JBQUE7RUFDQSxpQkFBQTtFQUNBLHVCQUFBO0VBQ0EsaUVBM0ZVO0VBNEZWLG1DQUFBO0FBMUNKO0FBNENJO0VBQ0kscUJBQUE7RUFDQSxnQkFBQTtBQTFDUjs7QUE4Q0E7RUFDSSxzQ0FBQTtFQUNBLGFBQUE7QUEzQ0o7QUE2Q0k7RUFDSSxrQkFBQTtBQTNDUjtBQTZDUTtFQUNJLFlBQUE7RUFDQSxZQUFBO0VBQ0EsZ0JBQUE7QUEzQ1o7QUE2Q1k7RUFDSSx3QkFBQTtBQTNDaEI7QUFnREk7RUFDSSxhQUFBO0VBQ0EsYUFBQTtFQUNBLFNBQUE7QUE5Q1I7QUE1RFE7RUFxRlI7SUF5QlEsZ0JBQUE7SUFDQSxXQUFBO0lBQ0EsaUJBQUE7SUFDQSxrQkFBQTtFQTlDTjtFQWlEVTtJQUNJLFlBQUE7SUFDQSxZQUFBO0VBL0NkO0FBQ0Y7O0FBb0RBO0VBQ0ksYUFBQTtFQUNBLGtCQUFBO0VBQ0EsU0FBQTtFQUNBLE9BQUE7RUFDQSwwQkFBQTtFQUNBLFdBQUE7QUFqREo7QUFtREk7RUFDSSxtQkFBQTtBQWpEUjs7QUFxREE7RUFDSTtJQUNFLGFBQUE7RUFsREo7RUFxREU7SUFDRSxjQUFBO0VBbkRKO0FBQ0Y7QUFzREE7RUFDSSxhQUFBO0VBQ0Esc0JBQUE7RUFDQSxtQkFBQTtFQUNBLDJCQUFBO0FBcERKOztBQXVEQTtFQUNJLGFBQUE7RUFDQSxtQkFBQTtFQUNBLHNCQUFBO0VBQ0EsU0FBQTtBQXBESjs7QUF1REE7RUFDSSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSx1QkFBQTtFQUNBLHNCQUFBO0FBcERKO0FBc0RJO0VBQ0ksV0FBQTtFQUNBLFlBQUE7RUFDQSw0Q0F2TE87QUFtSWY7QUF3REk7RUFDSSx5QkFoTVU7RUFpTVYsWUFBQTtFQUNBLGtCQUFBO0VBQ0EsYUFBQTtFQUNBLHNCQUFBO0VBQ0EsYUFBQTtBQXREUjtBQTlIUTtFQWlLUjtJQXVCUSx5QkF6TVU7SUEwTVYsbUJBQUE7SUFDQSxvQkFBQTtFQXRETjtFQXlEVTtJQUNJLFlBQUE7SUFDQSxZQUFBO0VBdkRkO0VBMkRNO0lBQ0ksWUFBQTtJQUNBLGFBQUE7RUF6RFY7RUEyRFU7SUFDSSxlQUFBO0VBekRkO0VBNERVO0lBQ0ksaUJBQUE7RUExRGQ7QUFDRjs7QUErREE7RUFDSSxhQUFBO0VBQ0EsbUJBQUE7RUFDQSx1QkFBQTtFQUNBLGtCQUFBO0VBQ0EseUJBeE9jO0VBeU9kLGFBQUE7RUFDQSxtQkFBQTtBQTVESjtBQThESTtFQUNJLGdCQUFBO0FBNURSOztBQWdFQTtFQUNJLGdCQUFBO0VBQ0EseUJBblBjO0VBb1BkLGFBQUE7RUFDQSxzQkFBQTtFQUNBLG1CQUFBO0VBQ0EsNENBblBXO0VBb1BYLHVDQUFBO0VBQ0EsYUFBQTtFQUVBLGtCQUFBO0VBQ0EsU0FBQTtFQUNBLFdBQUE7QUE5REo7QUFnRUk7RUFDSSxTQUFBO0FBOURSOztBQWtFQTtFQUNJLFlBL1FXO0VBZ1JYLHlCQXJRbUI7RUF1UW5CLGVBQUE7RUFDQSxXQUFBO0FBaEVKO0FBa0VJO0VBQ0kscUJBQUE7QUFoRVI7QUEzTFE7RUFtUFI7SUFZUSxnQkFBQTtJQUNBLFdBQUE7RUFoRU47QUFDRjs7QUFtRUE7RUFDSSxxREFuUm1CO0VBb1JuQixzQkFBQTtFQUVBLGFBQUE7RUFDQSx5QkFBQTtFQUNBLG1CQUFBO0VBQ0Esd0JBQUE7RUFFQSxtQkFBQTtBQWxFSjtBQW1FSTtFQUNJLGFBQUE7RUFFQSxvQ0FBQTtFQUNBLFNBQUE7QUFsRVI7QUFvRVE7RUFDSSxhQUFBO0VBQ0Esc0JBQUE7QUFsRVo7QUFvRVk7RUFDSSxXQUFBO0VBQ0EsZ0JBQUE7RUFDQSxpQkFBQTtBQWxFaEI7QUFxRVk7RUFDSSxTQUFBO0VBQ0EsZUFBQTtBQW5FaEI7QUF1RVE7RUFDSSxvQ0FBQTtBQXJFWjtBQXVFWTtFQUNJLGFBQUE7RUFDQSxXQUFBO0FBckVoQjtBQXBPUTtFQW9RUjtJQTJDUSxnRUFBQTtJQUNBLDhCQUFBO0lBQ0Esd0JBQUE7SUFDQSxTQUFBO0VBdkVOO0VBeUVNO0lBQ0ksMENBQUE7RUF2RVY7QUFDRlwiLFwic291cmNlc0NvbnRlbnRcIjpbXCIkZm9udC1jb2xvcjogd2hpdGU7XFxuJGZvbnQtY29sb3ItMjogYmxhY2s7XFxuJG1haW4tY29sb3I6ICNkZTNjMzE7XFxuJHNlY29uZGFyeS1jb2xvcjogI2YyYzkzMDtcXG4kbWFpbi1jb2xvci1kYXJrOiByZ2IoMTgwLCAwLCAwKTtcXG4kc2Vjb25kYXJ5LWNvbG9yLWRhcms6ICNjZmEyMDA7XFxuJHNlY29uZGFyeS1jb2xvci1saWdodDogI2VlZDA2MztcXG5cXG4kZmFuY3ktbGlnaHQ6ICMwNmFlZDU7XFxuJGZhbmN5LWRhcms6ICMwODY3ODg7XFxuXFxuJG1haW4tYmFja2dyb3VuZDogI2RlM2MzMTtcXG4kc2Vjb25kYXJ5LWJhY2tncm91bmQ6ICNmM2YzZjM7XFxuJGZvbnQtZmFtaWx5OiAnQ2FmZVJlc3QnLCAnc2hhcnBfc2Fuc19kaXNwbGF5X25vMWJvbGQnLCBzYW5zLXNlcmlmO1xcbiRmb250LWZhbWlseS1yZWFkYWJsZTogJ3NoYXJwX3NhbnNfZGlzcGxheV9ubzFib2xkJywgc2Fucy1zZXJpZjtcXG4kc21hbGwtc2hhZG93OiByZ2JhKDAsIDAsIDAsIDAuMzUpIDBweCA1cHggMTVweDtcXG5cXG5AZm9udC1mYWNlIHtcXG4gICAgZm9udC1mYW1pbHk6ICdDYWZlUmVzdCc7XFxuICAgIHNyYzogdXJsKCdyZXNvdXJjZXMvQ2FmZVxcXFwgRnJhbmNvaXNlX0Qub3RmJykgZm9ybWF0KCdvcGVudHlwZScpO1xcbiAgICBmb250LXdlaWdodDogNjAwO1xcbiAgICBmb250LXN0eWxlOiBub3JtYWw7XFxufVxcblxcbkBtaXhpbiBkZXZpY2VzICgkYnJlYWtwb2ludCkge1xcbiAgICAvL3RoZSBuYW1lIG9mIHRoZSBtaXhpbiBpcyBkZXZpY2VzXFxuXFxuICAgIEBpZiAkYnJlYWtwb2ludCA9PWRlc2t0b3Age1xcbiAgICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWluLXdpZHRoOiAxMDAwcHgpIHtcXG4gICAgICAgICAgICBAY29udGVudDtcXG4gICAgICAgIH1cXG4gICAgfVxcblxcbiAgICBAaWYgJGJyZWFrcG9pbnQgPT10YWJsZXQge1xcbiAgICAgICAgQG1lZGlhIG9ubHkgc2NyZWVuIGFuZCAobWF4LXdpZHRoOiA2ODBweCkge1xcbiAgICAgICAgICAgIEBjb250ZW50O1xcbiAgICAgICAgfVxcbiAgICB9XFxuXFxuICAgIEBpZiAkYnJlYWtwb2ludCA9PW1vYmlsZSB7XFxuICAgICAgICBAbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDQ4MXB4KSB7XFxuICAgICAgICAgICAgQGNvbnRlbnQ7XFxuICAgICAgICB9XFxuICAgIH1cXG59XFxuXFxuYm9keSB7XFxuICAgIG1hcmdpbjogMDtcXG4gICAgcGFkZGluZzogMDtcXG4gICAgZm9udC1mYW1pbHk6ICRmb250LWZhbWlseTtcXG4gICAgbGV0dGVyLXNwYWNpbmc6IDJweDtcXG4gICAgY29sb3I6ICRmb250LWNvbG9yO1xcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xcbiAgICBtaW4taGVpZ2h0OiBjYWxjKDEwMHZoICsgMjUwcHgpO1xcbiAgICBwb3NpdGlvbjogcmVsYXRpdmU7XFxuXFxuICAgIGJhY2tncm91bmQtaW1hZ2U6IHVybChyZXNvdXJjZXMvYmFja2dyb3VuZC5qcGcpO1xcbiAgICBiYWNrZ3JvdW5kLXJlcGVhdDogcmVwZWF0O1xcbiAgICBiYWNrZ3JvdW5kLWF0dGFjaG1lbnQ6IGZpeGVkO1xcbn1cXG5cXG4uY29udGVudCB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGdhcDogMjBweDtcXG59XFxuXFxuYSB7XFxuICAgIGNvbG9yOiAkZm9udC1jb2xvcjtcXG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xcbn1cXG5cXG51bCB7XFxuICAgIGxpc3Qtc3R5bGU6IG5vbmU7XFxufVxcblxcbi5idXR0b24ge1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkbWFpbi1jb2xvcjtcXG4gICAgcGFkZGluZzogMTJweCAyNXB4O1xcbiAgICBib3JkZXI6IG5vbmU7XFxuICAgIGJvcmRlci1yYWRpdXM6IDhweDtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICB0ZXh0LWRlY29yYXRpb246IG5vbmU7XFxuICAgIGZvbnQtd2VpZ2h0OiBib2xkO1xcbiAgICB0cmFuc2l0aW9uOiAwLjNzO1xcblxcbiAgICAmOmhvdmVyIHtcXG4gICAgICAgIGJhY2tncm91bmQtY29sb3I6ICRtYWluLWNvbG9yLWRhcms7XFxuICAgIH1cXG59XFxuXFxuLmZhbmN5LWJ1dHRvbiB7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICRzZWNvbmRhcnktY29sb3I7XFxuICAgIGNvbG9yOiBibGFjaztcXG5cXG4gICAgJjpob3ZlciB7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkc2Vjb25kYXJ5LWNvbG9yLWRhcms7XFxuICAgIH1cXG59XFxuXFxuLmltcG9ydGFudC1idXR0b24ge1xcbiAgICBwYWRkaW5nOiAyMHB4IDMwcHg7XFxuICAgIGZvbnQtc2l6ZTogMS41cmVtO1xcbiAgICB0cmFuc2Zvcm06IHJvdGF0ZSgyZGVnKTtcXG4gICAgZm9udC1mYW1pbHk6ICRmb250LWZhbWlseTtcXG4gICAgYm94LXNoYWRvdzogOHB4IDhweCAwcHggMHB4ICRzZWNvbmRhcnktY29sb3ItZGFyaztcXG5cXG4gICAgJjpob3ZlciB7XFxuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDEuMSk7XFxuICAgICAgICBib3gtc2hhZG93OiBub25lO1xcbiAgICB9XFxufVxcblxcbi5uYXZCYXIge1xcbiAgICAvKmJhY2tncm91bmQtY29sb3I6ICRtYWluLWJhY2tncm91bmQ7Ki9cXG4gICAgZGlzcGxheTogZmxleDtcXG5cXG4gICAgLmxvZ28ge1xcbiAgICAgICAgbWFyZ2luLXJpZ2h0OiBhdXRvO1xcblxcbiAgICAgICAgaW1nIHtcXG4gICAgICAgICAgICB3aWR0aDogMTAwcHg7XFxuICAgICAgICAgICAgaGVpZ2h0OiBhdXRvO1xcbiAgICAgICAgICAgIHRyYW5zaXRpb246IDAuM3M7XFxuXFxuICAgICAgICAgICAgJjpob3ZlciB7XFxuICAgICAgICAgICAgICAgIHRyYW5zZm9ybTogcm90YXRlKDE1ZGVnKTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgIH1cXG5cXG4gICAgdWwge1xcbiAgICAgICAgcGFkZGluZzogMXJlbTtcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgICAgICBnYXA6IDEwcHg7XFxuICAgIH1cXG5cXG4gICAgQGluY2x1ZGUgZGV2aWNlcyhkZXNrdG9wKSB7XFxuICAgICAgICBtYXgtd2lkdGg6IDU1cmVtO1xcbiAgICAgICAgd2lkdGg6IDEwMCU7XFxuICAgICAgICBtYXJnaW4tbGVmdDogYXV0bztcXG4gICAgICAgIG1hcmdpbi1yaWdodDogYXV0bztcXG5cXG4gICAgICAgIC5sb2dvIHtcXG4gICAgICAgICAgICBpbWcge1xcbiAgICAgICAgICAgICAgICB3aWR0aDogMTgwcHg7XFxuICAgICAgICAgICAgICAgIGhlaWdodDogYXV0bztcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgIH1cXG59XFxuXFxuLm1vYmlsZS1tZW51IHtcXG4gICAgZGlzcGxheTogbm9uZTtcXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICB0b3A6IDUwcHg7XFxuICAgIGxlZnQ6IDA7XFxuICAgIGhlaWdodDogY2FsYygxMDB2aCAtIDUwcHgpO1xcbiAgICB3aWR0aDogMTAwJTtcXG5cXG4gICAgbGkge1xcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMTBweDtcXG4gICAgfVxcbn1cXG5cXG5AbWVkaWEgb25seSBzY3JlZW4gYW5kIChtYXgtd2lkdGg6IDYwMHB4KSB7XFxuICAgICNkZXNrdG9wLW1lbnUge1xcbiAgICAgIGRpc3BsYXk6IG5vbmU7XFxuICAgIH1cXG4gIFxcbiAgICAjaGFtYnVyZ2VyLWljb24ge1xcbiAgICAgIGRpc3BsYXk6IGJsb2NrO1xcbiAgICB9XFxuICB9XFxuXFxuLm9wZW4gLm1vYmlsZS1tZW51IHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xcbn1cXG5cXG5tYWluIHtcXG4gICAgZGlzcGxheTogZmxleDtcXG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcXG4gICAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcXG4gICAgZ2FwOiAzMHB4O1xcbn1cXG5cXG4uaGVybyB7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xcbiAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcblxcbiAgICBpbWcge1xcbiAgICAgICAgd2lkdGg6IDkwdnc7XFxuICAgICAgICBoZWlnaHQ6IGF1dG87XFxuICAgICAgICBib3gtc2hhZG93OiAkc21hbGwtc2hhZG93O1xcblxcbiAgICB9XFxuXFxuICAgIC5oZXJvVGV4dCB7XFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkbWFpbi1iYWNrZ3JvdW5kO1xcbiAgICAgICAgd2lkdGg6IDEwMHZ3O1xcbiAgICAgICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgICAgICBwYWRkaW5nOiAxcmVtO1xcbiAgICB9XFxuXFxuICAgIEBpbmNsdWRlIGRldmljZXMoZGVza3RvcCkge1xcbiAgICAgICAgYmFja2dyb3VuZC1jb2xvcjogJG1haW4tYmFja2dyb3VuZDtcXG4gICAgICAgIGZsZXgtZGlyZWN0aW9uOiByb3c7XFxuICAgICAgICBhbGlnbi1pdGVtczogc3RyZXRjaDtcXG5cXG4gICAgICAgIC5oZXJvSW1hZ2Uge1xcbiAgICAgICAgICAgIGltZyB7XFxuICAgICAgICAgICAgICAgIHdpZHRoOiA0NTBweDtcXG4gICAgICAgICAgICAgICAgaGVpZ2h0OiBhdXRvO1xcbiAgICAgICAgICAgIH1cXG4gICAgICAgIH1cXG5cXG4gICAgICAgIC5oZXJvVGV4dCB7XFxuICAgICAgICAgICAgd2lkdGg6IDI1MHB4O1xcbiAgICAgICAgICAgIHBhZGRpbmc6IDNyZW07XFxuXFxuICAgICAgICAgICAgaDIge1xcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDJyZW07XFxuICAgICAgICAgICAgfVxcblxcbiAgICAgICAgICAgIHAge1xcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDEuMnJlbTtcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgIH1cXG59XFxuXFxuLmluZm8ge1xcbiAgICBkaXNwbGF5OiBmbGV4O1xcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xcbiAgICBqdXN0aWZ5LWNvbnRlbnQ6IGNlbnRlcjtcXG4gICAgdGV4dC1hbGlnbjogY2VudGVyO1xcbiAgICBiYWNrZ3JvdW5kLWNvbG9yOiAkbWFpbi1iYWNrZ3JvdW5kO1xcbiAgICBwYWRkaW5nOiAycmVtO1xcbiAgICBib3JkZXItcmFkaXVzOiAxOHB4O1xcblxcbiAgICB1bCB7XFxuICAgICAgICBsaXN0LXN0eWxlOiBkaXNjO1xcbiAgICB9XFxufVxcblxcbmZvb3RlciB7XFxuICAgIG1hcmdpbi10b3A6IDE1cHg7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICRtYWluLWJhY2tncm91bmQ7XFxuICAgIGRpc3BsYXk6IGZsZXg7XFxuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XFxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XFxuICAgIGJveC1zaGFkb3c6ICRzbWFsbC1zaGFkb3c7XFxuICAgIGJvcmRlci10b3A6IDNweCBzb2xpZCB2YXIoLS1tYWluLWNvbG9yKTtcXG4gICAgcGFkZGluZzogMXJlbTtcXG5cXG4gICAgcG9zaXRpb246IGFic29sdXRlO1xcbiAgICBib3R0b206IDA7XFxuICAgIHdpZHRoOiAxMDAlO1xcblxcbiAgICBwIHtcXG4gICAgICAgIG1hcmdpbjogMDtcXG4gICAgfVxcbn1cXG5cXG4ubWVudS1pbmZvIHtcXG4gICAgY29sb3I6ICRmb250LWNvbG9yLTI7XFxuICAgIGJhY2tncm91bmQtY29sb3I6ICRzZWNvbmRhcnktYmFja2dyb3VuZDtcXG5cXG4gICAgcGFkZGluZzogMS4ycmVtO1xcbiAgICB3aWR0aDogOTV2dztcXG5cXG4gICAgaDIge1xcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogMC41cmVtO1xcbiAgICB9XFxuXFxuICAgIEBpbmNsdWRlIGRldmljZXMoZGVza3RvcCkge1xcbiAgICAgICAgbWF4LXdpZHRoOiA4MHJlbTtcXG4gICAgICAgIHdpZHRoOiAxMDAlO1xcbiAgICB9XFxufVxcblxcbiNtZW51LWl0ZW0tY29udGFpbmVyIHtcXG4gICAgZm9udC1mYW1pbHk6ICRmb250LWZhbWlseS1yZWFkYWJsZTtcXG4gICAgbGV0dGVyLXNwYWNpbmc6IG5vcm1hbDtcXG5cXG4gICAgZGlzcGxheTogZ3JpZDtcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiAxMTFweDtcXG4gICAgZ3JpZC1hdXRvLWZsb3c6IHJvdztcXG4gICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBhdXRvO1xcblxcbiAgICAvKnBhZGRpbmc6IDEuNXJlbTsqL1xcbiAgICAubWVudS1pdGVtIHtcXG4gICAgICAgIGRpc3BsYXk6IGZsZXg7XFxuXFxuICAgICAgICBib3JkZXI6IDFweCBzb2xpZCByZ2IoMTM4LCAxMzgsIDEzOCk7XFxuICAgICAgICBnYXA6IDEwcHg7XFxuXFxuICAgICAgICAuaXRlbS1kZXNjcmlwdGlvbiB7XFxuICAgICAgICAgICAgZGlzcGxheTogZmxleDtcXG4gICAgICAgICAgICBmbGV4LWRpcmVjdGlvbjogY29sdW1uO1xcblxcbiAgICAgICAgICAgIGgzIHtcXG4gICAgICAgICAgICAgICAgbWFyZ2luOiA1cHg7XFxuICAgICAgICAgICAgICAgIG1hcmdpbi1pbmxpbmU6IDA7XFxuICAgICAgICAgICAgICAgIGZvbnQtc2l6ZTogMS41cmVtO1xcbiAgICAgICAgICAgIH1cXG5cXG4gICAgICAgICAgICBwIHtcXG4gICAgICAgICAgICAgICAgbWFyZ2luOiAwO1xcbiAgICAgICAgICAgICAgICBmb250LXNpemU6IDFyZW07XFxuICAgICAgICAgICAgfVxcbiAgICAgICAgfVxcblxcbiAgICAgICAgLml0ZW0taW1hZ2Uge1xcbiAgICAgICAgICAgIGJvcmRlcjogMXB4IHNvbGlkIHJnYigxMzgsIDEzOCwgMTM4KTtcXG5cXG4gICAgICAgICAgICBpbWcge1xcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDExMHB4O1xcbiAgICAgICAgICAgICAgICB3aWR0aDogYXV0bztcXG4gICAgICAgICAgICB9XFxuICAgICAgICB9XFxuICAgIH1cXG5cXG4gICAgQGluY2x1ZGUgZGV2aWNlcyhkZXNrdG9wKSB7XFxuICAgICAgICAvKmdyaWQtdGVtcGxhdGUtY29sdW1uczogcmVwZWF0KGF1dG8tZmlsbCwgbWlubWF4KDE1MHB4LCAxZnIpKTsqL1xcbiAgICAgICAgZ3JpZC10ZW1wbGF0ZS1jb2x1bW5zOiAxZnIgMWZyO1xcbiAgICAgICAgZ3JpZC10ZW1wbGF0ZS1yb3dzOiBhdXRvO1xcbiAgICAgICAgZ2FwOiAxNXB4O1xcblxcbiAgICAgICAgLm1lbnUtaXRlbSB7XFxuICAgICAgICAgICAgYm94LXNoYWRvdzogMCA0cHggOHB4IDAgcmdiYSgwLCAwLCAwLCAwLjIpO1xcbiAgICAgICAgfVxcbiAgICB9XFxufVwiXSxcInNvdXJjZVJvb3RcIjpcIlwifV0pO1xuLy8gRXhwb3J0c1xuZXhwb3J0IGRlZmF1bHQgX19fQ1NTX0xPQURFUl9FWFBPUlRfX187XG4iLCJcInVzZSBzdHJpY3RcIjtcblxuLypcbiAgTUlUIExpY2Vuc2UgaHR0cDovL3d3dy5vcGVuc291cmNlLm9yZy9saWNlbnNlcy9taXQtbGljZW5zZS5waHBcbiAgQXV0aG9yIFRvYmlhcyBLb3BwZXJzIEBzb2tyYVxuKi9cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gXCJcIjtcbiAgICAgIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2YgaXRlbVs1XSAhPT0gXCJ1bmRlZmluZWRcIjtcblxuICAgICAgaWYgKGl0ZW1bNF0pIHtcbiAgICAgICAgY29udGVudCArPSBcIkBzdXBwb3J0cyAoXCIuY29uY2F0KGl0ZW1bNF0sIFwiKSB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAoaXRlbVsyXSkge1xuICAgICAgICBjb250ZW50ICs9IFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpO1xuICAgICAgfVxuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJAbGF5ZXJcIi5jb25jYXQoaXRlbVs1XS5sZW5ndGggPiAwID8gXCIgXCIuY29uY2F0KGl0ZW1bNV0pIDogXCJcIiwgXCIge1wiKTtcbiAgICAgIH1cblxuICAgICAgY29udGVudCArPSBjc3NXaXRoTWFwcGluZ1RvU3RyaW5nKGl0ZW0pO1xuXG4gICAgICBpZiAobmVlZExheWVyKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzJdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIGlmIChpdGVtWzRdKSB7XG4gICAgICAgIGNvbnRlbnQgKz0gXCJ9XCI7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiBpKG1vZHVsZXMsIG1lZGlhLCBkZWR1cGUsIHN1cHBvcnRzLCBsYXllcikge1xuICAgIGlmICh0eXBlb2YgbW9kdWxlcyA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgbW9kdWxlcyA9IFtbbnVsbCwgbW9kdWxlcywgdW5kZWZpbmVkXV07XG4gICAgfVxuXG4gICAgdmFyIGFscmVhZHlJbXBvcnRlZE1vZHVsZXMgPSB7fTtcblxuICAgIGlmIChkZWR1cGUpIHtcbiAgICAgIGZvciAodmFyIGsgPSAwOyBrIDwgdGhpcy5sZW5ndGg7IGsrKykge1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2tdWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2sgPSAwOyBfayA8IG1vZHVsZXMubGVuZ3RoOyBfaysrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19rXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICBjb250aW51ZTtcbiAgICAgIH1cblxuICAgICAgaWYgKHR5cGVvZiBsYXllciAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgICBpZiAodHlwZW9mIGl0ZW1bNV0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQGxheWVyXCIuY29uY2F0KGl0ZW1bNV0ubGVuZ3RoID4gMCA/IFwiIFwiLmNvbmNhdChpdGVtWzVdKSA6IFwiXCIsIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzVdID0gbGF5ZXI7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKG1lZGlhKSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpdGVtWzFdID0gXCJAbWVkaWEgXCIuY29uY2F0KGl0ZW1bMl0sIFwiIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzJdID0gbWVkaWE7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHN1cHBvcnRzKSB7XG4gICAgICAgIGlmICghaXRlbVs0XSkge1xuICAgICAgICAgIGl0ZW1bNF0gPSBcIlwiLmNvbmNhdChzdXBwb3J0cyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaXRlbVsxXSA9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQoaXRlbVs0XSwgXCIpIHtcIikuY29uY2F0KGl0ZW1bMV0sIFwifVwiKTtcbiAgICAgICAgICBpdGVtWzRdID0gc3VwcG9ydHM7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgbGlzdC5wdXNoKGl0ZW0pO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gbGlzdDtcbn07IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKHVybCwgb3B0aW9ucykge1xuICBpZiAoIW9wdGlvbnMpIHtcbiAgICBvcHRpb25zID0ge307XG4gIH1cblxuICBpZiAoIXVybCkge1xuICAgIHJldHVybiB1cmw7XG4gIH1cblxuICB1cmwgPSBTdHJpbmcodXJsLl9fZXNNb2R1bGUgPyB1cmwuZGVmYXVsdCA6IHVybCk7IC8vIElmIHVybCBpcyBhbHJlYWR5IHdyYXBwZWQgaW4gcXVvdGVzLCByZW1vdmUgdGhlbVxuXG4gIGlmICgvXlsnXCJdLipbJ1wiXSQvLnRlc3QodXJsKSkge1xuICAgIHVybCA9IHVybC5zbGljZSgxLCAtMSk7XG4gIH1cblxuICBpZiAob3B0aW9ucy5oYXNoKSB7XG4gICAgdXJsICs9IG9wdGlvbnMuaGFzaDtcbiAgfSAvLyBTaG91bGQgdXJsIGJlIHdyYXBwZWQ/XG4gIC8vIFNlZSBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3NzLXZhbHVlcy0zLyN1cmxzXG5cblxuICBpZiAoL1tcIicoKSBcXHRcXG5dfCglMjApLy50ZXN0KHVybCkgfHwgb3B0aW9ucy5uZWVkUXVvdGVzKSB7XG4gICAgcmV0dXJuIFwiXFxcIlwiLmNvbmNhdCh1cmwucmVwbGFjZSgvXCIvZywgJ1xcXFxcIicpLnJlcGxhY2UoL1xcbi9nLCBcIlxcXFxuXCIpLCBcIlxcXCJcIik7XG4gIH1cblxuICByZXR1cm4gdXJsO1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAoaXRlbSkge1xuICB2YXIgY29udGVudCA9IGl0ZW1bMV07XG4gIHZhciBjc3NNYXBwaW5nID0gaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luamVjdFN0eWxlc0ludG9TdHlsZVRhZy5qc1wiO1xuICAgICAgaW1wb3J0IGRvbUFQSSBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0Rm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3NldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlcy5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydFN0eWxlRWxlbWVudCBmcm9tIFwiIS4uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL2luc2VydFN0eWxlRWxlbWVudC5qc1wiO1xuICAgICAgaW1wb3J0IHN0eWxlVGFnVHJhbnNmb3JtRm4gZnJvbSBcIiEuLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi4vbm9kZV9tb2R1bGVzL3Nhc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4vc3R5bGUuc2Nzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uL25vZGVfbW9kdWxlcy9jc3MtbG9hZGVyL2Rpc3QvY2pzLmpzIS4uL25vZGVfbW9kdWxlcy9zYXNzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL3N0eWxlLnNjc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRE9NID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5ET00ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5ET01baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleEJ5SWRlbnRpZmllciA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXSxcbiAgICAgIHN1cHBvcnRzOiBpdGVtWzRdLFxuICAgICAgbGF5ZXI6IGl0ZW1bNV1cbiAgICB9O1xuXG4gICAgaWYgKGluZGV4QnlJZGVudGlmaWVyICE9PSAtMSkge1xuICAgICAgc3R5bGVzSW5ET01baW5kZXhCeUlkZW50aWZpZXJdLnJlZmVyZW5jZXMrKztcbiAgICAgIHN0eWxlc0luRE9NW2luZGV4QnlJZGVudGlmaWVyXS51cGRhdGVyKG9iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciB1cGRhdGVyID0gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucyk7XG4gICAgICBvcHRpb25zLmJ5SW5kZXggPSBpO1xuICAgICAgc3R5bGVzSW5ET00uc3BsaWNlKGksIDAsIHtcbiAgICAgICAgaWRlbnRpZmllcjogaWRlbnRpZmllcixcbiAgICAgICAgdXBkYXRlcjogdXBkYXRlcixcbiAgICAgICAgcmVmZXJlbmNlczogMVxuICAgICAgfSk7XG4gICAgfVxuXG4gICAgaWRlbnRpZmllcnMucHVzaChpZGVudGlmaWVyKTtcbiAgfVxuXG4gIHJldHVybiBpZGVudGlmaWVycztcbn1cblxuZnVuY3Rpb24gYWRkRWxlbWVudFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcblxuICB2YXIgdXBkYXRlciA9IGZ1bmN0aW9uIHVwZGF0ZXIobmV3T2JqKSB7XG4gICAgaWYgKG5ld09iaikge1xuICAgICAgaWYgKG5ld09iai5jc3MgPT09IG9iai5jc3MgJiYgbmV3T2JqLm1lZGlhID09PSBvYmoubWVkaWEgJiYgbmV3T2JqLnNvdXJjZU1hcCA9PT0gb2JqLnNvdXJjZU1hcCAmJiBuZXdPYmouc3VwcG9ydHMgPT09IG9iai5zdXBwb3J0cyAmJiBuZXdPYmoubGF5ZXIgPT09IG9iai5sYXllcikge1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG5cbiAgICAgIGFwaS51cGRhdGUob2JqID0gbmV3T2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgYXBpLnJlbW92ZSgpO1xuICAgIH1cbiAgfTtcblxuICByZXR1cm4gdXBkYXRlcjtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiAobGlzdCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgbGlzdCA9IGxpc3QgfHwgW107XG4gIHZhciBsYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obGlzdCwgb3B0aW9ucyk7XG4gIHJldHVybiBmdW5jdGlvbiB1cGRhdGUobmV3TGlzdCkge1xuICAgIG5ld0xpc3QgPSBuZXdMaXN0IHx8IFtdO1xuXG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBsYXN0SWRlbnRpZmllcnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBpZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW2ldO1xuICAgICAgdmFyIGluZGV4ID0gZ2V0SW5kZXhCeUlkZW50aWZpZXIoaWRlbnRpZmllcik7XG4gICAgICBzdHlsZXNJbkRPTVtpbmRleF0ucmVmZXJlbmNlcy0tO1xuICAgIH1cblxuICAgIHZhciBuZXdMYXN0SWRlbnRpZmllcnMgPSBtb2R1bGVzVG9Eb20obmV3TGlzdCwgb3B0aW9ucyk7XG5cbiAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgX2krKykge1xuICAgICAgdmFyIF9pZGVudGlmaWVyID0gbGFzdElkZW50aWZpZXJzW19pXTtcblxuICAgICAgdmFyIF9pbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKF9pZGVudGlmaWVyKTtcblxuICAgICAgaWYgKHN0eWxlc0luRE9NW19pbmRleF0ucmVmZXJlbmNlcyA9PT0gMCkge1xuICAgICAgICBzdHlsZXNJbkRPTVtfaW5kZXhdLnVwZGF0ZXIoKTtcblxuICAgICAgICBzdHlsZXNJbkRPTS5zcGxpY2UoX2luZGV4LCAxKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBsYXN0SWRlbnRpZmllcnMgPSBuZXdMYXN0SWRlbnRpZmllcnM7XG4gIH07XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG52YXIgbWVtbyA9IHt9O1xuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cbmZ1bmN0aW9uIGdldFRhcmdldCh0YXJnZXQpIHtcbiAgaWYgKHR5cGVvZiBtZW1vW3RhcmdldF0gPT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICB2YXIgc3R5bGVUYXJnZXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKHRhcmdldCk7IC8vIFNwZWNpYWwgY2FzZSB0byByZXR1cm4gaGVhZCBvZiBpZnJhbWUgaW5zdGVhZCBvZiBpZnJhbWUgaXRzZWxmXG5cbiAgICBpZiAod2luZG93LkhUTUxJRnJhbWVFbGVtZW50ICYmIHN0eWxlVGFyZ2V0IGluc3RhbmNlb2Ygd2luZG93LkhUTUxJRnJhbWVFbGVtZW50KSB7XG4gICAgICB0cnkge1xuICAgICAgICAvLyBUaGlzIHdpbGwgdGhyb3cgYW4gZXhjZXB0aW9uIGlmIGFjY2VzcyB0byBpZnJhbWUgaXMgYmxvY2tlZFxuICAgICAgICAvLyBkdWUgdG8gY3Jvc3Mtb3JpZ2luIHJlc3RyaWN0aW9uc1xuICAgICAgICBzdHlsZVRhcmdldCA9IHN0eWxlVGFyZ2V0LmNvbnRlbnREb2N1bWVudC5oZWFkO1xuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpc3RhbmJ1bCBpZ25vcmUgbmV4dFxuICAgICAgICBzdHlsZVRhcmdldCA9IG51bGw7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbWVtb1t0YXJnZXRdID0gc3R5bGVUYXJnZXQ7XG4gIH1cblxuICByZXR1cm4gbWVtb1t0YXJnZXRdO1xufVxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5cblxuZnVuY3Rpb24gaW5zZXJ0QnlTZWxlY3RvcihpbnNlcnQsIHN0eWxlKSB7XG4gIHZhciB0YXJnZXQgPSBnZXRUYXJnZXQoaW5zZXJ0KTtcblxuICBpZiAoIXRhcmdldCkge1xuICAgIHRocm93IG5ldyBFcnJvcihcIkNvdWxkbid0IGZpbmQgYSBzdHlsZSB0YXJnZXQuIFRoaXMgcHJvYmFibHkgbWVhbnMgdGhhdCB0aGUgdmFsdWUgZm9yIHRoZSAnaW5zZXJ0JyBwYXJhbWV0ZXIgaXMgaW52YWxpZC5cIik7XG4gIH1cblxuICB0YXJnZXQuYXBwZW5kQ2hpbGQoc3R5bGUpO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGluc2VydEJ5U2VsZWN0b3I7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpIHtcbiAgdmFyIGVsZW1lbnQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG4gIG9wdGlvbnMuc2V0QXR0cmlidXRlcyhlbGVtZW50LCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChlbGVtZW50LCBvcHRpb25zLm9wdGlvbnMpO1xuICByZXR1cm4gZWxlbWVudDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlRWxlbWVudCkge1xuICB2YXIgbm9uY2UgPSB0eXBlb2YgX193ZWJwYWNrX25vbmNlX18gIT09IFwidW5kZWZpbmVkXCIgPyBfX3dlYnBhY2tfbm9uY2VfXyA6IG51bGw7XG5cbiAgaWYgKG5vbmNlKSB7XG4gICAgc3R5bGVFbGVtZW50LnNldEF0dHJpYnV0ZShcIm5vbmNlXCIsIG5vbmNlKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldEF0dHJpYnV0ZXNXaXRob3V0QXR0cmlidXRlczsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gXCJcIjtcblxuICBpZiAob2JqLnN1cHBvcnRzKSB7XG4gICAgY3NzICs9IFwiQHN1cHBvcnRzIChcIi5jb25jYXQob2JqLnN1cHBvcnRzLCBcIikge1wiKTtcbiAgfVxuXG4gIGlmIChvYmoubWVkaWEpIHtcbiAgICBjc3MgKz0gXCJAbWVkaWEgXCIuY29uY2F0KG9iai5tZWRpYSwgXCIge1wiKTtcbiAgfVxuXG4gIHZhciBuZWVkTGF5ZXIgPSB0eXBlb2Ygb2JqLmxheWVyICE9PSBcInVuZGVmaW5lZFwiO1xuXG4gIGlmIChuZWVkTGF5ZXIpIHtcbiAgICBjc3MgKz0gXCJAbGF5ZXJcIi5jb25jYXQob2JqLmxheWVyLmxlbmd0aCA+IDAgPyBcIiBcIi5jb25jYXQob2JqLmxheWVyKSA6IFwiXCIsIFwiIHtcIik7XG4gIH1cblxuICBjc3MgKz0gb2JqLmNzcztcblxuICBpZiAobmVlZExheWVyKSB7XG4gICAgY3NzICs9IFwifVwiO1xuICB9XG5cbiAgaWYgKG9iai5tZWRpYSkge1xuICAgIGNzcyArPSBcIn1cIjtcbiAgfVxuXG4gIGlmIChvYmouc3VwcG9ydHMpIHtcbiAgICBjc3MgKz0gXCJ9XCI7XG4gIH1cblxuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQsIG9wdGlvbnMub3B0aW9ucyk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpIHtcbiAgLy8gaXN0YW5idWwgaWdub3JlIGlmXG4gIGlmIChzdHlsZUVsZW1lbnQucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIHN0eWxlRWxlbWVudC5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlRWxlbWVudCk7XG59XG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cblxuXG5mdW5jdGlvbiBkb21BUEkob3B0aW9ucykge1xuICB2YXIgc3R5bGVFbGVtZW50ID0gb3B0aW9ucy5pbnNlcnRTdHlsZUVsZW1lbnQob3B0aW9ucyk7XG4gIHJldHVybiB7XG4gICAgdXBkYXRlOiBmdW5jdGlvbiB1cGRhdGUob2JqKSB7XG4gICAgICBhcHBseShzdHlsZUVsZW1lbnQsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZUVsZW1lbnQpO1xuICAgIH1cbiAgfTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBkb21BUEk7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZUVsZW1lbnQpIHtcbiAgaWYgKHN0eWxlRWxlbWVudC5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGVFbGVtZW50LnN0eWxlU2hlZXQuY3NzVGV4dCA9IGNzcztcbiAgfSBlbHNlIHtcbiAgICB3aGlsZSAoc3R5bGVFbGVtZW50LmZpcnN0Q2hpbGQpIHtcbiAgICAgIHN0eWxlRWxlbWVudC5yZW1vdmVDaGlsZChzdHlsZUVsZW1lbnQuZmlyc3RDaGlsZCk7XG4gICAgfVxuXG4gICAgc3R5bGVFbGVtZW50LmFwcGVuZENoaWxkKGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKGNzcykpO1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gc3R5bGVUYWdUcmFuc2Zvcm07IiwiaW1wb3J0IFRlbXBsYXRlIGZyb20gJy4uLy4uL3Jlc291cmNlcy90ZW1wbGF0ZV9tYWluLmpwZyc7XG5pbXBvcnQgbWVudVRhYiBmcm9tICcuLi9tZW51L21lbnUuanMnO1xuaW1wb3J0IHtodG1sLCByZW5kZXJ9IGZyb20gJ2xpdC1odG1sJztcblxuZnVuY3Rpb24gY29tcG9uZW50KCkge1xuICAgIGNvbnN0IHBhZ2VDb250ZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2NvbnRlbnQnKTtcblxuICAgIGNvbnN0IGFib3V0QmxvY2sgPSAoKSA9PiBodG1sYDxtYWluPlxuICAgICAgICBcbiAgICAgICAgPGRpdiBjbGFzcz1cImhlcm9cIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJoZXJvSW1hZ2VcIj5cbiAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIiR7VGVtcGxhdGV9XCIgYWx0PVwiTWFpbiBJbWFnZVwiPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaGVyb1RleHRcIj5cbiAgICAgICAgICAgICAgICA8aDI+V2VsY29tZSB0byB0aGUgYmVzdCByZXN0YXVyYW50ITwvaDI+XG4gICAgICAgICAgICAgICAgPHA+V2Ugc2VsbCBhIGxvdCBvZiBmb29kLjwvcD5cbiAgICAgICAgICAgICAgICA8YnV0dG9uIGlkPVwiYmlnTWVudUJ1dHRvblwiIHN0eWxlPVwiY3Vyc29yOnBvaW50ZXJcIiBcbiAgICAgICAgICAgICAgICBjbGFzcz1cImJ1dHRvbiBmYW5jeS1idXR0b24gaW1wb3J0YW50LWJ1dHRvblwiPkdvIHRvIE1lbnUgPj48L2J1dHRvbj5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cImluZm9cIj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJob3Vyc0luZm9cIj5cbiAgICAgICAgICAgICAgICA8aDI+QnVzaW5lc3MgSG91cnM6PC9oMj5cbiAgICAgICAgICAgICAgICA8dWw+XG4gICAgICAgICAgICAgICAgICAgIDxsaT48cD4wMDowMCBQTSAtIDY6MDAgUE08L3A+PC9saT5cbiAgICAgICAgICAgICAgICAgICAgPGxpPjxwPjg6MDAgUE0gLSAwOjAwIEFNPC9wPjwvbGk+XG4gICAgICAgICAgICAgICAgICAgIDxsaT48cD4wMDowMCBQTSAtIDY6MDAgUE08L3A+PC9saT5cbiAgICAgICAgICAgICAgICA8L3VsPlxuICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgIDwvZGl2PlxuICAgIDwvbWFpbj5gXG5cbiAgICByZW5kZXIoYWJvdXRCbG9jaygpLCBwYWdlQ29udGVudCk7XG4gICBcbiAgICBsZXQgYmlnTWVudUJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNiaWdNZW51QnV0dG9uJyk7XG4gICAgYmlnTWVudUJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHtcbiAgICAgICAgbWVudVRhYigpO1xuICAgIH0pXG59XG5cbmV4cG9ydCBkZWZhdWx0IGNvbXBvbmVudDsiLCJpbXBvcnQgeyBodG1sLCByZW5kZXIgfSBmcm9tICdsaXQtaHRtbCc7XG5pbXBvcnQgUGl6emEgZnJvbSAnLi4vLi4vcmVzb3VyY2VzL21lbnVpdGVtcy9waXp6YS5qcGcnO1xuXG5mdW5jdGlvbiBjb21wb25lbnQoKSB7XG4gICAgY29uc3QgcGFnZUNvbnRlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY29udGVudCcpO1xuXG4gICAgY29uc3QgbWVudUJsb2NrID0gKCkgPT4gaHRtbGBcbiAgICA8bWFpbj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1lbnUtaW5mb1wiPlxuICAgICAgICAgICAgPGgyPk1lbnUgSXRlbXM6PC9oMj5cbiAgICAgICAgICAgIDxkaXYgaWQ9XCJtZW51LWl0ZW0tY29udGFpbmVyXCI+XG4gICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1lbnUtaXRlbVwiPlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaXRlbS1pbWFnZVwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9XCIke1BpenphfVwiIGFsdD1cIkZvb2RcIiAvPlxuICAgICAgICAgICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz1cIml0ZW0tZGVzY3JpcHRpb25cIj5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxoMz5QaXp6YSBOYXR1cmFsPC9oMz5cbiAgICAgICAgICAgICAgICAgICAgICAgIDxwPk1tbSB5dW1teTwvcD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG5cbiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwibWVudS1pdGVtXCI+XG4gICAgICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJpdGVtLWltYWdlXCI+XG4gICAgICAgICAgICAgICAgICAgICAgICA8aW1nIHNyYz1cIiR7UGl6emF9XCIgYWx0PVwiRm9vZFwiIC8+XG4gICAgICAgICAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPVwiaXRlbS1kZXNjcmlwdGlvblwiPlxuICAgICAgICAgICAgICAgICAgICAgICAgPHA+VEhJUyBGT09EIElTIFRBU1RZITwvcD5cbiAgICAgICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICAgICAgPC9kaXY+XG4gICAgICAgICAgICA8L2Rpdj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9tYWluPlxuICAgIGBcblxuICAgIHJlbmRlcihtZW51QmxvY2soKSwgcGFnZUNvbnRlbnQpO1xufVxuXG5leHBvcnQgZGVmYXVsdCBjb21wb25lbnQ7IiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIExMQ1xuICogU1BEWC1MaWNlbnNlLUlkZW50aWZpZXI6IEJTRC0zLUNsYXVzZVxuICovXG52YXIgX2EsIF9iLCBfYywgX2Q7XG5jb25zdCBERVZfTU9ERSA9IHRydWU7XG5jb25zdCBFTkFCTEVfRVhUUkFfU0VDVVJJVFlfSE9PS1MgPSB0cnVlO1xuY29uc3QgRU5BQkxFX1NIQURZRE9NX05PUEFUQ0ggPSB0cnVlO1xuY29uc3QgTk9ERV9NT0RFID0gZmFsc2U7XG4vLyBVc2Ugd2luZG93IGZvciBicm93c2VyIGJ1aWxkcyBiZWNhdXNlIElFMTEgZG9lc24ndCBoYXZlIGdsb2JhbFRoaXMuXG5jb25zdCBnbG9iYWwgPSBOT0RFX01PREUgPyBnbG9iYWxUaGlzIDogd2luZG93O1xuLyoqXG4gKiBVc2VmdWwgZm9yIHZpc3VhbGl6aW5nIGFuZCBsb2dnaW5nIGluc2lnaHRzIGludG8gd2hhdCB0aGUgTGl0IHRlbXBsYXRlIHN5c3RlbSBpcyBkb2luZy5cbiAqXG4gKiBDb21waWxlZCBvdXQgb2YgcHJvZCBtb2RlIGJ1aWxkcy5cbiAqL1xuY29uc3QgZGVidWdMb2dFdmVudCA9IERFVl9NT0RFXG4gICAgPyAoZXZlbnQpID0+IHtcbiAgICAgICAgY29uc3Qgc2hvdWxkRW1pdCA9IGdsb2JhbFxuICAgICAgICAgICAgLmVtaXRMaXREZWJ1Z0xvZ0V2ZW50cztcbiAgICAgICAgaWYgKCFzaG91bGRFbWl0KSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgZ2xvYmFsLmRpc3BhdGNoRXZlbnQobmV3IEN1c3RvbUV2ZW50KCdsaXQtZGVidWcnLCB7XG4gICAgICAgICAgICBkZXRhaWw6IGV2ZW50LFxuICAgICAgICB9KSk7XG4gICAgfVxuICAgIDogdW5kZWZpbmVkO1xuLy8gVXNlZCBmb3IgY29ubmVjdGluZyBiZWdpblJlbmRlciBhbmQgZW5kUmVuZGVyIGV2ZW50cyB3aGVuIHRoZXJlIGFyZSBuZXN0ZWRcbi8vIHJlbmRlcnMgd2hlbiBlcnJvcnMgYXJlIHRocm93biBwcmV2ZW50aW5nIGFuIGVuZFJlbmRlciBldmVudCBmcm9tIGJlaW5nXG4vLyBjYWxsZWQuXG5sZXQgZGVidWdMb2dSZW5kZXJJZCA9IDA7XG5sZXQgaXNzdWVXYXJuaW5nO1xuaWYgKERFVl9NT0RFKSB7XG4gICAgKF9hID0gZ2xvYmFsLmxpdElzc3VlZFdhcm5pbmdzKSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAoZ2xvYmFsLmxpdElzc3VlZFdhcm5pbmdzID0gbmV3IFNldCgpKTtcbiAgICAvLyBJc3N1ZSBhIHdhcm5pbmcsIGlmIHdlIGhhdmVuJ3QgYWxyZWFkeS5cbiAgICBpc3N1ZVdhcm5pbmcgPSAoY29kZSwgd2FybmluZykgPT4ge1xuICAgICAgICB3YXJuaW5nICs9IGNvZGVcbiAgICAgICAgICAgID8gYCBTZWUgaHR0cHM6Ly9saXQuZGV2L21zZy8ke2NvZGV9IGZvciBtb3JlIGluZm9ybWF0aW9uLmBcbiAgICAgICAgICAgIDogJyc7XG4gICAgICAgIGlmICghZ2xvYmFsLmxpdElzc3VlZFdhcm5pbmdzLmhhcyh3YXJuaW5nKSkge1xuICAgICAgICAgICAgY29uc29sZS53YXJuKHdhcm5pbmcpO1xuICAgICAgICAgICAgZ2xvYmFsLmxpdElzc3VlZFdhcm5pbmdzLmFkZCh3YXJuaW5nKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgaXNzdWVXYXJuaW5nKCdkZXYtbW9kZScsIGBMaXQgaXMgaW4gZGV2IG1vZGUuIE5vdCByZWNvbW1lbmRlZCBmb3IgcHJvZHVjdGlvbiFgKTtcbn1cbmNvbnN0IHdyYXAgPSBFTkFCTEVfU0hBRFlET01fTk9QQVRDSCAmJlxuICAgICgoX2IgPSBnbG9iYWwuU2hhZHlET00pID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5pblVzZSkgJiZcbiAgICAoKF9jID0gZ2xvYmFsLlNoYWR5RE9NKSA9PT0gbnVsbCB8fCBfYyA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Mubm9QYXRjaCkgPT09IHRydWVcbiAgICA/IGdsb2JhbC5TaGFkeURPTS53cmFwXG4gICAgOiAobm9kZSkgPT4gbm9kZTtcbmNvbnN0IHRydXN0ZWRUeXBlcyA9IGdsb2JhbC50cnVzdGVkVHlwZXM7XG4vKipcbiAqIE91ciBUcnVzdGVkVHlwZVBvbGljeSBmb3IgSFRNTCB3aGljaCBpcyBkZWNsYXJlZCB1c2luZyB0aGUgaHRtbCB0ZW1wbGF0ZVxuICogdGFnIGZ1bmN0aW9uLlxuICpcbiAqIFRoYXQgSFRNTCBpcyBhIGRldmVsb3Blci1hdXRob3JlZCBjb25zdGFudCwgYW5kIGlzIHBhcnNlZCB3aXRoIGlubmVySFRNTFxuICogYmVmb3JlIGFueSB1bnRydXN0ZWQgZXhwcmVzc2lvbnMgaGF2ZSBiZWVuIG1peGVkIGluLiBUaGVyZWZvciBpdCBpc1xuICogY29uc2lkZXJlZCBzYWZlIGJ5IGNvbnN0cnVjdGlvbi5cbiAqL1xuY29uc3QgcG9saWN5ID0gdHJ1c3RlZFR5cGVzXG4gICAgPyB0cnVzdGVkVHlwZXMuY3JlYXRlUG9saWN5KCdsaXQtaHRtbCcsIHtcbiAgICAgICAgY3JlYXRlSFRNTDogKHMpID0+IHMsXG4gICAgfSlcbiAgICA6IHVuZGVmaW5lZDtcbmNvbnN0IGlkZW50aXR5RnVuY3Rpb24gPSAodmFsdWUpID0+IHZhbHVlO1xuY29uc3Qgbm9vcFNhbml0aXplciA9IChfbm9kZSwgX25hbWUsIF90eXBlKSA9PiBpZGVudGl0eUZ1bmN0aW9uO1xuLyoqIFNldHMgdGhlIGdsb2JhbCBzYW5pdGl6ZXIgZmFjdG9yeS4gKi9cbmNvbnN0IHNldFNhbml0aXplciA9IChuZXdTYW5pdGl6ZXIpID0+IHtcbiAgICBpZiAoIUVOQUJMRV9FWFRSQV9TRUNVUklUWV9IT09LUykge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIGlmIChzYW5pdGl6ZXJGYWN0b3J5SW50ZXJuYWwgIT09IG5vb3BTYW5pdGl6ZXIpIHtcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBBdHRlbXB0ZWQgdG8gb3ZlcndyaXRlIGV4aXN0aW5nIGxpdC1odG1sIHNlY3VyaXR5IHBvbGljeS5gICtcbiAgICAgICAgICAgIGAgc2V0U2FuaXRpemVET01WYWx1ZUZhY3Rvcnkgc2hvdWxkIGJlIGNhbGxlZCBhdCBtb3N0IG9uY2UuYCk7XG4gICAgfVxuICAgIHNhbml0aXplckZhY3RvcnlJbnRlcm5hbCA9IG5ld1Nhbml0aXplcjtcbn07XG4vKipcbiAqIE9ubHkgdXNlZCBpbiBpbnRlcm5hbCB0ZXN0cywgbm90IGEgcGFydCBvZiB0aGUgcHVibGljIEFQSS5cbiAqL1xuY29uc3QgX3Rlc3RPbmx5Q2xlYXJTYW5pdGl6ZXJGYWN0b3J5RG9Ob3RDYWxsT3JFbHNlID0gKCkgPT4ge1xuICAgIHNhbml0aXplckZhY3RvcnlJbnRlcm5hbCA9IG5vb3BTYW5pdGl6ZXI7XG59O1xuY29uc3QgY3JlYXRlU2FuaXRpemVyID0gKG5vZGUsIG5hbWUsIHR5cGUpID0+IHtcbiAgICByZXR1cm4gc2FuaXRpemVyRmFjdG9yeUludGVybmFsKG5vZGUsIG5hbWUsIHR5cGUpO1xufTtcbi8vIEFkZGVkIHRvIGFuIGF0dHJpYnV0ZSBuYW1lIHRvIG1hcmsgdGhlIGF0dHJpYnV0ZSBhcyBib3VuZCBzbyB3ZSBjYW4gZmluZFxuLy8gaXQgZWFzaWx5LlxuY29uc3QgYm91bmRBdHRyaWJ1dGVTdWZmaXggPSAnJGxpdCQnO1xuLy8gVGhpcyBtYXJrZXIgaXMgdXNlZCBpbiBtYW55IHN5bnRhY3RpYyBwb3NpdGlvbnMgaW4gSFRNTCwgc28gaXQgbXVzdCBiZVxuLy8gYSB2YWxpZCBlbGVtZW50IG5hbWUgYW5kIGF0dHJpYnV0ZSBuYW1lLiBXZSBkb24ndCBzdXBwb3J0IGR5bmFtaWMgbmFtZXMgKHlldClcbi8vIGJ1dCB0aGlzIGF0IGxlYXN0IGVuc3VyZXMgdGhhdCB0aGUgcGFyc2UgdHJlZSBpcyBjbG9zZXIgdG8gdGhlIHRlbXBsYXRlXG4vLyBpbnRlbnRpb24uXG5jb25zdCBtYXJrZXIgPSBgbGl0JCR7U3RyaW5nKE1hdGgucmFuZG9tKCkpLnNsaWNlKDkpfSRgO1xuLy8gU3RyaW5nIHVzZWQgdG8gdGVsbCBpZiBhIGNvbW1lbnQgaXMgYSBtYXJrZXIgY29tbWVudFxuY29uc3QgbWFya2VyTWF0Y2ggPSAnPycgKyBtYXJrZXI7XG4vLyBUZXh0IHVzZWQgdG8gaW5zZXJ0IGEgY29tbWVudCBtYXJrZXIgbm9kZS4gV2UgdXNlIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb25cbi8vIHN5bnRheCBiZWNhdXNlIGl0J3Mgc2xpZ2h0bHkgc21hbGxlciwgYnV0IHBhcnNlcyBhcyBhIGNvbW1lbnQgbm9kZS5cbmNvbnN0IG5vZGVNYXJrZXIgPSBgPCR7bWFya2VyTWF0Y2h9PmA7XG5jb25zdCBkID0gTk9ERV9NT0RFICYmIGdsb2JhbC5kb2N1bWVudCA9PT0gdW5kZWZpbmVkXG4gICAgPyB7XG4gICAgICAgIGNyZWF0ZVRyZWVXYWxrZXIoKSB7XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH0sXG4gICAgfVxuICAgIDogZG9jdW1lbnQ7XG4vLyBDcmVhdGVzIGEgZHluYW1pYyBtYXJrZXIuIFdlIG5ldmVyIGhhdmUgdG8gc2VhcmNoIGZvciB0aGVzZSBpbiB0aGUgRE9NLlxuY29uc3QgY3JlYXRlTWFya2VyID0gKHYgPSAnJykgPT4gZC5jcmVhdGVDb21tZW50KHYpO1xuY29uc3QgaXNQcmltaXRpdmUgPSAodmFsdWUpID0+IHZhbHVlID09PSBudWxsIHx8ICh0eXBlb2YgdmFsdWUgIT0gJ29iamVjdCcgJiYgdHlwZW9mIHZhbHVlICE9ICdmdW5jdGlvbicpO1xuY29uc3QgaXNBcnJheSA9IEFycmF5LmlzQXJyYXk7XG5jb25zdCBpc0l0ZXJhYmxlID0gKHZhbHVlKSA9PiBpc0FycmF5KHZhbHVlKSB8fFxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgdHlwZW9mICh2YWx1ZSA9PT0gbnVsbCB8fCB2YWx1ZSA9PT0gdm9pZCAwID8gdm9pZCAwIDogdmFsdWVbU3ltYm9sLml0ZXJhdG9yXSkgPT09ICdmdW5jdGlvbic7XG5jb25zdCBTUEFDRV9DSEFSID0gYFsgXFx0XFxuXFxmXFxyXWA7XG5jb25zdCBBVFRSX1ZBTFVFX0NIQVIgPSBgW14gXFx0XFxuXFxmXFxyXCInXFxgPD49XWA7XG5jb25zdCBOQU1FX0NIQVIgPSBgW15cXFxcc1wiJz49L11gO1xuLy8gVGhlc2UgcmVnZXhlcyByZXByZXNlbnQgdGhlIGZpdmUgcGFyc2luZyBzdGF0ZXMgdGhhdCB3ZSBjYXJlIGFib3V0IGluIHRoZVxuLy8gVGVtcGxhdGUncyBIVE1MIHNjYW5uZXIuIFRoZXkgbWF0Y2ggdGhlICplbmQqIG9mIHRoZSBzdGF0ZSB0aGV5J3JlIG5hbWVkXG4vLyBhZnRlci5cbi8vIERlcGVuZGluZyBvbiB0aGUgbWF0Y2gsIHdlIHRyYW5zaXRpb24gdG8gYSBuZXcgc3RhdGUuIElmIHRoZXJlJ3Mgbm8gbWF0Y2gsXG4vLyB3ZSBzdGF5IGluIHRoZSBzYW1lIHN0YXRlLlxuLy8gTm90ZSB0aGF0IHRoZSByZWdleGVzIGFyZSBzdGF0ZWZ1bC4gV2UgdXRpbGl6ZSBsYXN0SW5kZXggYW5kIHN5bmMgaXRcbi8vIGFjcm9zcyB0aGUgbXVsdGlwbGUgcmVnZXhlcyB1c2VkLiBJbiBhZGRpdGlvbiB0byB0aGUgZml2ZSByZWdleGVzIGJlbG93XG4vLyB3ZSBhbHNvIGR5bmFtaWNhbGx5IGNyZWF0ZSBhIHJlZ2V4IHRvIGZpbmQgdGhlIG1hdGNoaW5nIGVuZCB0YWdzIGZvciByYXdcbi8vIHRleHQgZWxlbWVudHMuXG4vKipcbiAqIEVuZCBvZiB0ZXh0IGlzOiBgPGAgZm9sbG93ZWQgYnk6XG4gKiAgIChjb21tZW50IHN0YXJ0KSBvciAodGFnKSBvciAoZHluYW1pYyB0YWcgYmluZGluZylcbiAqL1xuY29uc3QgdGV4dEVuZFJlZ2V4ID0gLzwoPzooIS0tfFxcL1teYS16QS1aXSl8KFxcLz9bYS16QS1aXVtePlxcc10qKXwoXFwvPyQpKS9nO1xuY29uc3QgQ09NTUVOVF9TVEFSVCA9IDE7XG5jb25zdCBUQUdfTkFNRSA9IDI7XG5jb25zdCBEWU5BTUlDX1RBR19OQU1FID0gMztcbmNvbnN0IGNvbW1lbnRFbmRSZWdleCA9IC8tLT4vZztcbi8qKlxuICogQ29tbWVudHMgbm90IHN0YXJ0ZWQgd2l0aCA8IS0tLCBsaWtlIDwveywgY2FuIGJlIGVuZGVkIGJ5IGEgc2luZ2xlIGA+YFxuICovXG5jb25zdCBjb21tZW50MkVuZFJlZ2V4ID0gLz4vZztcbi8qKlxuICogVGhlIHRhZ0VuZCByZWdleCBtYXRjaGVzIHRoZSBlbmQgb2YgdGhlIFwiaW5zaWRlIGFuIG9wZW5pbmdcIiB0YWcgc3ludGF4XG4gKiBwb3NpdGlvbi4gSXQgZWl0aGVyIG1hdGNoZXMgYSBgPmAsIGFuIGF0dHJpYnV0ZS1saWtlIHNlcXVlbmNlLCBvciB0aGUgZW5kXG4gKiBvZiB0aGUgc3RyaW5nIGFmdGVyIGEgc3BhY2UgKGF0dHJpYnV0ZS1uYW1lIHBvc2l0aW9uIGVuZGluZykuXG4gKlxuICogU2VlIGF0dHJpYnV0ZXMgaW4gdGhlIEhUTUwgc3BlYzpcbiAqIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9odG1sNS9zeW50YXguaHRtbCNlbGVtZW50cy1hdHRyaWJ1dGVzXG4gKlxuICogXCIgXFx0XFxuXFxmXFxyXCIgYXJlIEhUTUwgc3BhY2UgY2hhcmFjdGVyczpcbiAqIGh0dHBzOi8vaW5mcmEuc3BlYy53aGF0d2cub3JnLyNhc2NpaS13aGl0ZXNwYWNlXG4gKlxuICogU28gYW4gYXR0cmlidXRlIGlzOlxuICogICogVGhlIG5hbWU6IGFueSBjaGFyYWN0ZXIgZXhjZXB0IGEgd2hpdGVzcGFjZSBjaGFyYWN0ZXIsIChcIiksICgnKSwgXCI+XCIsXG4gKiAgICBcIj1cIiwgb3IgXCIvXCIuIE5vdGU6IHRoaXMgaXMgZGlmZmVyZW50IGZyb20gdGhlIEhUTUwgc3BlYyB3aGljaCBhbHNvIGV4Y2x1ZGVzIGNvbnRyb2wgY2hhcmFjdGVycy5cbiAqICAqIEZvbGxvd2VkIGJ5IHplcm8gb3IgbW9yZSBzcGFjZSBjaGFyYWN0ZXJzXG4gKiAgKiBGb2xsb3dlZCBieSBcIj1cIlxuICogICogRm9sbG93ZWQgYnkgemVybyBvciBtb3JlIHNwYWNlIGNoYXJhY3RlcnNcbiAqICAqIEZvbGxvd2VkIGJ5OlxuICogICAgKiBBbnkgY2hhcmFjdGVyIGV4Y2VwdCBzcGFjZSwgKCcpLCAoXCIpLCBcIjxcIiwgXCI+XCIsIFwiPVwiLCAoYCksIG9yXG4gKiAgICAqIChcIikgdGhlbiBhbnkgbm9uLShcIiksIG9yXG4gKiAgICAqICgnKSB0aGVuIGFueSBub24tKCcpXG4gKi9cbmNvbnN0IHRhZ0VuZFJlZ2V4ID0gbmV3IFJlZ0V4cChgPnwke1NQQUNFX0NIQVJ9KD86KCR7TkFNRV9DSEFSfSspKCR7U1BBQ0VfQ0hBUn0qPSR7U1BBQ0VfQ0hBUn0qKD86JHtBVFRSX1ZBTFVFX0NIQVJ9fChcInwnKXwpKXwkKWAsICdnJyk7XG5jb25zdCBFTlRJUkVfTUFUQ0ggPSAwO1xuY29uc3QgQVRUUklCVVRFX05BTUUgPSAxO1xuY29uc3QgU1BBQ0VTX0FORF9FUVVBTFMgPSAyO1xuY29uc3QgUVVPVEVfQ0hBUiA9IDM7XG5jb25zdCBzaW5nbGVRdW90ZUF0dHJFbmRSZWdleCA9IC8nL2c7XG5jb25zdCBkb3VibGVRdW90ZUF0dHJFbmRSZWdleCA9IC9cIi9nO1xuLyoqXG4gKiBNYXRjaGVzIHRoZSByYXcgdGV4dCBlbGVtZW50cy5cbiAqXG4gKiBDb21tZW50cyBhcmUgbm90IHBhcnNlZCB3aXRoaW4gcmF3IHRleHQgZWxlbWVudHMsIHNvIHdlIG5lZWQgdG8gc2VhcmNoIHRoZWlyXG4gKiB0ZXh0IGNvbnRlbnQgZm9yIG1hcmtlciBzdHJpbmdzLlxuICovXG5jb25zdCByYXdUZXh0RWxlbWVudCA9IC9eKD86c2NyaXB0fHN0eWxlfHRleHRhcmVhfHRpdGxlKSQvaTtcbi8qKiBUZW1wbGF0ZVJlc3VsdCB0eXBlcyAqL1xuY29uc3QgSFRNTF9SRVNVTFQgPSAxO1xuY29uc3QgU1ZHX1JFU1VMVCA9IDI7XG4vLyBUZW1wbGF0ZVBhcnQgdHlwZXNcbi8vIElNUE9SVEFOVDogdGhlc2UgbXVzdCBtYXRjaCB0aGUgdmFsdWVzIGluIFBhcnRUeXBlXG5jb25zdCBBVFRSSUJVVEVfUEFSVCA9IDE7XG5jb25zdCBDSElMRF9QQVJUID0gMjtcbmNvbnN0IFBST1BFUlRZX1BBUlQgPSAzO1xuY29uc3QgQk9PTEVBTl9BVFRSSUJVVEVfUEFSVCA9IDQ7XG5jb25zdCBFVkVOVF9QQVJUID0gNTtcbmNvbnN0IEVMRU1FTlRfUEFSVCA9IDY7XG5jb25zdCBDT01NRU5UX1BBUlQgPSA3O1xuLyoqXG4gKiBHZW5lcmF0ZXMgYSB0ZW1wbGF0ZSBsaXRlcmFsIHRhZyBmdW5jdGlvbiB0aGF0IHJldHVybnMgYSBUZW1wbGF0ZVJlc3VsdCB3aXRoXG4gKiB0aGUgZ2l2ZW4gcmVzdWx0IHR5cGUuXG4gKi9cbmNvbnN0IHRhZyA9ICh0eXBlKSA9PiAoc3RyaW5ncywgLi4udmFsdWVzKSA9PiB7XG4gICAgLy8gV2FybiBhZ2FpbnN0IHRlbXBsYXRlcyBvY3RhbCBlc2NhcGUgc2VxdWVuY2VzXG4gICAgLy8gV2UgZG8gdGhpcyBoZXJlIHJhdGhlciB0aGFuIGluIHJlbmRlciBzbyB0aGF0IHRoZSB3YXJuaW5nIGlzIGNsb3NlciB0byB0aGVcbiAgICAvLyB0ZW1wbGF0ZSBkZWZpbml0aW9uLlxuICAgIGlmIChERVZfTU9ERSAmJiBzdHJpbmdzLnNvbWUoKHMpID0+IHMgPT09IHVuZGVmaW5lZCkpIHtcbiAgICAgICAgY29uc29sZS53YXJuKCdTb21lIHRlbXBsYXRlIHN0cmluZ3MgYXJlIHVuZGVmaW5lZC5cXG4nICtcbiAgICAgICAgICAgICdUaGlzIGlzIHByb2JhYmx5IGNhdXNlZCBieSBpbGxlZ2FsIG9jdGFsIGVzY2FwZSBzZXF1ZW5jZXMuJyk7XG4gICAgfVxuICAgIHJldHVybiB7XG4gICAgICAgIC8vIFRoaXMgcHJvcGVydHkgbmVlZHMgdG8gcmVtYWluIHVubWluaWZpZWQuXG4gICAgICAgIFsnXyRsaXRUeXBlJCddOiB0eXBlLFxuICAgICAgICBzdHJpbmdzLFxuICAgICAgICB2YWx1ZXMsXG4gICAgfTtcbn07XG4vKipcbiAqIEludGVycHJldHMgYSB0ZW1wbGF0ZSBsaXRlcmFsIGFzIGFuIEhUTUwgdGVtcGxhdGUgdGhhdCBjYW4gZWZmaWNpZW50bHlcbiAqIHJlbmRlciB0byBhbmQgdXBkYXRlIGEgY29udGFpbmVyLlxuICpcbiAqIGBgYHRzXG4gKiBjb25zdCBoZWFkZXIgPSAodGl0bGU6IHN0cmluZykgPT4gaHRtbGA8aDE+JHt0aXRsZX08L2gxPmA7XG4gKiBgYGBcbiAqXG4gKiBUaGUgYGh0bWxgIHRhZyByZXR1cm5zIGEgZGVzY3JpcHRpb24gb2YgdGhlIERPTSB0byByZW5kZXIgYXMgYSB2YWx1ZS4gSXQgaXNcbiAqIGxhenksIG1lYW5pbmcgbm8gd29yayBpcyBkb25lIHVudGlsIHRoZSB0ZW1wbGF0ZSBpcyByZW5kZXJlZC4gV2hlbiByZW5kZXJpbmcsXG4gKiBpZiBhIHRlbXBsYXRlIGNvbWVzIGZyb20gdGhlIHNhbWUgZXhwcmVzc2lvbiBhcyBhIHByZXZpb3VzbHkgcmVuZGVyZWQgcmVzdWx0LFxuICogaXQncyBlZmZpY2llbnRseSB1cGRhdGVkIGluc3RlYWQgb2YgcmVwbGFjZWQuXG4gKi9cbmV4cG9ydCBjb25zdCBodG1sID0gdGFnKEhUTUxfUkVTVUxUKTtcbi8qKlxuICogSW50ZXJwcmV0cyBhIHRlbXBsYXRlIGxpdGVyYWwgYXMgYW4gU1ZHIGZyYWdtZW50IHRoYXQgY2FuIGVmZmljaWVudGx5XG4gKiByZW5kZXIgdG8gYW5kIHVwZGF0ZSBhIGNvbnRhaW5lci5cbiAqXG4gKiBgYGB0c1xuICogY29uc3QgcmVjdCA9IHN2Z2A8cmVjdCB3aWR0aD1cIjEwXCIgaGVpZ2h0PVwiMTBcIj48L3JlY3Q+YDtcbiAqXG4gKiBjb25zdCBteUltYWdlID0gaHRtbGBcbiAqICAgPHN2ZyB2aWV3Qm94PVwiMCAwIDEwIDEwXCIgeG1sbnM9XCJodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2Z1wiPlxuICogICAgICR7cmVjdH1cbiAqICAgPC9zdmc+YDtcbiAqIGBgYFxuICpcbiAqIFRoZSBgc3ZnYCAqdGFnIGZ1bmN0aW9uKiBzaG91bGQgb25seSBiZSB1c2VkIGZvciBTVkcgZnJhZ21lbnRzLCBvciBlbGVtZW50c1xuICogdGhhdCB3b3VsZCBiZSBjb250YWluZWQgKippbnNpZGUqKiBhbiBgPHN2Zz5gIEhUTUwgZWxlbWVudC4gQSBjb21tb24gZXJyb3IgaXNcbiAqIHBsYWNpbmcgYW4gYDxzdmc+YCAqZWxlbWVudCogaW4gYSB0ZW1wbGF0ZSB0YWdnZWQgd2l0aCB0aGUgYHN2Z2AgdGFnXG4gKiBmdW5jdGlvbi4gVGhlIGA8c3ZnPmAgZWxlbWVudCBpcyBhbiBIVE1MIGVsZW1lbnQgYW5kIHNob3VsZCBiZSB1c2VkIHdpdGhpbiBhXG4gKiB0ZW1wbGF0ZSB0YWdnZWQgd2l0aCB0aGUge0BsaW5rY29kZSBodG1sfSB0YWcgZnVuY3Rpb24uXG4gKlxuICogSW4gTGl0RWxlbWVudCB1c2FnZSwgaXQncyBpbnZhbGlkIHRvIHJldHVybiBhbiBTVkcgZnJhZ21lbnQgZnJvbSB0aGVcbiAqIGByZW5kZXIoKWAgbWV0aG9kLCBhcyB0aGUgU1ZHIGZyYWdtZW50IHdpbGwgYmUgY29udGFpbmVkIHdpdGhpbiB0aGUgZWxlbWVudCdzXG4gKiBzaGFkb3cgcm9vdCBhbmQgdGh1cyBjYW5ub3QgYmUgdXNlZCB3aXRoaW4gYW4gYDxzdmc+YCBIVE1MIGVsZW1lbnQuXG4gKi9cbmV4cG9ydCBjb25zdCBzdmcgPSB0YWcoU1ZHX1JFU1VMVCk7XG4vKipcbiAqIEEgc2VudGluZWwgdmFsdWUgdGhhdCBzaWduYWxzIHRoYXQgYSB2YWx1ZSB3YXMgaGFuZGxlZCBieSBhIGRpcmVjdGl2ZSBhbmRcbiAqIHNob3VsZCBub3QgYmUgd3JpdHRlbiB0byB0aGUgRE9NLlxuICovXG5leHBvcnQgY29uc3Qgbm9DaGFuZ2UgPSBTeW1ib2wuZm9yKCdsaXQtbm9DaGFuZ2UnKTtcbi8qKlxuICogQSBzZW50aW5lbCB2YWx1ZSB0aGF0IHNpZ25hbHMgYSBDaGlsZFBhcnQgdG8gZnVsbHkgY2xlYXIgaXRzIGNvbnRlbnQuXG4gKlxuICogYGBgdHNcbiAqIGNvbnN0IGJ1dHRvbiA9IGh0bWxgJHtcbiAqICB1c2VyLmlzQWRtaW5cbiAqICAgID8gaHRtbGA8YnV0dG9uPkRFTEVURTwvYnV0dG9uPmBcbiAqICAgIDogbm90aGluZ1xuICogfWA7XG4gKiBgYGBcbiAqXG4gKiBQcmVmZXIgdXNpbmcgYG5vdGhpbmdgIG92ZXIgb3RoZXIgZmFsc3kgdmFsdWVzIGFzIGl0IHByb3ZpZGVzIGEgY29uc2lzdGVudFxuICogYmVoYXZpb3IgYmV0d2VlbiB2YXJpb3VzIGV4cHJlc3Npb24gYmluZGluZyBjb250ZXh0cy5cbiAqXG4gKiBJbiBjaGlsZCBleHByZXNzaW9ucywgYHVuZGVmaW5lZGAsIGBudWxsYCwgYCcnYCwgYW5kIGBub3RoaW5nYCBhbGwgYmVoYXZlIHRoZVxuICogc2FtZSBhbmQgcmVuZGVyIG5vIG5vZGVzLiBJbiBhdHRyaWJ1dGUgZXhwcmVzc2lvbnMsIGBub3RoaW5nYCBfcmVtb3Zlc18gdGhlXG4gKiBhdHRyaWJ1dGUsIHdoaWxlIGB1bmRlZmluZWRgIGFuZCBgbnVsbGAgd2lsbCByZW5kZXIgYW4gZW1wdHkgc3RyaW5nLiBJblxuICogcHJvcGVydHkgZXhwcmVzc2lvbnMgYG5vdGhpbmdgIGJlY29tZXMgYHVuZGVmaW5lZGAuXG4gKi9cbmV4cG9ydCBjb25zdCBub3RoaW5nID0gU3ltYm9sLmZvcignbGl0LW5vdGhpbmcnKTtcbi8qKlxuICogVGhlIGNhY2hlIG9mIHByZXBhcmVkIHRlbXBsYXRlcywga2V5ZWQgYnkgdGhlIHRhZ2dlZCBUZW1wbGF0ZVN0cmluZ3NBcnJheVxuICogYW5kIF9ub3RfIGFjY291bnRpbmcgZm9yIHRoZSBzcGVjaWZpYyB0ZW1wbGF0ZSB0YWcgdXNlZC4gVGhpcyBtZWFucyB0aGF0XG4gKiB0ZW1wbGF0ZSB0YWdzIGNhbm5vdCBiZSBkeW5hbWljIC0gdGhlIG11c3Qgc3RhdGljYWxseSBiZSBvbmUgb2YgaHRtbCwgc3ZnLFxuICogb3IgYXR0ci4gVGhpcyByZXN0cmljdGlvbiBzaW1wbGlmaWVzIHRoZSBjYWNoZSBsb29rdXAsIHdoaWNoIGlzIG9uIHRoZSBob3RcbiAqIHBhdGggZm9yIHJlbmRlcmluZy5cbiAqL1xuY29uc3QgdGVtcGxhdGVDYWNoZSA9IG5ldyBXZWFrTWFwKCk7XG5jb25zdCB3YWxrZXIgPSBkLmNyZWF0ZVRyZWVXYWxrZXIoZCwgMTI5IC8qIE5vZGVGaWx0ZXIuU0hPV197RUxFTUVOVHxDT01NRU5UfSAqLywgbnVsbCwgZmFsc2UpO1xubGV0IHNhbml0aXplckZhY3RvcnlJbnRlcm5hbCA9IG5vb3BTYW5pdGl6ZXI7XG4vKipcbiAqIFJldHVybnMgYW4gSFRNTCBzdHJpbmcgZm9yIHRoZSBnaXZlbiBUZW1wbGF0ZVN0cmluZ3NBcnJheSBhbmQgcmVzdWx0IHR5cGVcbiAqIChIVE1MIG9yIFNWRyksIGFsb25nIHdpdGggdGhlIGNhc2Utc2Vuc2l0aXZlIGJvdW5kIGF0dHJpYnV0ZSBuYW1lcyBpblxuICogdGVtcGxhdGUgb3JkZXIuIFRoZSBIVE1MIGNvbnRhaW5zIGNvbW1lbnQgbWFya2VycyBkZW5vdGluZyB0aGUgYENoaWxkUGFydGBzXG4gKiBhbmQgc3VmZml4ZXMgb24gYm91bmQgYXR0cmlidXRlcyBkZW5vdGluZyB0aGUgYEF0dHJpYnV0ZVBhcnRzYC5cbiAqXG4gKiBAcGFyYW0gc3RyaW5ncyB0ZW1wbGF0ZSBzdHJpbmdzIGFycmF5XG4gKiBAcGFyYW0gdHlwZSBIVE1MIG9yIFNWR1xuICogQHJldHVybiBBcnJheSBjb250YWluaW5nIGBbaHRtbCwgYXR0ck5hbWVzXWAgKGFycmF5IHJldHVybmVkIGZvciB0ZXJzZW5lc3MsXG4gKiAgICAgdG8gYXZvaWQgb2JqZWN0IGZpZWxkcyBzaW5jZSB0aGlzIGNvZGUgaXMgc2hhcmVkIHdpdGggbm9uLW1pbmlmaWVkIFNTUlxuICogICAgIGNvZGUpXG4gKi9cbmNvbnN0IGdldFRlbXBsYXRlSHRtbCA9IChzdHJpbmdzLCB0eXBlKSA9PiB7XG4gICAgLy8gSW5zZXJ0IG1ha2VycyBpbnRvIHRoZSB0ZW1wbGF0ZSBIVE1MIHRvIHJlcHJlc2VudCB0aGUgcG9zaXRpb24gb2ZcbiAgICAvLyBiaW5kaW5ncy4gVGhlIGZvbGxvd2luZyBjb2RlIHNjYW5zIHRoZSB0ZW1wbGF0ZSBzdHJpbmdzIHRvIGRldGVybWluZSB0aGVcbiAgICAvLyBzeW50YWN0aWMgcG9zaXRpb24gb2YgdGhlIGJpbmRpbmdzLiBUaGV5IGNhbiBiZSBpbiB0ZXh0IHBvc2l0aW9uLCB3aGVyZVxuICAgIC8vIHdlIGluc2VydCBhbiBIVE1MIGNvbW1lbnQsIGF0dHJpYnV0ZSB2YWx1ZSBwb3NpdGlvbiwgd2hlcmUgd2UgaW5zZXJ0IGFcbiAgICAvLyBzZW50aW5lbCBzdHJpbmcgYW5kIHJlLXdyaXRlIHRoZSBhdHRyaWJ1dGUgbmFtZSwgb3IgaW5zaWRlIGEgdGFnIHdoZXJlXG4gICAgLy8gd2UgaW5zZXJ0IHRoZSBzZW50aW5lbCBzdHJpbmcuXG4gICAgY29uc3QgbCA9IHN0cmluZ3MubGVuZ3RoIC0gMTtcbiAgICAvLyBTdG9yZXMgdGhlIGNhc2Utc2Vuc2l0aXZlIGJvdW5kIGF0dHJpYnV0ZSBuYW1lcyBpbiB0aGUgb3JkZXIgb2YgdGhlaXJcbiAgICAvLyBwYXJ0cy4gRWxlbWVudFBhcnRzIGFyZSBhbHNvIHJlZmxlY3RlZCBpbiB0aGlzIGFycmF5IGFzIHVuZGVmaW5lZFxuICAgIC8vIHJhdGhlciB0aGFuIGEgc3RyaW5nLCB0byBkaXNhbWJpZ3VhdGUgZnJvbSBhdHRyaWJ1dGUgYmluZGluZ3MuXG4gICAgY29uc3QgYXR0ck5hbWVzID0gW107XG4gICAgbGV0IGh0bWwgPSB0eXBlID09PSBTVkdfUkVTVUxUID8gJzxzdmc+JyA6ICcnO1xuICAgIC8vIFdoZW4gd2UncmUgaW5zaWRlIGEgcmF3IHRleHQgdGFnIChub3QgaXQncyB0ZXh0IGNvbnRlbnQpLCB0aGUgcmVnZXhcbiAgICAvLyB3aWxsIHN0aWxsIGJlIHRhZ1JlZ2V4IHNvIHdlIGNhbiBmaW5kIGF0dHJpYnV0ZXMsIGJ1dCB3aWxsIHN3aXRjaCB0b1xuICAgIC8vIHRoaXMgcmVnZXggd2hlbiB0aGUgdGFnIGVuZHMuXG4gICAgbGV0IHJhd1RleHRFbmRSZWdleDtcbiAgICAvLyBUaGUgY3VycmVudCBwYXJzaW5nIHN0YXRlLCByZXByZXNlbnRlZCBhcyBhIHJlZmVyZW5jZSB0byBvbmUgb2YgdGhlXG4gICAgLy8gcmVnZXhlc1xuICAgIGxldCByZWdleCA9IHRleHRFbmRSZWdleDtcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGw7IGkrKykge1xuICAgICAgICBjb25zdCBzID0gc3RyaW5nc1tpXTtcbiAgICAgICAgLy8gVGhlIGluZGV4IG9mIHRoZSBlbmQgb2YgdGhlIGxhc3QgYXR0cmlidXRlIG5hbWUuIFdoZW4gdGhpcyBpc1xuICAgICAgICAvLyBwb3NpdGl2ZSBhdCBlbmQgb2YgYSBzdHJpbmcsIGl0IG1lYW5zIHdlJ3JlIGluIGFuIGF0dHJpYnV0ZSB2YWx1ZVxuICAgICAgICAvLyBwb3NpdGlvbiBhbmQgbmVlZCB0byByZXdyaXRlIHRoZSBhdHRyaWJ1dGUgbmFtZS5cbiAgICAgICAgLy8gV2UgYWxzbyB1c2UgYSBzcGVjaWFsIHZhbHVlIG9mIC0yIHRvIGluZGljYXRlIHRoYXQgd2UgZW5jb3VudGVyZWRcbiAgICAgICAgLy8gdGhlIGVuZCBvZiBhIHN0cmluZyBpbiBhdHRyaWJ1dGUgbmFtZSBwb3NpdGlvbi5cbiAgICAgICAgbGV0IGF0dHJOYW1lRW5kSW5kZXggPSAtMTtcbiAgICAgICAgbGV0IGF0dHJOYW1lO1xuICAgICAgICBsZXQgbGFzdEluZGV4ID0gMDtcbiAgICAgICAgbGV0IG1hdGNoO1xuICAgICAgICAvLyBUaGUgY29uZGl0aW9ucyBpbiB0aGlzIGxvb3AgaGFuZGxlIHRoZSBjdXJyZW50IHBhcnNlIHN0YXRlLCBhbmQgdGhlXG4gICAgICAgIC8vIGFzc2lnbm1lbnRzIHRvIHRoZSBgcmVnZXhgIHZhcmlhYmxlIGFyZSB0aGUgc3RhdGUgdHJhbnNpdGlvbnMuXG4gICAgICAgIHdoaWxlIChsYXN0SW5kZXggPCBzLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gTWFrZSBzdXJlIHdlIHN0YXJ0IHNlYXJjaGluZyBmcm9tIHdoZXJlIHdlIHByZXZpb3VzbHkgbGVmdCBvZmZcbiAgICAgICAgICAgIHJlZ2V4Lmxhc3RJbmRleCA9IGxhc3RJbmRleDtcbiAgICAgICAgICAgIG1hdGNoID0gcmVnZXguZXhlYyhzKTtcbiAgICAgICAgICAgIGlmIChtYXRjaCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgbGFzdEluZGV4ID0gcmVnZXgubGFzdEluZGV4O1xuICAgICAgICAgICAgaWYgKHJlZ2V4ID09PSB0ZXh0RW5kUmVnZXgpIHtcbiAgICAgICAgICAgICAgICBpZiAobWF0Y2hbQ09NTUVOVF9TVEFSVF0gPT09ICchLS0nKSB7XG4gICAgICAgICAgICAgICAgICAgIHJlZ2V4ID0gY29tbWVudEVuZFJlZ2V4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChtYXRjaFtDT01NRU5UX1NUQVJUXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIHN0YXJ0ZWQgYSB3ZWlyZCBjb21tZW50LCBsaWtlIDwve1xuICAgICAgICAgICAgICAgICAgICByZWdleCA9IGNvbW1lbnQyRW5kUmVnZXg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG1hdGNoW1RBR19OQU1FXSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChyYXdUZXh0RWxlbWVudC50ZXN0KG1hdGNoW1RBR19OQU1FXSkpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFJlY29yZCBpZiB3ZSBlbmNvdW50ZXIgYSByYXctdGV4dCBlbGVtZW50LiBXZSdsbCBzd2l0Y2ggdG9cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIHRoaXMgcmVnZXggYXQgdGhlIGVuZCBvZiB0aGUgdGFnLlxuICAgICAgICAgICAgICAgICAgICAgICAgcmF3VGV4dEVuZFJlZ2V4ID0gbmV3IFJlZ0V4cChgPC8ke21hdGNoW1RBR19OQU1FXX1gLCAnZycpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHJlZ2V4ID0gdGFnRW5kUmVnZXg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKG1hdGNoW0RZTkFNSUNfVEFHX05BTUVdICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKERFVl9NT0RFKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0JpbmRpbmdzIGluIHRhZyBuYW1lcyBhcmUgbm90IHN1cHBvcnRlZC4gUGxlYXNlIHVzZSBzdGF0aWMgdGVtcGxhdGVzIGluc3RlYWQuICcgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICdTZWUgaHR0cHM6Ly9saXQuZGV2L2RvY3MvdGVtcGxhdGVzL2V4cHJlc3Npb25zLyNzdGF0aWMtZXhwcmVzc2lvbnMnKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICByZWdleCA9IHRhZ0VuZFJlZ2V4O1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHJlZ2V4ID09PSB0YWdFbmRSZWdleCkge1xuICAgICAgICAgICAgICAgIGlmIChtYXRjaFtFTlRJUkVfTUFUQ0hdID09PSAnPicpIHtcbiAgICAgICAgICAgICAgICAgICAgLy8gRW5kIG9mIGEgdGFnLiBJZiB3ZSBoYWQgc3RhcnRlZCBhIHJhdy10ZXh0IGVsZW1lbnQsIHVzZSB0aGF0XG4gICAgICAgICAgICAgICAgICAgIC8vIHJlZ2V4XG4gICAgICAgICAgICAgICAgICAgIHJlZ2V4ID0gcmF3VGV4dEVuZFJlZ2V4ICE9PSBudWxsICYmIHJhd1RleHRFbmRSZWdleCAhPT0gdm9pZCAwID8gcmF3VGV4dEVuZFJlZ2V4IDogdGV4dEVuZFJlZ2V4O1xuICAgICAgICAgICAgICAgICAgICAvLyBXZSBtYXkgYmUgZW5kaW5nIGFuIHVucXVvdGVkIGF0dHJpYnV0ZSB2YWx1ZSwgc28gbWFrZSBzdXJlIHdlXG4gICAgICAgICAgICAgICAgICAgIC8vIGNsZWFyIGFueSBwZW5kaW5nIGF0dHJOYW1lRW5kSW5kZXhcbiAgICAgICAgICAgICAgICAgICAgYXR0ck5hbWVFbmRJbmRleCA9IC0xO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIGlmIChtYXRjaFtBVFRSSUJVVEVfTkFNRV0gPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICAvLyBBdHRyaWJ1dGUgbmFtZSBwb3NpdGlvblxuICAgICAgICAgICAgICAgICAgICBhdHRyTmFtZUVuZEluZGV4ID0gLTI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBhdHRyTmFtZUVuZEluZGV4ID0gcmVnZXgubGFzdEluZGV4IC0gbWF0Y2hbU1BBQ0VTX0FORF9FUVVBTFNdLmxlbmd0aDtcbiAgICAgICAgICAgICAgICAgICAgYXR0ck5hbWUgPSBtYXRjaFtBVFRSSUJVVEVfTkFNRV07XG4gICAgICAgICAgICAgICAgICAgIHJlZ2V4ID1cbiAgICAgICAgICAgICAgICAgICAgICAgIG1hdGNoW1FVT1RFX0NIQVJdID09PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IHRhZ0VuZFJlZ2V4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBtYXRjaFtRVU9URV9DSEFSXSA9PT0gJ1wiJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA/IGRvdWJsZVF1b3RlQXR0ckVuZFJlZ2V4XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogc2luZ2xlUXVvdGVBdHRyRW5kUmVnZXg7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAocmVnZXggPT09IGRvdWJsZVF1b3RlQXR0ckVuZFJlZ2V4IHx8XG4gICAgICAgICAgICAgICAgcmVnZXggPT09IHNpbmdsZVF1b3RlQXR0ckVuZFJlZ2V4KSB7XG4gICAgICAgICAgICAgICAgcmVnZXggPSB0YWdFbmRSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHJlZ2V4ID09PSBjb21tZW50RW5kUmVnZXggfHwgcmVnZXggPT09IGNvbW1lbnQyRW5kUmVnZXgpIHtcbiAgICAgICAgICAgICAgICByZWdleCA9IHRleHRFbmRSZWdleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIE5vdCBvbmUgb2YgdGhlIGZpdmUgc3RhdGUgcmVnZXhlcywgc28gaXQgbXVzdCBiZSB0aGUgZHluYW1pY2FsbHlcbiAgICAgICAgICAgICAgICAvLyBjcmVhdGVkIHJhdyB0ZXh0IHJlZ2V4IGFuZCB3ZSdyZSBhdCB0aGUgY2xvc2Ugb2YgdGhhdCBlbGVtZW50LlxuICAgICAgICAgICAgICAgIHJlZ2V4ID0gdGFnRW5kUmVnZXg7XG4gICAgICAgICAgICAgICAgcmF3VGV4dEVuZFJlZ2V4ID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChERVZfTU9ERSkge1xuICAgICAgICAgICAgLy8gSWYgd2UgaGF2ZSBhIGF0dHJOYW1lRW5kSW5kZXgsIHdoaWNoIGluZGljYXRlcyB0aGF0IHdlIHNob3VsZFxuICAgICAgICAgICAgLy8gcmV3cml0ZSB0aGUgYXR0cmlidXRlIG5hbWUsIGFzc2VydCB0aGF0IHdlJ3JlIGluIGEgdmFsaWQgYXR0cmlidXRlXG4gICAgICAgICAgICAvLyBwb3NpdGlvbiAtIGVpdGhlciBpbiBhIHRhZywgb3IgYSBxdW90ZWQgYXR0cmlidXRlIHZhbHVlLlxuICAgICAgICAgICAgY29uc29sZS5hc3NlcnQoYXR0ck5hbWVFbmRJbmRleCA9PT0gLTEgfHxcbiAgICAgICAgICAgICAgICByZWdleCA9PT0gdGFnRW5kUmVnZXggfHxcbiAgICAgICAgICAgICAgICByZWdleCA9PT0gc2luZ2xlUXVvdGVBdHRyRW5kUmVnZXggfHxcbiAgICAgICAgICAgICAgICByZWdleCA9PT0gZG91YmxlUXVvdGVBdHRyRW5kUmVnZXgsICd1bmV4cGVjdGVkIHBhcnNlIHN0YXRlIEInKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBXZSBoYXZlIGZvdXIgY2FzZXM6XG4gICAgICAgIC8vICAxLiBXZSdyZSBpbiB0ZXh0IHBvc2l0aW9uLCBhbmQgbm90IGluIGEgcmF3IHRleHQgZWxlbWVudFxuICAgICAgICAvLyAgICAgKHJlZ2V4ID09PSB0ZXh0RW5kUmVnZXgpOiBpbnNlcnQgYSBjb21tZW50IG1hcmtlci5cbiAgICAgICAgLy8gIDIuIFdlIGhhdmUgYSBub24tbmVnYXRpdmUgYXR0ck5hbWVFbmRJbmRleCB3aGljaCBtZWFucyB3ZSBuZWVkIHRvXG4gICAgICAgIC8vICAgICByZXdyaXRlIHRoZSBhdHRyaWJ1dGUgbmFtZSB0byBhZGQgYSBib3VuZCBhdHRyaWJ1dGUgc3VmZml4LlxuICAgICAgICAvLyAgMy4gV2UncmUgYXQgdGhlIG5vbi1maXJzdCBiaW5kaW5nIGluIGEgbXVsdGktYmluZGluZyBhdHRyaWJ1dGUsIHVzZSBhXG4gICAgICAgIC8vICAgICBwbGFpbiBtYXJrZXIuXG4gICAgICAgIC8vICA0LiBXZSdyZSBzb21ld2hlcmUgZWxzZSBpbnNpZGUgdGhlIHRhZy4gSWYgd2UncmUgaW4gYXR0cmlidXRlIG5hbWVcbiAgICAgICAgLy8gICAgIHBvc2l0aW9uIChhdHRyTmFtZUVuZEluZGV4ID09PSAtMiksIGFkZCBhIHNlcXVlbnRpYWwgc3VmZml4IHRvXG4gICAgICAgIC8vICAgICBnZW5lcmF0ZSBhIHVuaXF1ZSBhdHRyaWJ1dGUgbmFtZS5cbiAgICAgICAgLy8gRGV0ZWN0IGEgYmluZGluZyBuZXh0IHRvIHNlbGYtY2xvc2luZyB0YWcgZW5kIGFuZCBpbnNlcnQgYSBzcGFjZSB0b1xuICAgICAgICAvLyBzZXBhcmF0ZSB0aGUgbWFya2VyIGZyb20gdGhlIHRhZyBlbmQ6XG4gICAgICAgIGNvbnN0IGVuZCA9IHJlZ2V4ID09PSB0YWdFbmRSZWdleCAmJiBzdHJpbmdzW2kgKyAxXS5zdGFydHNXaXRoKCcvPicpID8gJyAnIDogJyc7XG4gICAgICAgIGh0bWwgKz1cbiAgICAgICAgICAgIHJlZ2V4ID09PSB0ZXh0RW5kUmVnZXhcbiAgICAgICAgICAgICAgICA/IHMgKyBub2RlTWFya2VyXG4gICAgICAgICAgICAgICAgOiBhdHRyTmFtZUVuZEluZGV4ID49IDBcbiAgICAgICAgICAgICAgICAgICAgPyAoYXR0ck5hbWVzLnB1c2goYXR0ck5hbWUpLFxuICAgICAgICAgICAgICAgICAgICAgICAgcy5zbGljZSgwLCBhdHRyTmFtZUVuZEluZGV4KSArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYm91bmRBdHRyaWJ1dGVTdWZmaXggK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHMuc2xpY2UoYXR0ck5hbWVFbmRJbmRleCkpICtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlciArXG4gICAgICAgICAgICAgICAgICAgICAgICBlbmRcbiAgICAgICAgICAgICAgICAgICAgOiBzICtcbiAgICAgICAgICAgICAgICAgICAgICAgIG1hcmtlciArXG4gICAgICAgICAgICAgICAgICAgICAgICAoYXR0ck5hbWVFbmRJbmRleCA9PT0gLTIgPyAoYXR0ck5hbWVzLnB1c2godW5kZWZpbmVkKSwgaSkgOiBlbmQpO1xuICAgIH1cbiAgICBjb25zdCBodG1sUmVzdWx0ID0gaHRtbCArIChzdHJpbmdzW2xdIHx8ICc8Pz4nKSArICh0eXBlID09PSBTVkdfUkVTVUxUID8gJzwvc3ZnPicgOiAnJyk7XG4gICAgLy8gQSBzZWN1cml0eSBjaGVjayB0byBwcmV2ZW50IHNwb29maW5nIG9mIExpdCB0ZW1wbGF0ZSByZXN1bHRzLlxuICAgIC8vIEluIHRoZSBmdXR1cmUsIHdlIG1heSBiZSBhYmxlIHRvIHJlcGxhY2UgdGhpcyB3aXRoIEFycmF5LmlzVGVtcGxhdGVPYmplY3QsXG4gICAgLy8gdGhvdWdoIHdlIG1pZ2h0IG5lZWQgdG8gbWFrZSB0aGF0IGNoZWNrIGluc2lkZSBvZiB0aGUgaHRtbCBhbmQgc3ZnXG4gICAgLy8gZnVuY3Rpb25zLCBiZWNhdXNlIHByZWNvbXBpbGVkIHRlbXBsYXRlcyBkb24ndCBjb21lIGluIGFzXG4gICAgLy8gVGVtcGxhdGVTdHJpbmdBcnJheSBvYmplY3RzLlxuICAgIGlmICghQXJyYXkuaXNBcnJheShzdHJpbmdzKSB8fCAhc3RyaW5ncy5oYXNPd25Qcm9wZXJ0eSgncmF3JykpIHtcbiAgICAgICAgbGV0IG1lc3NhZ2UgPSAnaW52YWxpZCB0ZW1wbGF0ZSBzdHJpbmdzIGFycmF5JztcbiAgICAgICAgaWYgKERFVl9NT0RFKSB7XG4gICAgICAgICAgICBtZXNzYWdlID0gYFxuICAgICAgICAgIEludGVybmFsIEVycm9yOiBleHBlY3RlZCB0ZW1wbGF0ZSBzdHJpbmdzIHRvIGJlIGFuIGFycmF5XG4gICAgICAgICAgd2l0aCBhICdyYXcnIGZpZWxkLiBGYWtpbmcgYSB0ZW1wbGF0ZSBzdHJpbmdzIGFycmF5IGJ5XG4gICAgICAgICAgY2FsbGluZyBodG1sIG9yIHN2ZyBsaWtlIGFuIG9yZGluYXJ5IGZ1bmN0aW9uIGlzIGVmZmVjdGl2ZWx5XG4gICAgICAgICAgdGhlIHNhbWUgYXMgY2FsbGluZyB1bnNhZmVIdG1sIGFuZCBjYW4gbGVhZCB0byBtYWpvciBzZWN1cml0eVxuICAgICAgICAgIGlzc3VlcywgZS5nLiBvcGVuaW5nIHlvdXIgY29kZSB1cCB0byBYU1MgYXR0YWNrcy5cblxuICAgICAgICAgIElmIHlvdSdyZSB1c2luZyB0aGUgaHRtbCBvciBzdmcgdGFnZ2VkIHRlbXBsYXRlIGZ1bmN0aW9ucyBub3JtYWxseVxuICAgICAgICAgIGFuZCBhbmQgc3RpbGwgc2VlaW5nIHRoaXMgZXJyb3IsIHBsZWFzZSBmaWxlIGEgYnVnIGF0XG4gICAgICAgICAgaHR0cHM6Ly9naXRodWIuY29tL2xpdC9saXQvaXNzdWVzL25ldz90ZW1wbGF0ZT1idWdfcmVwb3J0Lm1kXG4gICAgICAgICAgYW5kIGluY2x1ZGUgaW5mb3JtYXRpb24gYWJvdXQgeW91ciBidWlsZCB0b29saW5nLCBpZiBhbnkuXG4gICAgICAgIGBcbiAgICAgICAgICAgICAgICAudHJpbSgpXG4gICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcbiAqL2csICdcXG4nKTtcbiAgICAgICAgfVxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgfVxuICAgIC8vIFJldHVybmVkIGFzIGFuIGFycmF5IGZvciB0ZXJzZW5lc3NcbiAgICByZXR1cm4gW1xuICAgICAgICBwb2xpY3kgIT09IHVuZGVmaW5lZFxuICAgICAgICAgICAgPyBwb2xpY3kuY3JlYXRlSFRNTChodG1sUmVzdWx0KVxuICAgICAgICAgICAgOiBodG1sUmVzdWx0LFxuICAgICAgICBhdHRyTmFtZXMsXG4gICAgXTtcbn07XG5jbGFzcyBUZW1wbGF0ZSB7XG4gICAgY29uc3RydWN0b3IoXG4gICAgLy8gVGhpcyBwcm9wZXJ0eSBuZWVkcyB0byByZW1haW4gdW5taW5pZmllZC5cbiAgICB7IHN0cmluZ3MsIFsnXyRsaXRUeXBlJCddOiB0eXBlIH0sIG9wdGlvbnMpIHtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLnBhcnRzID0gW107XG4gICAgICAgIGxldCBub2RlO1xuICAgICAgICBsZXQgbm9kZUluZGV4ID0gMDtcbiAgICAgICAgbGV0IGF0dHJOYW1lSW5kZXggPSAwO1xuICAgICAgICBjb25zdCBwYXJ0Q291bnQgPSBzdHJpbmdzLmxlbmd0aCAtIDE7XG4gICAgICAgIGNvbnN0IHBhcnRzID0gdGhpcy5wYXJ0cztcbiAgICAgICAgLy8gQ3JlYXRlIHRlbXBsYXRlIGVsZW1lbnRcbiAgICAgICAgY29uc3QgW2h0bWwsIGF0dHJOYW1lc10gPSBnZXRUZW1wbGF0ZUh0bWwoc3RyaW5ncywgdHlwZSk7XG4gICAgICAgIHRoaXMuZWwgPSBUZW1wbGF0ZS5jcmVhdGVFbGVtZW50KGh0bWwsIG9wdGlvbnMpO1xuICAgICAgICB3YWxrZXIuY3VycmVudE5vZGUgPSB0aGlzLmVsLmNvbnRlbnQ7XG4gICAgICAgIC8vIFJlcGFyZW50IFNWRyBub2RlcyBpbnRvIHRlbXBsYXRlIHJvb3RcbiAgICAgICAgaWYgKHR5cGUgPT09IFNWR19SRVNVTFQpIHtcbiAgICAgICAgICAgIGNvbnN0IGNvbnRlbnQgPSB0aGlzLmVsLmNvbnRlbnQ7XG4gICAgICAgICAgICBjb25zdCBzdmdFbGVtZW50ID0gY29udGVudC5maXJzdENoaWxkO1xuICAgICAgICAgICAgc3ZnRWxlbWVudC5yZW1vdmUoKTtcbiAgICAgICAgICAgIGNvbnRlbnQuYXBwZW5kKC4uLnN2Z0VsZW1lbnQuY2hpbGROb2Rlcyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gV2FsayB0aGUgdGVtcGxhdGUgdG8gZmluZCBiaW5kaW5nIG1hcmtlcnMgYW5kIGNyZWF0ZSBUZW1wbGF0ZVBhcnRzXG4gICAgICAgIHdoaWxlICgobm9kZSA9IHdhbGtlci5uZXh0Tm9kZSgpKSAhPT0gbnVsbCAmJiBwYXJ0cy5sZW5ndGggPCBwYXJ0Q291bnQpIHtcbiAgICAgICAgICAgIGlmIChub2RlLm5vZGVUeXBlID09PSAxKSB7XG4gICAgICAgICAgICAgICAgaWYgKERFVl9NT0RFKSB7XG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IHRhZyA9IG5vZGUubG9jYWxOYW1lO1xuICAgICAgICAgICAgICAgICAgICAvLyBXYXJuIGlmIGB0ZXh0YXJlYWAgaW5jbHVkZXMgYW4gZXhwcmVzc2lvbiBhbmQgdGhyb3cgaWYgYHRlbXBsYXRlYFxuICAgICAgICAgICAgICAgICAgICAvLyBkb2VzIHNpbmNlIHRoZXNlIGFyZSBub3Qgc3VwcG9ydGVkLiBXZSBkbyB0aGlzIGJ5IGNoZWNraW5nXG4gICAgICAgICAgICAgICAgICAgIC8vIGlubmVySFRNTCBmb3IgYW55dGhpbmcgdGhhdCBsb29rcyBsaWtlIGEgbWFya2VyLiBUaGlzIGNhdGNoZXNcbiAgICAgICAgICAgICAgICAgICAgLy8gY2FzZXMgbGlrZSBiaW5kaW5ncyBpbiB0ZXh0YXJlYSB0aGVyZSBtYXJrZXJzIHR1cm4gaW50byB0ZXh0IG5vZGVzLlxuICAgICAgICAgICAgICAgICAgICBpZiAoL14oPzp0ZXh0YXJlYXx0ZW1wbGF0ZSkkL2kudGVzdCh0YWcpICYmXG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLmlubmVySFRNTC5pbmNsdWRlcyhtYXJrZXIpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBjb25zdCBtID0gYEV4cHJlc3Npb25zIGFyZSBub3Qgc3VwcG9ydGVkIGluc2lkZSBcXGAke3RhZ31cXGAgYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYGVsZW1lbnRzLiBTZWUgaHR0cHM6Ly9saXQuZGV2L21zZy9leHByZXNzaW9uLWluLSR7dGFnfSBmb3IgbW9yZSBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBgaW5mb3JtYXRpb24uYDtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmICh0YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IobSk7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgaXNzdWVXYXJuaW5nKCcnLCBtKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyBUT0RPIChqdXN0aW5mYWduYW5pKTogZm9yIGF0dGVtcHRlZCBkeW5hbWljIHRhZyBuYW1lcywgd2UgZG9uJ3RcbiAgICAgICAgICAgICAgICAvLyBpbmNyZW1lbnQgdGhlIGJpbmRpbmdJbmRleCwgYW5kIGl0J2xsIGJlIG9mZiBieSAxIGluIHRoZSBlbGVtZW50XG4gICAgICAgICAgICAgICAgLy8gYW5kIG9mZiBieSB0d28gYWZ0ZXIgaXQuXG4gICAgICAgICAgICAgICAgaWYgKG5vZGUuaGFzQXR0cmlidXRlcygpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIFdlIGRlZmVyIHJlbW92aW5nIGJvdW5kIGF0dHJpYnV0ZXMgYmVjYXVzZSBvbiBJRSB3ZSBtaWdodCBub3QgYmVcbiAgICAgICAgICAgICAgICAgICAgLy8gaXRlcmF0aW5nIGF0dHJpYnV0ZXMgaW4gdGhlaXIgdGVtcGxhdGUgb3JkZXIsIGFuZCB3b3VsZCBzb21ldGltZXNcbiAgICAgICAgICAgICAgICAgICAgLy8gcmVtb3ZlIGFuIGF0dHJpYnV0ZSB0aGF0IHdlIHN0aWxsIG5lZWQgdG8gY3JlYXRlIGEgcGFydCBmb3IuXG4gICAgICAgICAgICAgICAgICAgIGNvbnN0IGF0dHJzVG9SZW1vdmUgPSBbXTtcbiAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBuYW1lIG9mIG5vZGUuZ2V0QXR0cmlidXRlTmFtZXMoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYG5hbWVgIGlzIHRoZSBuYW1lIG9mIHRoZSBhdHRyaWJ1dGUgd2UncmUgaXRlcmF0aW5nIG92ZXIsIGJ1dCBub3RcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIF9uZWNjZXNzYXJpbHlfIHRoZSBuYW1lIG9mIHRoZSBhdHRyaWJ1dGUgd2Ugd2lsbCBjcmVhdGUgYSBwYXJ0XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBmb3IuIFRoZXkgY2FuIGJlIGRpZmZlcmVudCBpbiBicm93c2VycyB0aGF0IGRvbid0IGl0ZXJhdGUgb25cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGF0dHJpYnV0ZXMgaW4gc291cmNlIG9yZGVyLiBJbiB0aGF0IGNhc2UgdGhlIGF0dHJOYW1lcyBhcnJheVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gY29udGFpbnMgdGhlIGF0dHJpYnV0ZSBuYW1lIHdlJ2xsIHByb2Nlc3MgbmV4dC4gV2Ugb25seSBuZWVkIHRoZVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gYXR0cmlidXRlIG5hbWUgaGVyZSB0byBrbm93IGlmIHdlIHNob3VsZCBwcm9jZXNzIGEgYm91bmQgYXR0cmlidXRlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBvbiB0aGlzIGVsZW1lbnQuXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAobmFtZS5lbmRzV2l0aChib3VuZEF0dHJpYnV0ZVN1ZmZpeCkgfHxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lLnN0YXJ0c1dpdGgobWFya2VyKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHJlYWxOYW1lID0gYXR0ck5hbWVzW2F0dHJOYW1lSW5kZXgrK107XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnNUb1JlbW92ZS5wdXNoKG5hbWUpO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmIChyZWFsTmFtZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC8vIExvd2VyY2FzZSBmb3IgY2FzZS1zZW5zaXRpdmUgU1ZHIGF0dHJpYnV0ZXMgbGlrZSB2aWV3Qm94XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IHZhbHVlID0gbm9kZS5nZXRBdHRyaWJ1dGUocmVhbE5hbWUudG9Mb3dlckNhc2UoKSArIGJvdW5kQXR0cmlidXRlU3VmZml4KTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgY29uc3Qgc3RhdGljcyA9IHZhbHVlLnNwbGl0KG1hcmtlcik7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGNvbnN0IG0gPSAvKFsuP0BdKT8oLiopLy5leGVjKHJlYWxOYW1lKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgcGFydHMucHVzaCh7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0eXBlOiBBVFRSSUJVVEVfUEFSVCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBub2RlSW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuYW1lOiBtWzJdLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgc3RyaW5nczogc3RhdGljcyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGN0b3I6IG1bMV0gPT09ICcuJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgID8gUHJvcGVydHlQYXJ0XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgOiBtWzFdID09PSAnPydcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBCb29sZWFuQXR0cmlidXRlUGFydFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICA6IG1bMV0gPT09ICdAJ1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgPyBFdmVudFBhcnRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIDogQXR0cmlidXRlUGFydCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJ0cy5wdXNoKHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHR5cGU6IEVMRU1FTlRfUEFSVCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGluZGV4OiBub2RlSW5kZXgsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBmb3IgKGNvbnN0IG5hbWUgb2YgYXR0cnNUb1JlbW92ZSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgbm9kZS5yZW1vdmVBdHRyaWJ1dGUobmFtZSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gVE9ETyAoanVzdGluZmFnbmFuaSk6IGJlbmNobWFyayB0aGUgcmVnZXggYWdhaW5zdCB0ZXN0aW5nIGZvciBlYWNoXG4gICAgICAgICAgICAgICAgLy8gb2YgdGhlIDMgcmF3IHRleHQgZWxlbWVudCBuYW1lcy5cbiAgICAgICAgICAgICAgICBpZiAocmF3VGV4dEVsZW1lbnQudGVzdChub2RlLnRhZ05hbWUpKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIEZvciByYXcgdGV4dCBlbGVtZW50cyB3ZSBuZWVkIHRvIHNwbGl0IHRoZSB0ZXh0IGNvbnRlbnQgb25cbiAgICAgICAgICAgICAgICAgICAgLy8gbWFya2VycywgY3JlYXRlIGEgVGV4dCBub2RlIGZvciBlYWNoIHNlZ21lbnQsIGFuZCBjcmVhdGVcbiAgICAgICAgICAgICAgICAgICAgLy8gYSBUZW1wbGF0ZVBhcnQgZm9yIGVhY2ggbWFya2VyLlxuICAgICAgICAgICAgICAgICAgICBjb25zdCBzdHJpbmdzID0gbm9kZS50ZXh0Q29udGVudC5zcGxpdChtYXJrZXIpO1xuICAgICAgICAgICAgICAgICAgICBjb25zdCBsYXN0SW5kZXggPSBzdHJpbmdzLmxlbmd0aCAtIDE7XG4gICAgICAgICAgICAgICAgICAgIGlmIChsYXN0SW5kZXggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBub2RlLnRleHRDb250ZW50ID0gdHJ1c3RlZFR5cGVzXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgPyB0cnVzdGVkVHlwZXMuZW1wdHlTY3JpcHRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICA6ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gR2VuZXJhdGUgYSBuZXcgdGV4dCBub2RlIGZvciBlYWNoIGxpdGVyYWwgc2VjdGlvblxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gVGhlc2Ugbm9kZXMgYXJlIGFsc28gdXNlZCBhcyB0aGUgbWFya2VycyBmb3Igbm9kZSBwYXJ0c1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gV2UgY2FuJ3QgdXNlIGVtcHR5IHRleHQgbm9kZXMgYXMgbWFya2VycyBiZWNhdXNlIHRoZXkncmVcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIG5vcm1hbGl6ZWQgd2hlbiBjbG9uaW5nIGluIElFIChjb3VsZCBzaW1wbGlmeSB3aGVuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBJRSBpcyBubyBsb25nZXIgc3VwcG9ydGVkKVxuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsYXN0SW5kZXg7IGkrKykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuYXBwZW5kKHN0cmluZ3NbaV0sIGNyZWF0ZU1hcmtlcigpKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBXYWxrIHBhc3QgdGhlIG1hcmtlciBub2RlIHdlIGp1c3QgYWRkZWRcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICB3YWxrZXIubmV4dE5vZGUoKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBwYXJ0cy5wdXNoKHsgdHlwZTogQ0hJTERfUEFSVCwgaW5kZXg6ICsrbm9kZUluZGV4IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTm90ZSBiZWNhdXNlIHRoaXMgbWFya2VyIGlzIGFkZGVkIGFmdGVyIHRoZSB3YWxrZXIncyBjdXJyZW50XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBub2RlLCBpdCB3aWxsIGJlIHdhbGtlZCB0byBpbiB0aGUgb3V0ZXIgbG9vcCAoYW5kIGlnbm9yZWQpLCBzb1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gd2UgZG9uJ3QgbmVlZCB0byBhZGp1c3Qgbm9kZUluZGV4IGhlcmVcbiAgICAgICAgICAgICAgICAgICAgICAgIG5vZGUuYXBwZW5kKHN0cmluZ3NbbGFzdEluZGV4XSwgY3JlYXRlTWFya2VyKCkpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAobm9kZS5ub2RlVHlwZSA9PT0gOCkge1xuICAgICAgICAgICAgICAgIGNvbnN0IGRhdGEgPSBub2RlLmRhdGE7XG4gICAgICAgICAgICAgICAgaWYgKGRhdGEgPT09IG1hcmtlck1hdGNoKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnRzLnB1c2goeyB0eXBlOiBDSElMRF9QQVJULCBpbmRleDogbm9kZUluZGV4IH0pO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGkgPSAtMTtcbiAgICAgICAgICAgICAgICAgICAgd2hpbGUgKChpID0gbm9kZS5kYXRhLmluZGV4T2YobWFya2VyLCBpICsgMSkpICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gQ29tbWVudCBub2RlIGhhcyBhIGJpbmRpbmcgbWFya2VyIGluc2lkZSwgbWFrZSBhbiBpbmFjdGl2ZSBwYXJ0XG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBUaGUgYmluZGluZyB3b24ndCB3b3JrLCBidXQgc3Vic2VxdWVudCBiaW5kaW5ncyB3aWxsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJ0cy5wdXNoKHsgdHlwZTogQ09NTUVOVF9QQVJULCBpbmRleDogbm9kZUluZGV4IH0pO1xuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTW92ZSB0byB0aGUgZW5kIG9mIHRoZSBtYXRjaFxuICAgICAgICAgICAgICAgICAgICAgICAgaSArPSBtYXJrZXIubGVuZ3RoIC0gMTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIG5vZGVJbmRleCsrO1xuICAgICAgICB9XG4gICAgICAgIGRlYnVnTG9nRXZlbnQgPT09IG51bGwgfHwgZGVidWdMb2dFdmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVidWdMb2dFdmVudCh7XG4gICAgICAgICAgICBraW5kOiAndGVtcGxhdGUgcHJlcCcsXG4gICAgICAgICAgICB0ZW1wbGF0ZTogdGhpcyxcbiAgICAgICAgICAgIGNsb25hYmxlVGVtcGxhdGU6IHRoaXMuZWwsXG4gICAgICAgICAgICBwYXJ0czogdGhpcy5wYXJ0cyxcbiAgICAgICAgICAgIHN0cmluZ3MsXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICAvLyBPdmVycmlkZGVuIHZpYSBgbGl0SHRtbFBvbHlmaWxsU3VwcG9ydGAgdG8gcHJvdmlkZSBwbGF0Zm9ybSBzdXBwb3J0LlxuICAgIC8qKiBAbm9jb2xsYXBzZSAqL1xuICAgIHN0YXRpYyBjcmVhdGVFbGVtZW50KGh0bWwsIF9vcHRpb25zKSB7XG4gICAgICAgIGNvbnN0IGVsID0gZC5jcmVhdGVFbGVtZW50KCd0ZW1wbGF0ZScpO1xuICAgICAgICBlbC5pbm5lckhUTUwgPSBodG1sO1xuICAgICAgICByZXR1cm4gZWw7XG4gICAgfVxufVxuZnVuY3Rpb24gcmVzb2x2ZURpcmVjdGl2ZShwYXJ0LCB2YWx1ZSwgcGFyZW50ID0gcGFydCwgYXR0cmlidXRlSW5kZXgpIHtcbiAgICB2YXIgX2EsIF9iLCBfYztcbiAgICB2YXIgX2Q7XG4gICAgLy8gQmFpbCBlYXJseSBpZiB0aGUgdmFsdWUgaXMgZXhwbGljaXRseSBub0NoYW5nZS4gTm90ZSwgdGhpcyBtZWFucyBhbnlcbiAgICAvLyBuZXN0ZWQgZGlyZWN0aXZlIGlzIHN0aWxsIGF0dGFjaGVkIGFuZCBpcyBub3QgcnVuLlxuICAgIGlmICh2YWx1ZSA9PT0gbm9DaGFuZ2UpIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlO1xuICAgIH1cbiAgICBsZXQgY3VycmVudERpcmVjdGl2ZSA9IGF0dHJpYnV0ZUluZGV4ICE9PSB1bmRlZmluZWRcbiAgICAgICAgPyAoX2EgPSBwYXJlbnQuX19kaXJlY3RpdmVzKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2FbYXR0cmlidXRlSW5kZXhdXG4gICAgICAgIDogcGFyZW50Ll9fZGlyZWN0aXZlO1xuICAgIGNvbnN0IG5leHREaXJlY3RpdmVDb25zdHJ1Y3RvciA9IGlzUHJpbWl0aXZlKHZhbHVlKVxuICAgICAgICA/IHVuZGVmaW5lZFxuICAgICAgICA6IC8vIFRoaXMgcHJvcGVydHkgbmVlZHMgdG8gcmVtYWluIHVubWluaWZpZWQuXG4gICAgICAgICAgICB2YWx1ZVsnXyRsaXREaXJlY3RpdmUkJ107XG4gICAgaWYgKChjdXJyZW50RGlyZWN0aXZlID09PSBudWxsIHx8IGN1cnJlbnREaXJlY3RpdmUgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGN1cnJlbnREaXJlY3RpdmUuY29uc3RydWN0b3IpICE9PSBuZXh0RGlyZWN0aXZlQ29uc3RydWN0b3IpIHtcbiAgICAgICAgLy8gVGhpcyBwcm9wZXJ0eSBuZWVkcyB0byByZW1haW4gdW5taW5pZmllZC5cbiAgICAgICAgKF9iID0gY3VycmVudERpcmVjdGl2ZSA9PT0gbnVsbCB8fCBjdXJyZW50RGlyZWN0aXZlID09PSB2b2lkIDAgPyB2b2lkIDAgOiBjdXJyZW50RGlyZWN0aXZlWydfJG5vdGlmeURpcmVjdGl2ZUNvbm5lY3Rpb25DaGFuZ2VkJ10pID09PSBudWxsIHx8IF9iID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYi5jYWxsKGN1cnJlbnREaXJlY3RpdmUsIGZhbHNlKTtcbiAgICAgICAgaWYgKG5leHREaXJlY3RpdmVDb25zdHJ1Y3RvciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICBjdXJyZW50RGlyZWN0aXZlID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgY3VycmVudERpcmVjdGl2ZSA9IG5ldyBuZXh0RGlyZWN0aXZlQ29uc3RydWN0b3IocGFydCk7XG4gICAgICAgICAgICBjdXJyZW50RGlyZWN0aXZlLl8kaW5pdGlhbGl6ZShwYXJ0LCBwYXJlbnQsIGF0dHJpYnV0ZUluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYXR0cmlidXRlSW5kZXggIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgKChfYyA9IChfZCA9IHBhcmVudCkuX19kaXJlY3RpdmVzKSAhPT0gbnVsbCAmJiBfYyAhPT0gdm9pZCAwID8gX2MgOiAoX2QuX19kaXJlY3RpdmVzID0gW10pKVthdHRyaWJ1dGVJbmRleF0gPVxuICAgICAgICAgICAgICAgIGN1cnJlbnREaXJlY3RpdmU7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBwYXJlbnQuX19kaXJlY3RpdmUgPSBjdXJyZW50RGlyZWN0aXZlO1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChjdXJyZW50RGlyZWN0aXZlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgdmFsdWUgPSByZXNvbHZlRGlyZWN0aXZlKHBhcnQsIGN1cnJlbnREaXJlY3RpdmUuXyRyZXNvbHZlKHBhcnQsIHZhbHVlLnZhbHVlcyksIGN1cnJlbnREaXJlY3RpdmUsIGF0dHJpYnV0ZUluZGV4KTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlO1xufVxuLyoqXG4gKiBBbiB1cGRhdGVhYmxlIGluc3RhbmNlIG9mIGEgVGVtcGxhdGUuIEhvbGRzIHJlZmVyZW5jZXMgdG8gdGhlIFBhcnRzIHVzZWQgdG9cbiAqIHVwZGF0ZSB0aGUgdGVtcGxhdGUgaW5zdGFuY2UuXG4gKi9cbmNsYXNzIFRlbXBsYXRlSW5zdGFuY2Uge1xuICAgIGNvbnN0cnVjdG9yKHRlbXBsYXRlLCBwYXJlbnQpIHtcbiAgICAgICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgICAgICB0aGlzLl9wYXJ0cyA9IFtdO1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIHRoaXMuXyRkaXNjb25uZWN0YWJsZUNoaWxkcmVuID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl8kdGVtcGxhdGUgPSB0ZW1wbGF0ZTtcbiAgICAgICAgdGhpcy5fJHBhcmVudCA9IHBhcmVudDtcbiAgICB9XG4gICAgLy8gQ2FsbGVkIGJ5IENoaWxkUGFydCBwYXJlbnROb2RlIGdldHRlclxuICAgIGdldCBwYXJlbnROb2RlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fJHBhcmVudC5wYXJlbnROb2RlO1xuICAgIH1cbiAgICAvLyBTZWUgY29tbWVudCBpbiBEaXNjb25uZWN0YWJsZSBpbnRlcmZhY2UgZm9yIHdoeSB0aGlzIGlzIGEgZ2V0dGVyXG4gICAgZ2V0IF8kaXNDb25uZWN0ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl8kcGFyZW50Ll8kaXNDb25uZWN0ZWQ7XG4gICAgfVxuICAgIC8vIFRoaXMgbWV0aG9kIGlzIHNlcGFyYXRlIGZyb20gdGhlIGNvbnN0cnVjdG9yIGJlY2F1c2Ugd2UgbmVlZCB0byByZXR1cm4gYVxuICAgIC8vIERvY3VtZW50RnJhZ21lbnQgYW5kIHdlIGRvbid0IHdhbnQgdG8gaG9sZCBvbnRvIGl0IHdpdGggYW4gaW5zdGFuY2UgZmllbGQuXG4gICAgX2Nsb25lKG9wdGlvbnMpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICBjb25zdCB7IGVsOiB7IGNvbnRlbnQgfSwgcGFydHM6IHBhcnRzLCB9ID0gdGhpcy5fJHRlbXBsYXRlO1xuICAgICAgICBjb25zdCBmcmFnbWVudCA9ICgoX2EgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuY3JlYXRpb25TY29wZSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogZCkuaW1wb3J0Tm9kZShjb250ZW50LCB0cnVlKTtcbiAgICAgICAgd2Fsa2VyLmN1cnJlbnROb2RlID0gZnJhZ21lbnQ7XG4gICAgICAgIGxldCBub2RlID0gd2Fsa2VyLm5leHROb2RlKCk7XG4gICAgICAgIGxldCBub2RlSW5kZXggPSAwO1xuICAgICAgICBsZXQgcGFydEluZGV4ID0gMDtcbiAgICAgICAgbGV0IHRlbXBsYXRlUGFydCA9IHBhcnRzWzBdO1xuICAgICAgICB3aGlsZSAodGVtcGxhdGVQYXJ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmIChub2RlSW5kZXggPT09IHRlbXBsYXRlUGFydC5pbmRleCkge1xuICAgICAgICAgICAgICAgIGxldCBwYXJ0O1xuICAgICAgICAgICAgICAgIGlmICh0ZW1wbGF0ZVBhcnQudHlwZSA9PT0gQ0hJTERfUEFSVCkge1xuICAgICAgICAgICAgICAgICAgICBwYXJ0ID0gbmV3IENoaWxkUGFydChub2RlLCBub2RlLm5leHRTaWJsaW5nLCB0aGlzLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGVtcGxhdGVQYXJ0LnR5cGUgPT09IEFUVFJJQlVURV9QQVJUKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnQgPSBuZXcgdGVtcGxhdGVQYXJ0LmN0b3Iobm9kZSwgdGVtcGxhdGVQYXJ0Lm5hbWUsIHRlbXBsYXRlUGFydC5zdHJpbmdzLCB0aGlzLCBvcHRpb25zKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSBpZiAodGVtcGxhdGVQYXJ0LnR5cGUgPT09IEVMRU1FTlRfUEFSVCkge1xuICAgICAgICAgICAgICAgICAgICBwYXJ0ID0gbmV3IEVsZW1lbnRQYXJ0KG5vZGUsIHRoaXMsIG9wdGlvbnMpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB0aGlzLl9wYXJ0cy5wdXNoKHBhcnQpO1xuICAgICAgICAgICAgICAgIHRlbXBsYXRlUGFydCA9IHBhcnRzWysrcGFydEluZGV4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChub2RlSW5kZXggIT09ICh0ZW1wbGF0ZVBhcnQgPT09IG51bGwgfHwgdGVtcGxhdGVQYXJ0ID09PSB2b2lkIDAgPyB2b2lkIDAgOiB0ZW1wbGF0ZVBhcnQuaW5kZXgpKSB7XG4gICAgICAgICAgICAgICAgbm9kZSA9IHdhbGtlci5uZXh0Tm9kZSgpO1xuICAgICAgICAgICAgICAgIG5vZGVJbmRleCsrO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmcmFnbWVudDtcbiAgICB9XG4gICAgX3VwZGF0ZSh2YWx1ZXMpIHtcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICBmb3IgKGNvbnN0IHBhcnQgb2YgdGhpcy5fcGFydHMpIHtcbiAgICAgICAgICAgIGlmIChwYXJ0ICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICBkZWJ1Z0xvZ0V2ZW50ID09PSBudWxsIHx8IGRlYnVnTG9nRXZlbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlYnVnTG9nRXZlbnQoe1xuICAgICAgICAgICAgICAgICAgICBraW5kOiAnc2V0IHBhcnQnLFxuICAgICAgICAgICAgICAgICAgICBwYXJ0LFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogdmFsdWVzW2ldLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZUluZGV4OiBpLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZXMsXG4gICAgICAgICAgICAgICAgICAgIHRlbXBsYXRlSW5zdGFuY2U6IHRoaXMsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgaWYgKHBhcnQuc3RyaW5ncyAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHBhcnQuXyRzZXRWYWx1ZSh2YWx1ZXMsIHBhcnQsIGkpO1xuICAgICAgICAgICAgICAgICAgICAvLyBUaGUgbnVtYmVyIG9mIHZhbHVlcyB0aGUgcGFydCBjb25zdW1lcyBpcyBwYXJ0LnN0cmluZ3MubGVuZ3RoIC0gMVxuICAgICAgICAgICAgICAgICAgICAvLyBzaW5jZSB2YWx1ZXMgYXJlIGluIGJldHdlZW4gdGVtcGxhdGUgc3BhbnMuIFdlIGluY3JlbWVudCBpIGJ5IDFcbiAgICAgICAgICAgICAgICAgICAgLy8gbGF0ZXIgaW4gdGhlIGxvb3AsIHNvIGluY3JlbWVudCBpdCBieSBwYXJ0LnN0cmluZ3MubGVuZ3RoIC0gMiBoZXJlXG4gICAgICAgICAgICAgICAgICAgIGkgKz0gcGFydC5zdHJpbmdzLmxlbmd0aCAtIDI7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgICAgICBwYXJ0Ll8kc2V0VmFsdWUodmFsdWVzW2ldKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpKys7XG4gICAgICAgIH1cbiAgICB9XG59XG5jbGFzcyBDaGlsZFBhcnQge1xuICAgIGNvbnN0cnVjdG9yKHN0YXJ0Tm9kZSwgZW5kTm9kZSwgcGFyZW50LCBvcHRpb25zKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgdGhpcy50eXBlID0gQ0hJTERfUEFSVDtcbiAgICAgICAgdGhpcy5fJGNvbW1pdHRlZFZhbHVlID0gbm90aGluZztcbiAgICAgICAgLy8gVGhlIGZvbGxvd2luZyBmaWVsZHMgd2lsbCBiZSBwYXRjaGVkIG9udG8gQ2hpbGRQYXJ0cyB3aGVuIHJlcXVpcmVkIGJ5XG4gICAgICAgIC8vIEFzeW5jRGlyZWN0aXZlXG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgdGhpcy5fJGRpc2Nvbm5lY3RhYmxlQ2hpbGRyZW4gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuXyRzdGFydE5vZGUgPSBzdGFydE5vZGU7XG4gICAgICAgIHRoaXMuXyRlbmROb2RlID0gZW5kTm9kZTtcbiAgICAgICAgdGhpcy5fJHBhcmVudCA9IHBhcmVudDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgLy8gTm90ZSBfX2lzQ29ubmVjdGVkIGlzIG9ubHkgZXZlciBhY2Nlc3NlZCBvbiBSb290UGFydHMgKGkuZS4gd2hlbiB0aGVyZSBpc1xuICAgICAgICAvLyBubyBfJHBhcmVudCk7IHRoZSB2YWx1ZSBvbiBhIG5vbi1yb290LXBhcnQgaXMgXCJkb24ndCBjYXJlXCIsIGJ1dCBjaGVja2luZ1xuICAgICAgICAvLyBmb3IgcGFyZW50IHdvdWxkIGJlIG1vcmUgY29kZVxuICAgICAgICB0aGlzLl9faXNDb25uZWN0ZWQgPSAoX2EgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMuaXNDb25uZWN0ZWQpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IHRydWU7XG4gICAgICAgIGlmIChFTkFCTEVfRVhUUkFfU0VDVVJJVFlfSE9PS1MpIHtcbiAgICAgICAgICAgIC8vIEV4cGxpY2l0bHkgaW5pdGlhbGl6ZSBmb3IgY29uc2lzdGVudCBjbGFzcyBzaGFwZS5cbiAgICAgICAgICAgIHRoaXMuX3RleHRTYW5pdGl6ZXIgPSB1bmRlZmluZWQ7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gU2VlIGNvbW1lbnQgaW4gRGlzY29ubmVjdGFibGUgaW50ZXJmYWNlIGZvciB3aHkgdGhpcyBpcyBhIGdldHRlclxuICAgIGdldCBfJGlzQ29ubmVjdGVkKCkge1xuICAgICAgICB2YXIgX2EsIF9iO1xuICAgICAgICAvLyBDaGlsZFBhcnRzIHRoYXQgYXJlIG5vdCBhdCB0aGUgcm9vdCBzaG91bGQgYWx3YXlzIGJlIGNyZWF0ZWQgd2l0aCBhXG4gICAgICAgIC8vIHBhcmVudDsgb25seSBSb290Q2hpbGROb2RlJ3Mgd29uJ3QsIHNvIHRoZXkgcmV0dXJuIHRoZSBsb2NhbCBpc0Nvbm5lY3RlZFxuICAgICAgICAvLyBzdGF0ZVxuICAgICAgICByZXR1cm4gKF9iID0gKF9hID0gdGhpcy5fJHBhcmVudCkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLl8kaXNDb25uZWN0ZWQpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHRoaXMuX19pc0Nvbm5lY3RlZDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIHBhcmVudCBub2RlIGludG8gd2hpY2ggdGhlIHBhcnQgcmVuZGVycyBpdHMgY29udGVudC5cbiAgICAgKlxuICAgICAqIEEgQ2hpbGRQYXJ0J3MgY29udGVudCBjb25zaXN0cyBvZiBhIHJhbmdlIG9mIGFkamFjZW50IGNoaWxkIG5vZGVzIG9mXG4gICAgICogYC5wYXJlbnROb2RlYCwgcG9zc2libHkgYm9yZGVyZWQgYnkgJ21hcmtlciBub2RlcycgKGAuc3RhcnROb2RlYCBhbmRcbiAgICAgKiBgLmVuZE5vZGVgKS5cbiAgICAgKlxuICAgICAqIC0gSWYgYm90aCBgLnN0YXJ0Tm9kZWAgYW5kIGAuZW5kTm9kZWAgYXJlIG5vbi1udWxsLCB0aGVuIHRoZSBwYXJ0J3MgY29udGVudFxuICAgICAqIGNvbnNpc3RzIG9mIGFsbCBzaWJsaW5ncyBiZXR3ZWVuIGAuc3RhcnROb2RlYCBhbmQgYC5lbmROb2RlYCwgZXhjbHVzaXZlbHkuXG4gICAgICpcbiAgICAgKiAtIElmIGAuc3RhcnROb2RlYCBpcyBub24tbnVsbCBidXQgYC5lbmROb2RlYCBpcyBudWxsLCB0aGVuIHRoZSBwYXJ0J3NcbiAgICAgKiBjb250ZW50IGNvbnNpc3RzIG9mIGFsbCBzaWJsaW5ncyBmb2xsb3dpbmcgYC5zdGFydE5vZGVgLCB1cCB0byBhbmRcbiAgICAgKiBpbmNsdWRpbmcgdGhlIGxhc3QgY2hpbGQgb2YgYC5wYXJlbnROb2RlYC4gSWYgYC5lbmROb2RlYCBpcyBub24tbnVsbCwgdGhlblxuICAgICAqIGAuc3RhcnROb2RlYCB3aWxsIGFsd2F5cyBiZSBub24tbnVsbC5cbiAgICAgKlxuICAgICAqIC0gSWYgYm90aCBgLmVuZE5vZGVgIGFuZCBgLnN0YXJ0Tm9kZWAgYXJlIG51bGwsIHRoZW4gdGhlIHBhcnQncyBjb250ZW50XG4gICAgICogY29uc2lzdHMgb2YgYWxsIGNoaWxkIG5vZGVzIG9mIGAucGFyZW50Tm9kZWAuXG4gICAgICovXG4gICAgZ2V0IHBhcmVudE5vZGUoKSB7XG4gICAgICAgIGxldCBwYXJlbnROb2RlID0gd3JhcCh0aGlzLl8kc3RhcnROb2RlKS5wYXJlbnROb2RlO1xuICAgICAgICBjb25zdCBwYXJlbnQgPSB0aGlzLl8kcGFyZW50O1xuICAgICAgICBpZiAocGFyZW50ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIHBhcmVudE5vZGUubm9kZVR5cGUgPT09IDExIC8qIE5vZGUuRE9DVU1FTlRfRlJBR01FTlQgKi8pIHtcbiAgICAgICAgICAgIC8vIElmIHRoZSBwYXJlbnROb2RlIGlzIGEgRG9jdW1lbnRGcmFnbWVudCwgaXQgbWF5IGJlIGJlY2F1c2UgdGhlIERPTSBpc1xuICAgICAgICAgICAgLy8gc3RpbGwgaW4gdGhlIGNsb25lZCBmcmFnbWVudCBkdXJpbmcgaW5pdGlhbCByZW5kZXI7IGlmIHNvLCBnZXQgdGhlIHJlYWxcbiAgICAgICAgICAgIC8vIHBhcmVudE5vZGUgdGhlIHBhcnQgd2lsbCBiZSBjb21taXR0ZWQgaW50byBieSBhc2tpbmcgdGhlIHBhcmVudC5cbiAgICAgICAgICAgIHBhcmVudE5vZGUgPSBwYXJlbnQucGFyZW50Tm9kZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gcGFyZW50Tm9kZTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogVGhlIHBhcnQncyBsZWFkaW5nIG1hcmtlciBub2RlLCBpZiBhbnkuIFNlZSBgLnBhcmVudE5vZGVgIGZvciBtb3JlXG4gICAgICogaW5mb3JtYXRpb24uXG4gICAgICovXG4gICAgZ2V0IHN0YXJ0Tm9kZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuXyRzdGFydE5vZGU7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRoZSBwYXJ0J3MgdHJhaWxpbmcgbWFya2VyIG5vZGUsIGlmIGFueS4gU2VlIGAucGFyZW50Tm9kZWAgZm9yIG1vcmVcbiAgICAgKiBpbmZvcm1hdGlvbi5cbiAgICAgKi9cbiAgICBnZXQgZW5kTm9kZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuXyRlbmROb2RlO1xuICAgIH1cbiAgICBfJHNldFZhbHVlKHZhbHVlLCBkaXJlY3RpdmVQYXJlbnQgPSB0aGlzKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKERFVl9NT0RFICYmIHRoaXMucGFyZW50Tm9kZSA9PT0gbnVsbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBUaGlzIFxcYENoaWxkUGFydFxcYCBoYXMgbm8gXFxgcGFyZW50Tm9kZVxcYCBhbmQgdGhlcmVmb3JlIGNhbm5vdCBhY2NlcHQgYSB2YWx1ZS4gVGhpcyBsaWtlbHkgbWVhbnMgdGhlIGVsZW1lbnQgY29udGFpbmluZyB0aGUgcGFydCB3YXMgbWFuaXB1bGF0ZWQgaW4gYW4gdW5zdXBwb3J0ZWQgd2F5IG91dHNpZGUgb2YgTGl0J3MgY29udHJvbCBzdWNoIHRoYXQgdGhlIHBhcnQncyBtYXJrZXIgbm9kZXMgd2VyZSBlamVjdGVkIGZyb20gRE9NLiBGb3IgZXhhbXBsZSwgc2V0dGluZyB0aGUgZWxlbWVudCdzIFxcYGlubmVySFRNTFxcYCBvciBcXGB0ZXh0Q29udGVudFxcYCBjYW4gZG8gdGhpcy5gKTtcbiAgICAgICAgfVxuICAgICAgICB2YWx1ZSA9IHJlc29sdmVEaXJlY3RpdmUodGhpcywgdmFsdWUsIGRpcmVjdGl2ZVBhcmVudCk7XG4gICAgICAgIGlmIChpc1ByaW1pdGl2ZSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIC8vIE5vbi1yZW5kZXJpbmcgY2hpbGQgdmFsdWVzLiBJdCdzIGltcG9ydGFudCB0aGF0IHRoZXNlIGRvIG5vdCByZW5kZXJcbiAgICAgICAgICAgIC8vIGVtcHR5IHRleHQgbm9kZXMgdG8gYXZvaWQgaXNzdWVzIHdpdGggcHJldmVudGluZyBkZWZhdWx0IDxzbG90PlxuICAgICAgICAgICAgLy8gZmFsbGJhY2sgY29udGVudC5cbiAgICAgICAgICAgIGlmICh2YWx1ZSA9PT0gbm90aGluZyB8fCB2YWx1ZSA9PSBudWxsIHx8IHZhbHVlID09PSAnJykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl8kY29tbWl0dGVkVmFsdWUgIT09IG5vdGhpbmcpIHtcbiAgICAgICAgICAgICAgICAgICAgZGVidWdMb2dFdmVudCA9PT0gbnVsbCB8fCBkZWJ1Z0xvZ0V2ZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWJ1Z0xvZ0V2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGtpbmQ6ICdjb21taXQgbm90aGluZyB0byBjaGlsZCcsXG4gICAgICAgICAgICAgICAgICAgICAgICBzdGFydDogdGhpcy5fJHN0YXJ0Tm9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgIGVuZDogdGhpcy5fJGVuZE5vZGUsXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJlbnQ6IHRoaXMuXyRwYXJlbnQsXG4gICAgICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl8kY2xlYXIoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdGhpcy5fJGNvbW1pdHRlZFZhbHVlID0gbm90aGluZztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHZhbHVlICE9PSB0aGlzLl8kY29tbWl0dGVkVmFsdWUgJiYgdmFsdWUgIT09IG5vQ2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY29tbWl0VGV4dCh2YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBUaGlzIHByb3BlcnR5IG5lZWRzIHRvIHJlbWFpbiB1bm1pbmlmaWVkLlxuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbHVlWydfJGxpdFR5cGUkJ10gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fY29tbWl0VGVtcGxhdGVSZXN1bHQodmFsdWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHZhbHVlLm5vZGVUeXBlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIGlmIChERVZfTU9ERSAmJiAoKF9hID0gdGhpcy5vcHRpb25zKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2EuaG9zdCkgPT09IHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY29tbWl0VGV4dChgW3Byb2JhYmxlIG1pc3Rha2U6IHJlbmRlcmVkIGEgdGVtcGxhdGUncyBob3N0IGluIGl0c2VsZiBgICtcbiAgICAgICAgICAgICAgICAgICAgYChjb21tb25seSBjYXVzZWQgYnkgd3JpdGluZyBcXCR7dGhpc30gaW4gYSB0ZW1wbGF0ZV1gKTtcbiAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oYEF0dGVtcHRlZCB0byByZW5kZXIgdGhlIHRlbXBsYXRlIGhvc3RgLCB2YWx1ZSwgYGluc2lkZSBpdHNlbGYuIFRoaXMgaXMgYWxtb3N0IGFsd2F5cyBhIG1pc3Rha2UsIGFuZCBpbiBkZXYgbW9kZSBgLCBgd2UgcmVuZGVyIHNvbWUgd2FybmluZyB0ZXh0LiBJbiBwcm9kdWN0aW9uIGhvd2V2ZXIsIHdlJ2xsIGAsIGByZW5kZXIgaXQsIHdoaWNoIHdpbGwgdXN1YWxseSByZXN1bHQgaW4gYW4gZXJyb3IsIGFuZCBzb21ldGltZXMgYCwgYGluIHRoZSBlbGVtZW50IGRpc2FwcGVhcmluZyBmcm9tIHRoZSBET00uYCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5fY29tbWl0Tm9kZSh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoaXNJdGVyYWJsZSh2YWx1ZSkpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbW1pdEl0ZXJhYmxlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIEZhbGxiYWNrLCB3aWxsIHJlbmRlciB0aGUgc3RyaW5nIHJlcHJlc2VudGF0aW9uXG4gICAgICAgICAgICB0aGlzLl9jb21taXRUZXh0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICBfaW5zZXJ0KG5vZGUsIHJlZiA9IHRoaXMuXyRlbmROb2RlKSB7XG4gICAgICAgIHJldHVybiB3cmFwKHdyYXAodGhpcy5fJHN0YXJ0Tm9kZSkucGFyZW50Tm9kZSkuaW5zZXJ0QmVmb3JlKG5vZGUsIHJlZik7XG4gICAgfVxuICAgIF9jb21taXROb2RlKHZhbHVlKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHRoaXMuXyRjb21taXR0ZWRWYWx1ZSAhPT0gdmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuXyRjbGVhcigpO1xuICAgICAgICAgICAgaWYgKEVOQUJMRV9FWFRSQV9TRUNVUklUWV9IT09LUyAmJlxuICAgICAgICAgICAgICAgIHNhbml0aXplckZhY3RvcnlJbnRlcm5hbCAhPT0gbm9vcFNhbml0aXplcikge1xuICAgICAgICAgICAgICAgIGNvbnN0IHBhcmVudE5vZGVOYW1lID0gKF9hID0gdGhpcy5fJHN0YXJ0Tm9kZS5wYXJlbnROb2RlKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Eubm9kZU5hbWU7XG4gICAgICAgICAgICAgICAgaWYgKHBhcmVudE5vZGVOYW1lID09PSAnU1RZTEUnIHx8IHBhcmVudE5vZGVOYW1lID09PSAnU0NSSVBUJykge1xuICAgICAgICAgICAgICAgICAgICBsZXQgbWVzc2FnZSA9ICdGb3JiaWRkZW4nO1xuICAgICAgICAgICAgICAgICAgICBpZiAoREVWX01PREUpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGlmIChwYXJlbnROb2RlTmFtZSA9PT0gJ1NUWUxFJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1lc3NhZ2UgPVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgTGl0IGRvZXMgbm90IHN1cHBvcnQgYmluZGluZyBpbnNpZGUgc3R5bGUgbm9kZXMuIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYFRoaXMgaXMgYSBzZWN1cml0eSByaXNrLCBhcyBzdHlsZSBpbmplY3Rpb24gYXR0YWNrcyBjYW4gYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgZXhmaWx0cmF0ZSBkYXRhIGFuZCBzcG9vZiBVSXMuIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYENvbnNpZGVyIGluc3RlYWQgdXNpbmcgY3NzXFxgLi4uXFxgIGxpdGVyYWxzIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYHRvIGNvbXBvc2Ugc3R5bGVzLCBhbmQgbWFrZSBkbyBkeW5hbWljIHN0eWxpbmcgd2l0aCBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBjc3MgY3VzdG9tIHByb3BlcnRpZXMsIDo6cGFydHMsIDxzbG90PnMsIGAgK1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYGFuZCBieSBtdXRhdGluZyB0aGUgRE9NIHJhdGhlciB0aGFuIHN0eWxlc2hlZXRzLmA7XG4gICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBtZXNzYWdlID1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgYExpdCBkb2VzIG5vdCBzdXBwb3J0IGJpbmRpbmcgaW5zaWRlIHNjcmlwdCBub2Rlcy4gYCArXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBgVGhpcyBpcyBhIHNlY3VyaXR5IHJpc2ssIGFzIGl0IGNvdWxkIGFsbG93IGFyYml0cmFyeSBgICtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGBjb2RlIGV4ZWN1dGlvbi5gO1xuICAgICAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihtZXNzYWdlKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBkZWJ1Z0xvZ0V2ZW50ID09PSBudWxsIHx8IGRlYnVnTG9nRXZlbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlYnVnTG9nRXZlbnQoe1xuICAgICAgICAgICAgICAgIGtpbmQ6ICdjb21taXQgbm9kZScsXG4gICAgICAgICAgICAgICAgc3RhcnQ6IHRoaXMuXyRzdGFydE5vZGUsXG4gICAgICAgICAgICAgICAgcGFyZW50OiB0aGlzLl8kcGFyZW50LFxuICAgICAgICAgICAgICAgIHZhbHVlOiB2YWx1ZSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMuXyRjb21taXR0ZWRWYWx1ZSA9IHRoaXMuX2luc2VydCh2YWx1ZSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgX2NvbW1pdFRleHQodmFsdWUpIHtcbiAgICAgICAgLy8gSWYgdGhlIGNvbW1pdHRlZCB2YWx1ZSBpcyBhIHByaW1pdGl2ZSBpdCBtZWFucyB3ZSBjYWxsZWQgX2NvbW1pdFRleHQgb25cbiAgICAgICAgLy8gdGhlIHByZXZpb3VzIHJlbmRlciwgYW5kIHdlIGtub3cgdGhhdCB0aGlzLl8kc3RhcnROb2RlLm5leHRTaWJsaW5nIGlzIGFcbiAgICAgICAgLy8gVGV4dCBub2RlLiBXZSBjYW4gbm93IGp1c3QgcmVwbGFjZSB0aGUgdGV4dCBjb250ZW50ICguZGF0YSkgb2YgdGhlIG5vZGUuXG4gICAgICAgIGlmICh0aGlzLl8kY29tbWl0dGVkVmFsdWUgIT09IG5vdGhpbmcgJiZcbiAgICAgICAgICAgIGlzUHJpbWl0aXZlKHRoaXMuXyRjb21taXR0ZWRWYWx1ZSkpIHtcbiAgICAgICAgICAgIGNvbnN0IG5vZGUgPSB3cmFwKHRoaXMuXyRzdGFydE5vZGUpLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgaWYgKEVOQUJMRV9FWFRSQV9TRUNVUklUWV9IT09LUykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl90ZXh0U2FuaXRpemVyID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5fdGV4dFNhbml0aXplciA9IGNyZWF0ZVNhbml0aXplcihub2RlLCAnZGF0YScsICdwcm9wZXJ0eScpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YWx1ZSA9IHRoaXMuX3RleHRTYW5pdGl6ZXIodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVidWdMb2dFdmVudCA9PT0gbnVsbCB8fCBkZWJ1Z0xvZ0V2ZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWJ1Z0xvZ0V2ZW50KHtcbiAgICAgICAgICAgICAgICBraW5kOiAnY29tbWl0IHRleHQnLFxuICAgICAgICAgICAgICAgIG5vZGUsXG4gICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBub2RlLmRhdGEgPSB2YWx1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGlmIChFTkFCTEVfRVhUUkFfU0VDVVJJVFlfSE9PS1MpIHtcbiAgICAgICAgICAgICAgICBjb25zdCB0ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKCcnKTtcbiAgICAgICAgICAgICAgICB0aGlzLl9jb21taXROb2RlKHRleHROb2RlKTtcbiAgICAgICAgICAgICAgICAvLyBXaGVuIHNldHRpbmcgdGV4dCBjb250ZW50LCBmb3Igc2VjdXJpdHkgcHVycG9zZXMgaXQgbWF0dGVycyBhIGxvdFxuICAgICAgICAgICAgICAgIC8vIHdoYXQgdGhlIHBhcmVudCBpcy4gRm9yIGV4YW1wbGUsIDxzdHlsZT4gYW5kIDxzY3JpcHQ+IG5lZWQgdG8gYmVcbiAgICAgICAgICAgICAgICAvLyBoYW5kbGVkIHdpdGggY2FyZSwgd2hpbGUgPHNwYW4+IGRvZXMgbm90LiBTbyBmaXJzdCB3ZSBuZWVkIHRvIHB1dCBhXG4gICAgICAgICAgICAgICAgLy8gdGV4dCBub2RlIGludG8gdGhlIGRvY3VtZW50LCB0aGVuIHdlIGNhbiBzYW5pdGl6ZSBpdHMgY29udGVudC5cbiAgICAgICAgICAgICAgICBpZiAodGhpcy5fdGV4dFNhbml0aXplciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuX3RleHRTYW5pdGl6ZXIgPSBjcmVhdGVTYW5pdGl6ZXIodGV4dE5vZGUsICdkYXRhJywgJ3Byb3BlcnR5Jyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhbHVlID0gdGhpcy5fdGV4dFNhbml0aXplcih2YWx1ZSk7XG4gICAgICAgICAgICAgICAgZGVidWdMb2dFdmVudCA9PT0gbnVsbCB8fCBkZWJ1Z0xvZ0V2ZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWJ1Z0xvZ0V2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAga2luZDogJ2NvbW1pdCB0ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgbm9kZTogdGV4dE5vZGUsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgICAgICAgICBvcHRpb25zOiB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgdGV4dE5vZGUuZGF0YSA9IHZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5fY29tbWl0Tm9kZShkLmNyZWF0ZVRleHROb2RlKHZhbHVlKSk7XG4gICAgICAgICAgICAgICAgZGVidWdMb2dFdmVudCA9PT0gbnVsbCB8fCBkZWJ1Z0xvZ0V2ZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWJ1Z0xvZ0V2ZW50KHtcbiAgICAgICAgICAgICAgICAgICAga2luZDogJ2NvbW1pdCB0ZXh0JyxcbiAgICAgICAgICAgICAgICAgICAgbm9kZTogd3JhcCh0aGlzLl8kc3RhcnROb2RlKS5uZXh0U2libGluZyxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICAgICAgICAgIG9wdGlvbnM6IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl8kY29tbWl0dGVkVmFsdWUgPSB2YWx1ZTtcbiAgICB9XG4gICAgX2NvbW1pdFRlbXBsYXRlUmVzdWx0KHJlc3VsdCkge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIC8vIFRoaXMgcHJvcGVydHkgbmVlZHMgdG8gcmVtYWluIHVubWluaWZpZWQuXG4gICAgICAgIGNvbnN0IHsgdmFsdWVzLCBbJ18kbGl0VHlwZSQnXTogdHlwZSB9ID0gcmVzdWx0O1xuICAgICAgICAvLyBJZiAkbGl0VHlwZSQgaXMgYSBudW1iZXIsIHJlc3VsdCBpcyBhIHBsYWluIFRlbXBsYXRlUmVzdWx0IGFuZCB3ZSBnZXRcbiAgICAgICAgLy8gdGhlIHRlbXBsYXRlIGZyb20gdGhlIHRlbXBsYXRlIGNhY2hlLiBJZiBub3QsIHJlc3VsdCBpcyBhXG4gICAgICAgIC8vIENvbXBpbGVkVGVtcGxhdGVSZXN1bHQgYW5kIF8kbGl0VHlwZSQgaXMgYSBDb21waWxlZFRlbXBsYXRlIGFuZCB3ZSBuZWVkXG4gICAgICAgIC8vIHRvIGNyZWF0ZSB0aGUgPHRlbXBsYXRlPiBlbGVtZW50IHRoZSBmaXJzdCB0aW1lIHdlIHNlZSBpdC5cbiAgICAgICAgY29uc3QgdGVtcGxhdGUgPSB0eXBlb2YgdHlwZSA9PT0gJ251bWJlcidcbiAgICAgICAgICAgID8gdGhpcy5fJGdldFRlbXBsYXRlKHJlc3VsdClcbiAgICAgICAgICAgIDogKHR5cGUuZWwgPT09IHVuZGVmaW5lZCAmJlxuICAgICAgICAgICAgICAgICh0eXBlLmVsID0gVGVtcGxhdGUuY3JlYXRlRWxlbWVudCh0eXBlLmgsIHRoaXMub3B0aW9ucykpLFxuICAgICAgICAgICAgICAgIHR5cGUpO1xuICAgICAgICBpZiAoKChfYSA9IHRoaXMuXyRjb21taXR0ZWRWYWx1ZSkgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLl8kdGVtcGxhdGUpID09PSB0ZW1wbGF0ZSkge1xuICAgICAgICAgICAgZGVidWdMb2dFdmVudCA9PT0gbnVsbCB8fCBkZWJ1Z0xvZ0V2ZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWJ1Z0xvZ0V2ZW50KHtcbiAgICAgICAgICAgICAgICBraW5kOiAndGVtcGxhdGUgdXBkYXRpbmcnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlLFxuICAgICAgICAgICAgICAgIGluc3RhbmNlOiB0aGlzLl8kY29tbWl0dGVkVmFsdWUsXG4gICAgICAgICAgICAgICAgcGFydHM6IHRoaXMuXyRjb21taXR0ZWRWYWx1ZS5fcGFydHMsXG4gICAgICAgICAgICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgICAgIHZhbHVlcyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fJGNvbW1pdHRlZFZhbHVlLl91cGRhdGUodmFsdWVzKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGluc3RhbmNlID0gbmV3IFRlbXBsYXRlSW5zdGFuY2UodGVtcGxhdGUsIHRoaXMpO1xuICAgICAgICAgICAgY29uc3QgZnJhZ21lbnQgPSBpbnN0YW5jZS5fY2xvbmUodGhpcy5vcHRpb25zKTtcbiAgICAgICAgICAgIGRlYnVnTG9nRXZlbnQgPT09IG51bGwgfHwgZGVidWdMb2dFdmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVidWdMb2dFdmVudCh7XG4gICAgICAgICAgICAgICAga2luZDogJ3RlbXBsYXRlIGluc3RhbnRpYXRlZCcsXG4gICAgICAgICAgICAgICAgdGVtcGxhdGUsXG4gICAgICAgICAgICAgICAgaW5zdGFuY2UsXG4gICAgICAgICAgICAgICAgcGFydHM6IGluc3RhbmNlLl9wYXJ0cyxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICAgICAgZnJhZ21lbnQsXG4gICAgICAgICAgICAgICAgdmFsdWVzLFxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBpbnN0YW5jZS5fdXBkYXRlKHZhbHVlcyk7XG4gICAgICAgICAgICBkZWJ1Z0xvZ0V2ZW50ID09PSBudWxsIHx8IGRlYnVnTG9nRXZlbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlYnVnTG9nRXZlbnQoe1xuICAgICAgICAgICAgICAgIGtpbmQ6ICd0ZW1wbGF0ZSBpbnN0YW50aWF0ZWQgYW5kIHVwZGF0ZWQnLFxuICAgICAgICAgICAgICAgIHRlbXBsYXRlLFxuICAgICAgICAgICAgICAgIGluc3RhbmNlLFxuICAgICAgICAgICAgICAgIHBhcnRzOiBpbnN0YW5jZS5fcGFydHMsXG4gICAgICAgICAgICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zLFxuICAgICAgICAgICAgICAgIGZyYWdtZW50LFxuICAgICAgICAgICAgICAgIHZhbHVlcyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgdGhpcy5fY29tbWl0Tm9kZShmcmFnbWVudCk7XG4gICAgICAgICAgICB0aGlzLl8kY29tbWl0dGVkVmFsdWUgPSBpbnN0YW5jZTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBPdmVycmlkZGVuIHZpYSBgbGl0SHRtbFBvbHlmaWxsU3VwcG9ydGAgdG8gcHJvdmlkZSBwbGF0Zm9ybSBzdXBwb3J0LlxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBfJGdldFRlbXBsYXRlKHJlc3VsdCkge1xuICAgICAgICBsZXQgdGVtcGxhdGUgPSB0ZW1wbGF0ZUNhY2hlLmdldChyZXN1bHQuc3RyaW5ncyk7XG4gICAgICAgIGlmICh0ZW1wbGF0ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0ZW1wbGF0ZUNhY2hlLnNldChyZXN1bHQuc3RyaW5ncywgKHRlbXBsYXRlID0gbmV3IFRlbXBsYXRlKHJlc3VsdCkpKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGVtcGxhdGU7XG4gICAgfVxuICAgIF9jb21taXRJdGVyYWJsZSh2YWx1ZSkge1xuICAgICAgICAvLyBGb3IgYW4gSXRlcmFibGUsIHdlIGNyZWF0ZSBhIG5ldyBJbnN0YW5jZVBhcnQgcGVyIGl0ZW0sIHRoZW4gc2V0IGl0c1xuICAgICAgICAvLyB2YWx1ZSB0byB0aGUgaXRlbS4gVGhpcyBpcyBhIGxpdHRsZSBiaXQgb2Ygb3ZlcmhlYWQgZm9yIGV2ZXJ5IGl0ZW0gaW5cbiAgICAgICAgLy8gYW4gSXRlcmFibGUsIGJ1dCBpdCBsZXRzIHVzIHJlY3Vyc2UgZWFzaWx5IGFuZCBlZmZpY2llbnRseSB1cGRhdGUgQXJyYXlzXG4gICAgICAgIC8vIG9mIFRlbXBsYXRlUmVzdWx0cyB0aGF0IHdpbGwgYmUgY29tbW9ubHkgcmV0dXJuZWQgZnJvbSBleHByZXNzaW9ucyBsaWtlOlxuICAgICAgICAvLyBhcnJheS5tYXAoKGkpID0+IGh0bWxgJHtpfWApLCBieSByZXVzaW5nIGV4aXN0aW5nIFRlbXBsYXRlSW5zdGFuY2VzLlxuICAgICAgICAvLyBJZiB2YWx1ZSBpcyBhbiBhcnJheSwgdGhlbiB0aGUgcHJldmlvdXMgcmVuZGVyIHdhcyBvZiBhblxuICAgICAgICAvLyBpdGVyYWJsZSBhbmQgdmFsdWUgd2lsbCBjb250YWluIHRoZSBDaGlsZFBhcnRzIGZyb20gdGhlIHByZXZpb3VzXG4gICAgICAgIC8vIHJlbmRlci4gSWYgdmFsdWUgaXMgbm90IGFuIGFycmF5LCBjbGVhciB0aGlzIHBhcnQgYW5kIG1ha2UgYSBuZXdcbiAgICAgICAgLy8gYXJyYXkgZm9yIENoaWxkUGFydHMuXG4gICAgICAgIGlmICghaXNBcnJheSh0aGlzLl8kY29tbWl0dGVkVmFsdWUpKSB7XG4gICAgICAgICAgICB0aGlzLl8kY29tbWl0dGVkVmFsdWUgPSBbXTtcbiAgICAgICAgICAgIHRoaXMuXyRjbGVhcigpO1xuICAgICAgICB9XG4gICAgICAgIC8vIExldHMgdXMga2VlcCB0cmFjayBvZiBob3cgbWFueSBpdGVtcyB3ZSBzdGFtcGVkIHNvIHdlIGNhbiBjbGVhciBsZWZ0b3ZlclxuICAgICAgICAvLyBpdGVtcyBmcm9tIGEgcHJldmlvdXMgcmVuZGVyXG4gICAgICAgIGNvbnN0IGl0ZW1QYXJ0cyA9IHRoaXMuXyRjb21taXR0ZWRWYWx1ZTtcbiAgICAgICAgbGV0IHBhcnRJbmRleCA9IDA7XG4gICAgICAgIGxldCBpdGVtUGFydDtcbiAgICAgICAgZm9yIChjb25zdCBpdGVtIG9mIHZhbHVlKSB7XG4gICAgICAgICAgICBpZiAocGFydEluZGV4ID09PSBpdGVtUGFydHMubGVuZ3RoKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgbm8gZXhpc3RpbmcgcGFydCwgY3JlYXRlIGEgbmV3IG9uZVxuICAgICAgICAgICAgICAgIC8vIFRPRE8gKGp1c3RpbmZhZ25hbmkpOiB0ZXN0IHBlcmYgaW1wYWN0IG9mIGFsd2F5cyBjcmVhdGluZyB0d28gcGFydHNcbiAgICAgICAgICAgICAgICAvLyBpbnN0ZWFkIG9mIHNoYXJpbmcgcGFydHMgYmV0d2VlbiBub2Rlc1xuICAgICAgICAgICAgICAgIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9saXQvbGl0L2lzc3Vlcy8xMjY2XG4gICAgICAgICAgICAgICAgaXRlbVBhcnRzLnB1c2goKGl0ZW1QYXJ0ID0gbmV3IENoaWxkUGFydCh0aGlzLl9pbnNlcnQoY3JlYXRlTWFya2VyKCkpLCB0aGlzLl9pbnNlcnQoY3JlYXRlTWFya2VyKCkpLCB0aGlzLCB0aGlzLm9wdGlvbnMpKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBSZXVzZSBhbiBleGlzdGluZyBwYXJ0XG4gICAgICAgICAgICAgICAgaXRlbVBhcnQgPSBpdGVtUGFydHNbcGFydEluZGV4XTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGl0ZW1QYXJ0Ll8kc2V0VmFsdWUoaXRlbSk7XG4gICAgICAgICAgICBwYXJ0SW5kZXgrKztcbiAgICAgICAgfVxuICAgICAgICBpZiAocGFydEluZGV4IDwgaXRlbVBhcnRzLmxlbmd0aCkge1xuICAgICAgICAgICAgLy8gaXRlbVBhcnRzIGFsd2F5cyBoYXZlIGVuZCBub2Rlc1xuICAgICAgICAgICAgdGhpcy5fJGNsZWFyKGl0ZW1QYXJ0ICYmIHdyYXAoaXRlbVBhcnQuXyRlbmROb2RlKS5uZXh0U2libGluZywgcGFydEluZGV4KTtcbiAgICAgICAgICAgIC8vIFRydW5jYXRlIHRoZSBwYXJ0cyBhcnJheSBzbyBfdmFsdWUgcmVmbGVjdHMgdGhlIGN1cnJlbnQgc3RhdGVcbiAgICAgICAgICAgIGl0ZW1QYXJ0cy5sZW5ndGggPSBwYXJ0SW5kZXg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogUmVtb3ZlcyB0aGUgbm9kZXMgY29udGFpbmVkIHdpdGhpbiB0aGlzIFBhcnQgZnJvbSB0aGUgRE9NLlxuICAgICAqXG4gICAgICogQHBhcmFtIHN0YXJ0IFN0YXJ0IG5vZGUgdG8gY2xlYXIgZnJvbSwgZm9yIGNsZWFyaW5nIGEgc3Vic2V0IG9mIHRoZSBwYXJ0J3NcbiAgICAgKiAgICAgRE9NICh1c2VkIHdoZW4gdHJ1bmNhdGluZyBpdGVyYWJsZXMpXG4gICAgICogQHBhcmFtIGZyb20gIFdoZW4gYHN0YXJ0YCBpcyBzcGVjaWZpZWQsIHRoZSBpbmRleCB3aXRoaW4gdGhlIGl0ZXJhYmxlIGZyb21cbiAgICAgKiAgICAgd2hpY2ggQ2hpbGRQYXJ0cyBhcmUgYmVpbmcgcmVtb3ZlZCwgdXNlZCBmb3IgZGlzY29ubmVjdGluZyBkaXJlY3RpdmVzIGluXG4gICAgICogICAgIHRob3NlIFBhcnRzLlxuICAgICAqXG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgXyRjbGVhcihzdGFydCA9IHdyYXAodGhpcy5fJHN0YXJ0Tm9kZSkubmV4dFNpYmxpbmcsIGZyb20pIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAoX2EgPSB0aGlzLl8kbm90aWZ5Q29ubmVjdGlvbkNoYW5nZWQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRoaXMsIGZhbHNlLCB0cnVlLCBmcm9tKTtcbiAgICAgICAgd2hpbGUgKHN0YXJ0ICYmIHN0YXJ0ICE9PSB0aGlzLl8kZW5kTm9kZSkge1xuICAgICAgICAgICAgY29uc3QgbiA9IHdyYXAoc3RhcnQpLm5leHRTaWJsaW5nO1xuICAgICAgICAgICAgd3JhcChzdGFydCkucmVtb3ZlKCk7XG4gICAgICAgICAgICBzdGFydCA9IG47XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogSW1wbGVtZW50YXRpb24gb2YgUm9vdFBhcnQncyBgaXNDb25uZWN0ZWRgLiBOb3RlIHRoYXQgdGhpcyBtZXRvZFxuICAgICAqIHNob3VsZCBvbmx5IGJlIGNhbGxlZCBvbiBgUm9vdFBhcnRgcyAodGhlIGBDaGlsZFBhcnRgIHJldHVybmVkIGZyb20gYVxuICAgICAqIHRvcC1sZXZlbCBgcmVuZGVyKClgIGNhbGwpLiBJdCBoYXMgbm8gZWZmZWN0IG9uIG5vbi1yb290IENoaWxkUGFydHMuXG4gICAgICogQHBhcmFtIGlzQ29ubmVjdGVkIFdoZXRoZXIgdG8gc2V0XG4gICAgICogQGludGVybmFsXG4gICAgICovXG4gICAgc2V0Q29ubmVjdGVkKGlzQ29ubmVjdGVkKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHRoaXMuXyRwYXJlbnQgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgdGhpcy5fX2lzQ29ubmVjdGVkID0gaXNDb25uZWN0ZWQ7XG4gICAgICAgICAgICAoX2EgPSB0aGlzLl8kbm90aWZ5Q29ubmVjdGlvbkNoYW5nZWQpID09PSBudWxsIHx8IF9hID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfYS5jYWxsKHRoaXMsIGlzQ29ubmVjdGVkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChERVZfTU9ERSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdwYXJ0LnNldENvbm5lY3RlZCgpIG1heSBvbmx5IGJlIGNhbGxlZCBvbiBhICcgK1xuICAgICAgICAgICAgICAgICdSb290UGFydCByZXR1cm5lZCBmcm9tIHJlbmRlcigpLicpO1xuICAgICAgICB9XG4gICAgfVxufVxuY2xhc3MgQXR0cmlidXRlUGFydCB7XG4gICAgY29uc3RydWN0b3IoZWxlbWVudCwgbmFtZSwgc3RyaW5ncywgcGFyZW50LCBvcHRpb25zKSB7XG4gICAgICAgIHRoaXMudHlwZSA9IEFUVFJJQlVURV9QQVJUO1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIHRoaXMuXyRjb21taXR0ZWRWYWx1ZSA9IG5vdGhpbmc7XG4gICAgICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICAgICAgdGhpcy5fJGRpc2Nvbm5lY3RhYmxlQ2hpbGRyZW4gPSB1bmRlZmluZWQ7XG4gICAgICAgIHRoaXMuZWxlbWVudCA9IGVsZW1lbnQ7XG4gICAgICAgIHRoaXMubmFtZSA9IG5hbWU7XG4gICAgICAgIHRoaXMuXyRwYXJlbnQgPSBwYXJlbnQ7XG4gICAgICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgICAgIGlmIChzdHJpbmdzLmxlbmd0aCA+IDIgfHwgc3RyaW5nc1swXSAhPT0gJycgfHwgc3RyaW5nc1sxXSAhPT0gJycpIHtcbiAgICAgICAgICAgIHRoaXMuXyRjb21taXR0ZWRWYWx1ZSA9IG5ldyBBcnJheShzdHJpbmdzLmxlbmd0aCAtIDEpLmZpbGwobmV3IFN0cmluZygpKTtcbiAgICAgICAgICAgIHRoaXMuc3RyaW5ncyA9IHN0cmluZ3M7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLl8kY29tbWl0dGVkVmFsdWUgPSBub3RoaW5nO1xuICAgICAgICB9XG4gICAgICAgIGlmIChFTkFCTEVfRVhUUkFfU0VDVVJJVFlfSE9PS1MpIHtcbiAgICAgICAgICAgIHRoaXMuX3Nhbml0aXplciA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgIH1cbiAgICBnZXQgdGFnTmFtZSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZWxlbWVudC50YWdOYW1lO1xuICAgIH1cbiAgICAvLyBTZWUgY29tbWVudCBpbiBEaXNjb25uZWN0YWJsZSBpbnRlcmZhY2UgZm9yIHdoeSB0aGlzIGlzIGEgZ2V0dGVyXG4gICAgZ2V0IF8kaXNDb25uZWN0ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl8kcGFyZW50Ll8kaXNDb25uZWN0ZWQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHZhbHVlIG9mIHRoaXMgcGFydCBieSByZXNvbHZpbmcgdGhlIHZhbHVlIGZyb20gcG9zc2libHkgbXVsdGlwbGVcbiAgICAgKiB2YWx1ZXMgYW5kIHN0YXRpYyBzdHJpbmdzIGFuZCBjb21taXR0aW5nIGl0IHRvIHRoZSBET00uXG4gICAgICogSWYgdGhpcyBwYXJ0IGlzIHNpbmdsZS12YWx1ZWQsIGB0aGlzLl9zdHJpbmdzYCB3aWxsIGJlIHVuZGVmaW5lZCwgYW5kIHRoZVxuICAgICAqIG1ldGhvZCB3aWxsIGJlIGNhbGxlZCB3aXRoIGEgc2luZ2xlIHZhbHVlIGFyZ3VtZW50LiBJZiB0aGlzIHBhcnQgaXNcbiAgICAgKiBtdWx0aS12YWx1ZSwgYHRoaXMuX3N0cmluZ3NgIHdpbGwgYmUgZGVmaW5lZCwgYW5kIHRoZSBtZXRob2QgaXMgY2FsbGVkXG4gICAgICogd2l0aCB0aGUgdmFsdWUgYXJyYXkgb2YgdGhlIHBhcnQncyBvd25pbmcgVGVtcGxhdGVJbnN0YW5jZSwgYW5kIGFuIG9mZnNldFxuICAgICAqIGludG8gdGhlIHZhbHVlIGFycmF5IGZyb20gd2hpY2ggdGhlIHZhbHVlcyBzaG91bGQgYmUgcmVhZC5cbiAgICAgKiBUaGlzIG1ldGhvZCBpcyBvdmVybG9hZGVkIHRoaXMgd2F5IHRvIGVsaW1pbmF0ZSBzaG9ydC1saXZlZCBhcnJheSBzbGljZXNcbiAgICAgKiBvZiB0aGUgdGVtcGxhdGUgaW5zdGFuY2UgdmFsdWVzLCBhbmQgYWxsb3cgYSBmYXN0LXBhdGggZm9yIHNpbmdsZS12YWx1ZWRcbiAgICAgKiBwYXJ0cy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZSBUaGUgcGFydCB2YWx1ZSwgb3IgYW4gYXJyYXkgb2YgdmFsdWVzIGZvciBtdWx0aS12YWx1ZWQgcGFydHNcbiAgICAgKiBAcGFyYW0gdmFsdWVJbmRleCB0aGUgaW5kZXggdG8gc3RhcnQgcmVhZGluZyB2YWx1ZXMgZnJvbS4gYHVuZGVmaW5lZGAgZm9yXG4gICAgICogICBzaW5nbGUtdmFsdWVkIHBhcnRzXG4gICAgICogQHBhcmFtIG5vQ29tbWl0IGNhdXNlcyB0aGUgcGFydCB0byBub3QgY29tbWl0IGl0cyB2YWx1ZSB0byB0aGUgRE9NLiBVc2VkXG4gICAgICogICBpbiBoeWRyYXRpb24gdG8gcHJpbWUgYXR0cmlidXRlIHBhcnRzIHdpdGggdGhlaXIgZmlyc3QtcmVuZGVyZWQgdmFsdWUsXG4gICAgICogICBidXQgbm90IHNldCB0aGUgYXR0cmlidXRlLCBhbmQgaW4gU1NSIHRvIG5vLW9wIHRoZSBET00gb3BlcmF0aW9uIGFuZFxuICAgICAqICAgY2FwdHVyZSB0aGUgdmFsdWUgZm9yIHNlcmlhbGl6YXRpb24uXG4gICAgICpcbiAgICAgKiBAaW50ZXJuYWxcbiAgICAgKi9cbiAgICBfJHNldFZhbHVlKHZhbHVlLCBkaXJlY3RpdmVQYXJlbnQgPSB0aGlzLCB2YWx1ZUluZGV4LCBub0NvbW1pdCkge1xuICAgICAgICBjb25zdCBzdHJpbmdzID0gdGhpcy5zdHJpbmdzO1xuICAgICAgICAvLyBXaGV0aGVyIGFueSBvZiB0aGUgdmFsdWVzIGhhcyBjaGFuZ2VkLCBmb3IgZGlydHktY2hlY2tpbmdcbiAgICAgICAgbGV0IGNoYW5nZSA9IGZhbHNlO1xuICAgICAgICBpZiAoc3RyaW5ncyA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICAvLyBTaW5nbGUtdmFsdWUgYmluZGluZyBjYXNlXG4gICAgICAgICAgICB2YWx1ZSA9IHJlc29sdmVEaXJlY3RpdmUodGhpcywgdmFsdWUsIGRpcmVjdGl2ZVBhcmVudCwgMCk7XG4gICAgICAgICAgICBjaGFuZ2UgPVxuICAgICAgICAgICAgICAgICFpc1ByaW1pdGl2ZSh2YWx1ZSkgfHxcbiAgICAgICAgICAgICAgICAgICAgKHZhbHVlICE9PSB0aGlzLl8kY29tbWl0dGVkVmFsdWUgJiYgdmFsdWUgIT09IG5vQ2hhbmdlKTtcbiAgICAgICAgICAgIGlmIChjaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLl8kY29tbWl0dGVkVmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIEludGVycG9sYXRpb24gY2FzZVxuICAgICAgICAgICAgY29uc3QgdmFsdWVzID0gdmFsdWU7XG4gICAgICAgICAgICB2YWx1ZSA9IHN0cmluZ3NbMF07XG4gICAgICAgICAgICBsZXQgaSwgdjtcbiAgICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBzdHJpbmdzLmxlbmd0aCAtIDE7IGkrKykge1xuICAgICAgICAgICAgICAgIHYgPSByZXNvbHZlRGlyZWN0aXZlKHRoaXMsIHZhbHVlc1t2YWx1ZUluZGV4ICsgaV0sIGRpcmVjdGl2ZVBhcmVudCwgaSk7XG4gICAgICAgICAgICAgICAgaWYgKHYgPT09IG5vQ2hhbmdlKSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIElmIHRoZSB1c2VyLXByb3ZpZGVkIHZhbHVlIGlzIGBub0NoYW5nZWAsIHVzZSB0aGUgcHJldmlvdXMgdmFsdWVcbiAgICAgICAgICAgICAgICAgICAgdiA9IHRoaXMuXyRjb21taXR0ZWRWYWx1ZVtpXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgY2hhbmdlIHx8IChjaGFuZ2UgPSAhaXNQcmltaXRpdmUodikgfHwgdiAhPT0gdGhpcy5fJGNvbW1pdHRlZFZhbHVlW2ldKTtcbiAgICAgICAgICAgICAgICBpZiAodiA9PT0gbm90aGluZykge1xuICAgICAgICAgICAgICAgICAgICB2YWx1ZSA9IG5vdGhpbmc7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGVsc2UgaWYgKHZhbHVlICE9PSBub3RoaW5nKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhbHVlICs9ICh2ICE9PSBudWxsICYmIHYgIT09IHZvaWQgMCA/IHYgOiAnJykgKyBzdHJpbmdzW2kgKyAxXTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gV2UgYWx3YXlzIHJlY29yZCBlYWNoIHZhbHVlLCBldmVuIGlmIG9uZSBpcyBgbm90aGluZ2AsIGZvciBmdXR1cmVcbiAgICAgICAgICAgICAgICAvLyBjaGFuZ2UgZGV0ZWN0aW9uLlxuICAgICAgICAgICAgICAgIHRoaXMuXyRjb21taXR0ZWRWYWx1ZVtpXSA9IHY7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNoYW5nZSAmJiAhbm9Db21taXQpIHtcbiAgICAgICAgICAgIHRoaXMuX2NvbW1pdFZhbHVlKHZhbHVlKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgX2NvbW1pdFZhbHVlKHZhbHVlKSB7XG4gICAgICAgIGlmICh2YWx1ZSA9PT0gbm90aGluZykge1xuICAgICAgICAgICAgd3JhcCh0aGlzLmVsZW1lbnQpLnJlbW92ZUF0dHJpYnV0ZSh0aGlzLm5hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgaWYgKEVOQUJMRV9FWFRSQV9TRUNVUklUWV9IT09LUykge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLl9zYW5pdGl6ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLl9zYW5pdGl6ZXIgPSBzYW5pdGl6ZXJGYWN0b3J5SW50ZXJuYWwodGhpcy5lbGVtZW50LCB0aGlzLm5hbWUsICdhdHRyaWJ1dGUnKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFsdWUgPSB0aGlzLl9zYW5pdGl6ZXIodmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHZvaWQgMCA/IHZhbHVlIDogJycpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZGVidWdMb2dFdmVudCA9PT0gbnVsbCB8fCBkZWJ1Z0xvZ0V2ZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWJ1Z0xvZ0V2ZW50KHtcbiAgICAgICAgICAgICAgICBraW5kOiAnY29tbWl0IGF0dHJpYnV0ZScsXG4gICAgICAgICAgICAgICAgZWxlbWVudDogdGhpcy5lbGVtZW50LFxuICAgICAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgICAgICAgICB2YWx1ZSxcbiAgICAgICAgICAgICAgICBvcHRpb25zOiB0aGlzLm9wdGlvbnMsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHdyYXAodGhpcy5lbGVtZW50KS5zZXRBdHRyaWJ1dGUodGhpcy5uYW1lLCAodmFsdWUgIT09IG51bGwgJiYgdmFsdWUgIT09IHZvaWQgMCA/IHZhbHVlIDogJycpKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmNsYXNzIFByb3BlcnR5UGFydCBleHRlbmRzIEF0dHJpYnV0ZVBhcnQge1xuICAgIGNvbnN0cnVjdG9yKCkge1xuICAgICAgICBzdXBlciguLi5hcmd1bWVudHMpO1xuICAgICAgICB0aGlzLnR5cGUgPSBQUk9QRVJUWV9QQVJUO1xuICAgIH1cbiAgICAvKiogQGludGVybmFsICovXG4gICAgX2NvbW1pdFZhbHVlKHZhbHVlKSB7XG4gICAgICAgIGlmIChFTkFCTEVfRVhUUkFfU0VDVVJJVFlfSE9PS1MpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLl9zYW5pdGl6ZXIgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuX3Nhbml0aXplciA9IHNhbml0aXplckZhY3RvcnlJbnRlcm5hbCh0aGlzLmVsZW1lbnQsIHRoaXMubmFtZSwgJ3Byb3BlcnR5Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB2YWx1ZSA9IHRoaXMuX3Nhbml0aXplcih2YWx1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgZGVidWdMb2dFdmVudCA9PT0gbnVsbCB8fCBkZWJ1Z0xvZ0V2ZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWJ1Z0xvZ0V2ZW50KHtcbiAgICAgICAgICAgIGtpbmQ6ICdjb21taXQgcHJvcGVydHknLFxuICAgICAgICAgICAgZWxlbWVudDogdGhpcy5lbGVtZW50LFxuICAgICAgICAgICAgbmFtZTogdGhpcy5uYW1lLFxuICAgICAgICAgICAgdmFsdWUsXG4gICAgICAgICAgICBvcHRpb25zOiB0aGlzLm9wdGlvbnMsXG4gICAgICAgIH0pO1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICB0aGlzLmVsZW1lbnRbdGhpcy5uYW1lXSA9IHZhbHVlID09PSBub3RoaW5nID8gdW5kZWZpbmVkIDogdmFsdWU7XG4gICAgfVxufVxuLy8gVGVtcG9yYXJ5IHdvcmthcm91bmQgZm9yIGh0dHBzOi8vY3JidWcuY29tLzk5MzI2OFxuLy8gQ3VycmVudGx5LCBhbnkgYXR0cmlidXRlIHN0YXJ0aW5nIHdpdGggXCJvblwiIGlzIGNvbnNpZGVyZWQgdG8gYmUgYVxuLy8gVHJ1c3RlZFNjcmlwdCBzb3VyY2UuIFN1Y2ggYm9vbGVhbiBhdHRyaWJ1dGVzIG11c3QgYmUgc2V0IHRvIHRoZSBlcXVpdmFsZW50XG4vLyB0cnVzdGVkIGVtcHR5U2NyaXB0IHZhbHVlLlxuY29uc3QgZW1wdHlTdHJpbmdGb3JCb29sZWFuQXR0cmlidXRlID0gdHJ1c3RlZFR5cGVzXG4gICAgPyB0cnVzdGVkVHlwZXMuZW1wdHlTY3JpcHRcbiAgICA6ICcnO1xuY2xhc3MgQm9vbGVhbkF0dHJpYnV0ZVBhcnQgZXh0ZW5kcyBBdHRyaWJ1dGVQYXJ0IHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoLi4uYXJndW1lbnRzKTtcbiAgICAgICAgdGhpcy50eXBlID0gQk9PTEVBTl9BVFRSSUJVVEVfUEFSVDtcbiAgICB9XG4gICAgLyoqIEBpbnRlcm5hbCAqL1xuICAgIF9jb21taXRWYWx1ZSh2YWx1ZSkge1xuICAgICAgICBkZWJ1Z0xvZ0V2ZW50ID09PSBudWxsIHx8IGRlYnVnTG9nRXZlbnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IGRlYnVnTG9nRXZlbnQoe1xuICAgICAgICAgICAga2luZDogJ2NvbW1pdCBib29sZWFuIGF0dHJpYnV0ZScsXG4gICAgICAgICAgICBlbGVtZW50OiB0aGlzLmVsZW1lbnQsXG4gICAgICAgICAgICBuYW1lOiB0aGlzLm5hbWUsXG4gICAgICAgICAgICB2YWx1ZTogISEodmFsdWUgJiYgdmFsdWUgIT09IG5vdGhpbmcpLFxuICAgICAgICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHZhbHVlICYmIHZhbHVlICE9PSBub3RoaW5nKSB7XG4gICAgICAgICAgICB3cmFwKHRoaXMuZWxlbWVudCkuc2V0QXR0cmlidXRlKHRoaXMubmFtZSwgZW1wdHlTdHJpbmdGb3JCb29sZWFuQXR0cmlidXRlKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHdyYXAodGhpcy5lbGVtZW50KS5yZW1vdmVBdHRyaWJ1dGUodGhpcy5uYW1lKTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmNsYXNzIEV2ZW50UGFydCBleHRlbmRzIEF0dHJpYnV0ZVBhcnQge1xuICAgIGNvbnN0cnVjdG9yKGVsZW1lbnQsIG5hbWUsIHN0cmluZ3MsIHBhcmVudCwgb3B0aW9ucykge1xuICAgICAgICBzdXBlcihlbGVtZW50LCBuYW1lLCBzdHJpbmdzLCBwYXJlbnQsIG9wdGlvbnMpO1xuICAgICAgICB0aGlzLnR5cGUgPSBFVkVOVF9QQVJUO1xuICAgICAgICBpZiAoREVWX01PREUgJiYgdGhpcy5zdHJpbmdzICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgQSBcXGA8JHtlbGVtZW50LmxvY2FsTmFtZX0+XFxgIGhhcyBhIFxcYEAke25hbWV9PS4uLlxcYCBsaXN0ZW5lciB3aXRoIGAgK1xuICAgICAgICAgICAgICAgICdpbnZhbGlkIGNvbnRlbnQuIEV2ZW50IGxpc3RlbmVycyBpbiB0ZW1wbGF0ZXMgbXVzdCBoYXZlIGV4YWN0bHkgJyArXG4gICAgICAgICAgICAgICAgJ29uZSBleHByZXNzaW9uIGFuZCBubyBzdXJyb3VuZGluZyB0ZXh0LicpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8vIEV2ZW50UGFydCBkb2VzIG5vdCB1c2UgdGhlIGJhc2UgXyRzZXRWYWx1ZS9fcmVzb2x2ZVZhbHVlIGltcGxlbWVudGF0aW9uXG4gICAgLy8gc2luY2UgdGhlIGRpcnR5IGNoZWNraW5nIGlzIG1vcmUgY29tcGxleFxuICAgIC8qKiBAaW50ZXJuYWwgKi9cbiAgICBfJHNldFZhbHVlKG5ld0xpc3RlbmVyLCBkaXJlY3RpdmVQYXJlbnQgPSB0aGlzKSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgbmV3TGlzdGVuZXIgPVxuICAgICAgICAgICAgKF9hID0gcmVzb2x2ZURpcmVjdGl2ZSh0aGlzLCBuZXdMaXN0ZW5lciwgZGlyZWN0aXZlUGFyZW50LCAwKSkgIT09IG51bGwgJiYgX2EgIT09IHZvaWQgMCA/IF9hIDogbm90aGluZztcbiAgICAgICAgaWYgKG5ld0xpc3RlbmVyID09PSBub0NoYW5nZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNvbnN0IG9sZExpc3RlbmVyID0gdGhpcy5fJGNvbW1pdHRlZFZhbHVlO1xuICAgICAgICAvLyBJZiB0aGUgbmV3IHZhbHVlIGlzIG5vdGhpbmcgb3IgYW55IG9wdGlvbnMgY2hhbmdlIHdlIGhhdmUgdG8gcmVtb3ZlIHRoZVxuICAgICAgICAvLyBwYXJ0IGFzIGEgbGlzdGVuZXIuXG4gICAgICAgIGNvbnN0IHNob3VsZFJlbW92ZUxpc3RlbmVyID0gKG5ld0xpc3RlbmVyID09PSBub3RoaW5nICYmIG9sZExpc3RlbmVyICE9PSBub3RoaW5nKSB8fFxuICAgICAgICAgICAgbmV3TGlzdGVuZXIuY2FwdHVyZSAhPT1cbiAgICAgICAgICAgICAgICBvbGRMaXN0ZW5lci5jYXB0dXJlIHx8XG4gICAgICAgICAgICBuZXdMaXN0ZW5lci5vbmNlICE9PVxuICAgICAgICAgICAgICAgIG9sZExpc3RlbmVyLm9uY2UgfHxcbiAgICAgICAgICAgIG5ld0xpc3RlbmVyLnBhc3NpdmUgIT09XG4gICAgICAgICAgICAgICAgb2xkTGlzdGVuZXIucGFzc2l2ZTtcbiAgICAgICAgLy8gSWYgdGhlIG5ldyB2YWx1ZSBpcyBub3Qgbm90aGluZyBhbmQgd2UgcmVtb3ZlZCB0aGUgbGlzdGVuZXIsIHdlIGhhdmVcbiAgICAgICAgLy8gdG8gYWRkIHRoZSBwYXJ0IGFzIGEgbGlzdGVuZXIuXG4gICAgICAgIGNvbnN0IHNob3VsZEFkZExpc3RlbmVyID0gbmV3TGlzdGVuZXIgIT09IG5vdGhpbmcgJiZcbiAgICAgICAgICAgIChvbGRMaXN0ZW5lciA9PT0gbm90aGluZyB8fCBzaG91bGRSZW1vdmVMaXN0ZW5lcik7XG4gICAgICAgIGRlYnVnTG9nRXZlbnQgPT09IG51bGwgfHwgZGVidWdMb2dFdmVudCA9PT0gdm9pZCAwID8gdm9pZCAwIDogZGVidWdMb2dFdmVudCh7XG4gICAgICAgICAgICBraW5kOiAnY29tbWl0IGV2ZW50IGxpc3RlbmVyJyxcbiAgICAgICAgICAgIGVsZW1lbnQ6IHRoaXMuZWxlbWVudCxcbiAgICAgICAgICAgIG5hbWU6IHRoaXMubmFtZSxcbiAgICAgICAgICAgIHZhbHVlOiBuZXdMaXN0ZW5lcixcbiAgICAgICAgICAgIG9wdGlvbnM6IHRoaXMub3B0aW9ucyxcbiAgICAgICAgICAgIHJlbW92ZUxpc3RlbmVyOiBzaG91bGRSZW1vdmVMaXN0ZW5lcixcbiAgICAgICAgICAgIGFkZExpc3RlbmVyOiBzaG91bGRBZGRMaXN0ZW5lcixcbiAgICAgICAgICAgIG9sZExpc3RlbmVyLFxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKHNob3VsZFJlbW92ZUxpc3RlbmVyKSB7XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0aGlzLm5hbWUsIHRoaXMsIG9sZExpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoc2hvdWxkQWRkTGlzdGVuZXIpIHtcbiAgICAgICAgICAgIC8vIEJld2FyZTogSUUxMSBhbmQgQ2hyb21lIDQxIGRvbid0IGxpa2UgdXNpbmcgdGhlIGxpc3RlbmVyIGFzIHRoZVxuICAgICAgICAgICAgLy8gb3B0aW9ucyBvYmplY3QuIEZpZ3VyZSBvdXQgaG93IHRvIGRlYWwgdy8gdGhpcyBpbiBJRTExIC0gbWF5YmVcbiAgICAgICAgICAgIC8vIHBhdGNoIGFkZEV2ZW50TGlzdGVuZXI/XG4gICAgICAgICAgICB0aGlzLmVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcih0aGlzLm5hbWUsIHRoaXMsIG5ld0xpc3RlbmVyKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLl8kY29tbWl0dGVkVmFsdWUgPSBuZXdMaXN0ZW5lcjtcbiAgICB9XG4gICAgaGFuZGxlRXZlbnQoZXZlbnQpIHtcbiAgICAgICAgdmFyIF9hLCBfYjtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLl8kY29tbWl0dGVkVmFsdWUgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIHRoaXMuXyRjb21taXR0ZWRWYWx1ZS5jYWxsKChfYiA9IChfYSA9IHRoaXMub3B0aW9ucykgPT09IG51bGwgfHwgX2EgPT09IHZvaWQgMCA/IHZvaWQgMCA6IF9hLmhvc3QpICE9PSBudWxsICYmIF9iICE9PSB2b2lkIDAgPyBfYiA6IHRoaXMuZWxlbWVudCwgZXZlbnQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5fJGNvbW1pdHRlZFZhbHVlLmhhbmRsZUV2ZW50KGV2ZW50KTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmNsYXNzIEVsZW1lbnRQYXJ0IHtcbiAgICBjb25zdHJ1Y3RvcihlbGVtZW50LCBwYXJlbnQsIG9wdGlvbnMpIHtcbiAgICAgICAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgICAgICAgdGhpcy50eXBlID0gRUxFTUVOVF9QQVJUO1xuICAgICAgICAvKiogQGludGVybmFsICovXG4gICAgICAgIHRoaXMuXyRkaXNjb25uZWN0YWJsZUNoaWxkcmVuID0gdW5kZWZpbmVkO1xuICAgICAgICB0aGlzLl8kcGFyZW50ID0gcGFyZW50O1xuICAgICAgICB0aGlzLm9wdGlvbnMgPSBvcHRpb25zO1xuICAgIH1cbiAgICAvLyBTZWUgY29tbWVudCBpbiBEaXNjb25uZWN0YWJsZSBpbnRlcmZhY2UgZm9yIHdoeSB0aGlzIGlzIGEgZ2V0dGVyXG4gICAgZ2V0IF8kaXNDb25uZWN0ZWQoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLl8kcGFyZW50Ll8kaXNDb25uZWN0ZWQ7XG4gICAgfVxuICAgIF8kc2V0VmFsdWUodmFsdWUpIHtcbiAgICAgICAgZGVidWdMb2dFdmVudCA9PT0gbnVsbCB8fCBkZWJ1Z0xvZ0V2ZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWJ1Z0xvZ0V2ZW50KHtcbiAgICAgICAgICAgIGtpbmQ6ICdjb21taXQgdG8gZWxlbWVudCBiaW5kaW5nJyxcbiAgICAgICAgICAgIGVsZW1lbnQ6IHRoaXMuZWxlbWVudCxcbiAgICAgICAgICAgIHZhbHVlLFxuICAgICAgICAgICAgb3B0aW9uczogdGhpcy5vcHRpb25zLFxuICAgICAgICB9KTtcbiAgICAgICAgcmVzb2x2ZURpcmVjdGl2ZSh0aGlzLCB2YWx1ZSk7XG4gICAgfVxufVxuLyoqXG4gKiBFTkQgVVNFUlMgU0hPVUxEIE5PVCBSRUxZIE9OIFRISVMgT0JKRUNULlxuICpcbiAqIFByaXZhdGUgZXhwb3J0cyBmb3IgdXNlIGJ5IG90aGVyIExpdCBwYWNrYWdlcywgbm90IGludGVuZGVkIGZvciB1c2UgYnlcbiAqIGV4dGVybmFsIHVzZXJzLlxuICpcbiAqIFdlIGN1cnJlbnRseSBkbyBub3QgbWFrZSBhIG1hbmdsZWQgcm9sbHVwIGJ1aWxkIG9mIHRoZSBsaXQtc3NyIGNvZGUuIEluIG9yZGVyXG4gKiB0byBrZWVwIGEgbnVtYmVyIG9mIChvdGhlcndpc2UgcHJpdmF0ZSkgdG9wLWxldmVsIGV4cG9ydHMgIG1hbmdsZWQgaW4gdGhlXG4gKiBjbGllbnQgc2lkZSBjb2RlLCB3ZSBleHBvcnQgYSBfJExIIG9iamVjdCBjb250YWluaW5nIHRob3NlIG1lbWJlcnMgKG9yXG4gKiBoZWxwZXIgbWV0aG9kcyBmb3IgYWNjZXNzaW5nIHByaXZhdGUgZmllbGRzIG9mIHRob3NlIG1lbWJlcnMpLCBhbmQgdGhlblxuICogcmUtZXhwb3J0IHRoZW0gZm9yIHVzZSBpbiBsaXQtc3NyLiBUaGlzIGtlZXBzIGxpdC1zc3IgYWdub3N0aWMgdG8gd2hldGhlciB0aGVcbiAqIGNsaWVudC1zaWRlIGNvZGUgaXMgYmVpbmcgdXNlZCBpbiBgZGV2YCBtb2RlIG9yIGBwcm9kYCBtb2RlLlxuICpcbiAqIFRoaXMgaGFzIGEgdW5pcXVlIG5hbWUsIHRvIGRpc2FtYmlndWF0ZSBpdCBmcm9tIHByaXZhdGUgZXhwb3J0cyBpblxuICogbGl0LWVsZW1lbnQsIHdoaWNoIHJlLWV4cG9ydHMgYWxsIG9mIGxpdC1odG1sLlxuICpcbiAqIEBwcml2YXRlXG4gKi9cbmV4cG9ydCBjb25zdCBfJExIID0ge1xuICAgIC8vIFVzZWQgaW4gbGl0LXNzclxuICAgIF9ib3VuZEF0dHJpYnV0ZVN1ZmZpeDogYm91bmRBdHRyaWJ1dGVTdWZmaXgsXG4gICAgX21hcmtlcjogbWFya2VyLFxuICAgIF9tYXJrZXJNYXRjaDogbWFya2VyTWF0Y2gsXG4gICAgX0hUTUxfUkVTVUxUOiBIVE1MX1JFU1VMVCxcbiAgICBfZ2V0VGVtcGxhdGVIdG1sOiBnZXRUZW1wbGF0ZUh0bWwsXG4gICAgLy8gVXNlZCBpbiBoeWRyYXRlXG4gICAgX1RlbXBsYXRlSW5zdGFuY2U6IFRlbXBsYXRlSW5zdGFuY2UsXG4gICAgX2lzSXRlcmFibGU6IGlzSXRlcmFibGUsXG4gICAgX3Jlc29sdmVEaXJlY3RpdmU6IHJlc29sdmVEaXJlY3RpdmUsXG4gICAgLy8gVXNlZCBpbiB0ZXN0cyBhbmQgcHJpdmF0ZS1zc3Itc3VwcG9ydFxuICAgIF9DaGlsZFBhcnQ6IENoaWxkUGFydCxcbiAgICBfQXR0cmlidXRlUGFydDogQXR0cmlidXRlUGFydCxcbiAgICBfQm9vbGVhbkF0dHJpYnV0ZVBhcnQ6IEJvb2xlYW5BdHRyaWJ1dGVQYXJ0LFxuICAgIF9FdmVudFBhcnQ6IEV2ZW50UGFydCxcbiAgICBfUHJvcGVydHlQYXJ0OiBQcm9wZXJ0eVBhcnQsXG4gICAgX0VsZW1lbnRQYXJ0OiBFbGVtZW50UGFydCxcbn07XG4vLyBBcHBseSBwb2x5ZmlsbHMgaWYgYXZhaWxhYmxlXG5jb25zdCBwb2x5ZmlsbFN1cHBvcnQgPSBERVZfTU9ERVxuICAgID8gZ2xvYmFsLmxpdEh0bWxQb2x5ZmlsbFN1cHBvcnREZXZNb2RlXG4gICAgOiBnbG9iYWwubGl0SHRtbFBvbHlmaWxsU3VwcG9ydDtcbnBvbHlmaWxsU3VwcG9ydCA9PT0gbnVsbCB8fCBwb2x5ZmlsbFN1cHBvcnQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHBvbHlmaWxsU3VwcG9ydChUZW1wbGF0ZSwgQ2hpbGRQYXJ0KTtcbi8vIElNUE9SVEFOVDogZG8gbm90IGNoYW5nZSB0aGUgcHJvcGVydHkgbmFtZSBvciB0aGUgYXNzaWdubWVudCBleHByZXNzaW9uLlxuLy8gVGhpcyBsaW5lIHdpbGwgYmUgdXNlZCBpbiByZWdleGVzIHRvIHNlYXJjaCBmb3IgbGl0LWh0bWwgdXNhZ2UuXG4oKF9kID0gZ2xvYmFsLmxpdEh0bWxWZXJzaW9ucykgIT09IG51bGwgJiYgX2QgIT09IHZvaWQgMCA/IF9kIDogKGdsb2JhbC5saXRIdG1sVmVyc2lvbnMgPSBbXSkpLnB1c2goJzIuNC4wJyk7XG5pZiAoREVWX01PREUgJiYgZ2xvYmFsLmxpdEh0bWxWZXJzaW9ucy5sZW5ndGggPiAxKSB7XG4gICAgaXNzdWVXYXJuaW5nKCdtdWx0aXBsZS12ZXJzaW9ucycsIGBNdWx0aXBsZSB2ZXJzaW9ucyBvZiBMaXQgbG9hZGVkLiBgICtcbiAgICAgICAgYExvYWRpbmcgbXVsdGlwbGUgdmVyc2lvbnMgaXMgbm90IHJlY29tbWVuZGVkLmApO1xufVxuLyoqXG4gKiBSZW5kZXJzIGEgdmFsdWUsIHVzdWFsbHkgYSBsaXQtaHRtbCBUZW1wbGF0ZVJlc3VsdCwgdG8gdGhlIGNvbnRhaW5lci5cbiAqXG4gKiBUaGlzIGV4YW1wbGUgcmVuZGVycyB0aGUgdGV4dCBcIkhlbGxvLCBab2UhXCIgaW5zaWRlIGEgcGFyYWdyYXBoIHRhZywgYXBwZW5kaW5nXG4gKiBpdCB0byB0aGUgY29udGFpbmVyIGBkb2N1bWVudC5ib2R5YC5cbiAqXG4gKiBgYGBqc1xuICogaW1wb3J0IHtodG1sLCByZW5kZXJ9IGZyb20gJ2xpdCc7XG4gKlxuICogY29uc3QgbmFtZSA9IFwiWm9lXCI7XG4gKiByZW5kZXIoaHRtbGA8cD5IZWxsbywgJHtuYW1lfSE8L3A+YCwgZG9jdW1lbnQuYm9keSk7XG4gKiBgYGBcbiAqXG4gKiBAcGFyYW0gdmFsdWUgQW55IFtyZW5kZXJhYmxlXG4gKiAgIHZhbHVlXShodHRwczovL2xpdC5kZXYvZG9jcy90ZW1wbGF0ZXMvZXhwcmVzc2lvbnMvI2NoaWxkLWV4cHJlc3Npb25zKSxcbiAqICAgdHlwaWNhbGx5IGEge0BsaW5rY29kZSBUZW1wbGF0ZVJlc3VsdH0gY3JlYXRlZCBieSBldmFsdWF0aW5nIGEgdGVtcGxhdGUgdGFnXG4gKiAgIGxpa2Uge0BsaW5rY29kZSBodG1sfSBvciB7QGxpbmtjb2RlIHN2Z30uXG4gKiBAcGFyYW0gY29udGFpbmVyIEEgRE9NIGNvbnRhaW5lciB0byByZW5kZXIgdG8uIFRoZSBmaXJzdCByZW5kZXIgd2lsbCBhcHBlbmRcbiAqICAgdGhlIHJlbmRlcmVkIHZhbHVlIHRvIHRoZSBjb250YWluZXIsIGFuZCBzdWJzZXF1ZW50IHJlbmRlcnMgd2lsbFxuICogICBlZmZpY2llbnRseSB1cGRhdGUgdGhlIHJlbmRlcmVkIHZhbHVlIGlmIHRoZSBzYW1lIHJlc3VsdCB0eXBlIHdhc1xuICogICBwcmV2aW91c2x5IHJlbmRlcmVkIHRoZXJlLlxuICogQHBhcmFtIG9wdGlvbnMgU2VlIHtAbGlua2NvZGUgUmVuZGVyT3B0aW9uc30gZm9yIG9wdGlvbnMgZG9jdW1lbnRhdGlvbi5cbiAqIEBzZWVcbiAqIHtAbGluayBodHRwczovL2xpdC5kZXYvZG9jcy9saWJyYXJpZXMvc3RhbmRhbG9uZS10ZW1wbGF0ZXMvI3JlbmRlcmluZy1saXQtaHRtbC10ZW1wbGF0ZXN8IFJlbmRlcmluZyBMaXQgSFRNTCBUZW1wbGF0ZXN9XG4gKi9cbmV4cG9ydCBjb25zdCByZW5kZXIgPSAodmFsdWUsIGNvbnRhaW5lciwgb3B0aW9ucykgPT4ge1xuICAgIHZhciBfYSwgX2I7XG4gICAgaWYgKERFVl9NT0RFICYmIGNvbnRhaW5lciA9PSBudWxsKSB7XG4gICAgICAgIC8vIEdpdmUgYSBjbGVhcmVyIGVycm9yIG1lc3NhZ2UgdGhhblxuICAgICAgICAvLyAgICAgVW5jYXVnaHQgVHlwZUVycm9yOiBDYW5ub3QgcmVhZCBwcm9wZXJ0aWVzIG9mIG51bGwgKHJlYWRpbmdcbiAgICAgICAgLy8gICAgICdfJGxpdFBhcnQkJylcbiAgICAgICAgLy8gd2hpY2ggcmVhZHMgbGlrZSBhbiBpbnRlcm5hbCBMaXQgZXJyb3IuXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoYFRoZSBjb250YWluZXIgdG8gcmVuZGVyIGludG8gbWF5IG5vdCBiZSAke2NvbnRhaW5lcn1gKTtcbiAgICB9XG4gICAgY29uc3QgcmVuZGVySWQgPSBERVZfTU9ERSA/IGRlYnVnTG9nUmVuZGVySWQrKyA6IDA7XG4gICAgY29uc3QgcGFydE93bmVyTm9kZSA9IChfYSA9IG9wdGlvbnMgPT09IG51bGwgfHwgb3B0aW9ucyA9PT0gdm9pZCAwID8gdm9pZCAwIDogb3B0aW9ucy5yZW5kZXJCZWZvcmUpICE9PSBudWxsICYmIF9hICE9PSB2b2lkIDAgPyBfYSA6IGNvbnRhaW5lcjtcbiAgICAvLyBUaGlzIHByb3BlcnR5IG5lZWRzIHRvIHJlbWFpbiB1bm1pbmlmaWVkLlxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG4gICAgbGV0IHBhcnQgPSBwYXJ0T3duZXJOb2RlWydfJGxpdFBhcnQkJ107XG4gICAgZGVidWdMb2dFdmVudCA9PT0gbnVsbCB8fCBkZWJ1Z0xvZ0V2ZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWJ1Z0xvZ0V2ZW50KHtcbiAgICAgICAga2luZDogJ2JlZ2luIHJlbmRlcicsXG4gICAgICAgIGlkOiByZW5kZXJJZCxcbiAgICAgICAgdmFsdWUsXG4gICAgICAgIGNvbnRhaW5lcixcbiAgICAgICAgb3B0aW9ucyxcbiAgICAgICAgcGFydCxcbiAgICB9KTtcbiAgICBpZiAocGFydCA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGNvbnN0IGVuZE5vZGUgPSAoX2IgPSBvcHRpb25zID09PSBudWxsIHx8IG9wdGlvbnMgPT09IHZvaWQgMCA/IHZvaWQgMCA6IG9wdGlvbnMucmVuZGVyQmVmb3JlKSAhPT0gbnVsbCAmJiBfYiAhPT0gdm9pZCAwID8gX2IgOiBudWxsO1xuICAgICAgICAvLyBUaGlzIHByb3BlcnR5IG5lZWRzIHRvIHJlbWFpbiB1bm1pbmlmaWVkLlxuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgQHR5cGVzY3JpcHQtZXNsaW50L25vLWV4cGxpY2l0LWFueVxuICAgICAgICBwYXJ0T3duZXJOb2RlWydfJGxpdFBhcnQkJ10gPSBwYXJ0ID0gbmV3IENoaWxkUGFydChjb250YWluZXIuaW5zZXJ0QmVmb3JlKGNyZWF0ZU1hcmtlcigpLCBlbmROb2RlKSwgZW5kTm9kZSwgdW5kZWZpbmVkLCBvcHRpb25zICE9PSBudWxsICYmIG9wdGlvbnMgIT09IHZvaWQgMCA/IG9wdGlvbnMgOiB7fSk7XG4gICAgfVxuICAgIHBhcnQuXyRzZXRWYWx1ZSh2YWx1ZSk7XG4gICAgZGVidWdMb2dFdmVudCA9PT0gbnVsbCB8fCBkZWJ1Z0xvZ0V2ZW50ID09PSB2b2lkIDAgPyB2b2lkIDAgOiBkZWJ1Z0xvZ0V2ZW50KHtcbiAgICAgICAga2luZDogJ2VuZCByZW5kZXInLFxuICAgICAgICBpZDogcmVuZGVySWQsXG4gICAgICAgIHZhbHVlLFxuICAgICAgICBjb250YWluZXIsXG4gICAgICAgIG9wdGlvbnMsXG4gICAgICAgIHBhcnQsXG4gICAgfSk7XG4gICAgcmV0dXJuIHBhcnQ7XG59O1xuaWYgKEVOQUJMRV9FWFRSQV9TRUNVUklUWV9IT09LUykge1xuICAgIHJlbmRlci5zZXRTYW5pdGl6ZXIgPSBzZXRTYW5pdGl6ZXI7XG4gICAgcmVuZGVyLmNyZWF0ZVNhbml0aXplciA9IGNyZWF0ZVNhbml0aXplcjtcbiAgICBpZiAoREVWX01PREUpIHtcbiAgICAgICAgcmVuZGVyLl90ZXN0T25seUNsZWFyU2FuaXRpemVyRmFjdG9yeURvTm90Q2FsbE9yRWxzZSA9XG4gICAgICAgICAgICBfdGVzdE9ubHlDbGVhclNhbml0aXplckZhY3RvcnlEb05vdENhbGxPckVsc2U7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9bGl0LWh0bWwuanMubWFwIiwiLy8gVGhlIG1vZHVsZSBjYWNoZVxudmFyIF9fd2VicGFja19tb2R1bGVfY2FjaGVfXyA9IHt9O1xuXG4vLyBUaGUgcmVxdWlyZSBmdW5jdGlvblxuZnVuY3Rpb24gX193ZWJwYWNrX3JlcXVpcmVfXyhtb2R1bGVJZCkge1xuXHQvLyBDaGVjayBpZiBtb2R1bGUgaXMgaW4gY2FjaGVcblx0dmFyIGNhY2hlZE1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF07XG5cdGlmIChjYWNoZWRNb2R1bGUgIT09IHVuZGVmaW5lZCkge1xuXHRcdHJldHVybiBjYWNoZWRNb2R1bGUuZXhwb3J0cztcblx0fVxuXHQvLyBDcmVhdGUgYSBuZXcgbW9kdWxlIChhbmQgcHV0IGl0IGludG8gdGhlIGNhY2hlKVxuXHR2YXIgbW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXSA9IHtcblx0XHRpZDogbW9kdWxlSWQsXG5cdFx0Ly8gbm8gbW9kdWxlLmxvYWRlZCBuZWVkZWRcblx0XHRleHBvcnRzOiB7fVxuXHR9O1xuXG5cdC8vIEV4ZWN1dGUgdGhlIG1vZHVsZSBmdW5jdGlvblxuXHRfX3dlYnBhY2tfbW9kdWxlc19fW21vZHVsZUlkXShtb2R1bGUsIG1vZHVsZS5leHBvcnRzLCBfX3dlYnBhY2tfcmVxdWlyZV9fKTtcblxuXHQvLyBSZXR1cm4gdGhlIGV4cG9ydHMgb2YgdGhlIG1vZHVsZVxuXHRyZXR1cm4gbW9kdWxlLmV4cG9ydHM7XG59XG5cbi8vIGV4cG9zZSB0aGUgbW9kdWxlcyBvYmplY3QgKF9fd2VicGFja19tb2R1bGVzX18pXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm0gPSBfX3dlYnBhY2tfbW9kdWxlc19fO1xuXG4iLCIvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuX193ZWJwYWNrX3JlcXVpcmVfXy5uID0gKG1vZHVsZSkgPT4ge1xuXHR2YXIgZ2V0dGVyID0gbW9kdWxlICYmIG1vZHVsZS5fX2VzTW9kdWxlID9cblx0XHQoKSA9PiAobW9kdWxlWydkZWZhdWx0J10pIDpcblx0XHQoKSA9PiAobW9kdWxlKTtcblx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgeyBhOiBnZXR0ZXIgfSk7XG5cdHJldHVybiBnZXR0ZXI7XG59OyIsIi8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb25zIGZvciBoYXJtb255IGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uZCA9IChleHBvcnRzLCBkZWZpbml0aW9uKSA9PiB7XG5cdGZvcih2YXIga2V5IGluIGRlZmluaXRpb24pIHtcblx0XHRpZihfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZGVmaW5pdGlvbiwga2V5KSAmJiAhX193ZWJwYWNrX3JlcXVpcmVfXy5vKGV4cG9ydHMsIGtleSkpIHtcblx0XHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBrZXksIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBkZWZpbml0aW9uW2tleV0gfSk7XG5cdFx0fVxuXHR9XG59OyIsIl9fd2VicGFja19yZXF1aXJlX18uZyA9IChmdW5jdGlvbigpIHtcblx0aWYgKHR5cGVvZiBnbG9iYWxUaGlzID09PSAnb2JqZWN0JykgcmV0dXJuIGdsb2JhbFRoaXM7XG5cdHRyeSB7XG5cdFx0cmV0dXJuIHRoaXMgfHwgbmV3IEZ1bmN0aW9uKCdyZXR1cm4gdGhpcycpKCk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRpZiAodHlwZW9mIHdpbmRvdyA9PT0gJ29iamVjdCcpIHJldHVybiB3aW5kb3c7XG5cdH1cbn0pKCk7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5vID0gKG9iaiwgcHJvcCkgPT4gKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIHByb3ApKSIsIi8vIGRlZmluZSBfX2VzTW9kdWxlIG9uIGV4cG9ydHNcbl9fd2VicGFja19yZXF1aXJlX18uciA9IChleHBvcnRzKSA9PiB7XG5cdGlmKHR5cGVvZiBTeW1ib2wgIT09ICd1bmRlZmluZWQnICYmIFN5bWJvbC50b1N0cmluZ1RhZykge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBTeW1ib2wudG9TdHJpbmdUYWcsIHsgdmFsdWU6ICdNb2R1bGUnIH0pO1xuXHR9XG5cdE9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCAnX19lc01vZHVsZScsIHsgdmFsdWU6IHRydWUgfSk7XG59OyIsInZhciBzY3JpcHRVcmw7XG5pZiAoX193ZWJwYWNrX3JlcXVpcmVfXy5nLmltcG9ydFNjcmlwdHMpIHNjcmlwdFVybCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5sb2NhdGlvbiArIFwiXCI7XG52YXIgZG9jdW1lbnQgPSBfX3dlYnBhY2tfcmVxdWlyZV9fLmcuZG9jdW1lbnQ7XG5pZiAoIXNjcmlwdFVybCAmJiBkb2N1bWVudCkge1xuXHRpZiAoZG9jdW1lbnQuY3VycmVudFNjcmlwdClcblx0XHRzY3JpcHRVcmwgPSBkb2N1bWVudC5jdXJyZW50U2NyaXB0LnNyY1xuXHRpZiAoIXNjcmlwdFVybCkge1xuXHRcdHZhciBzY3JpcHRzID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIik7XG5cdFx0aWYoc2NyaXB0cy5sZW5ndGgpIHNjcmlwdFVybCA9IHNjcmlwdHNbc2NyaXB0cy5sZW5ndGggLSAxXS5zcmNcblx0fVxufVxuLy8gV2hlbiBzdXBwb3J0aW5nIGJyb3dzZXJzIHdoZXJlIGFuIGF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgeW91IG11c3Qgc3BlY2lmeSBhbiBvdXRwdXQucHVibGljUGF0aCBtYW51YWxseSB2aWEgY29uZmlndXJhdGlvblxuLy8gb3IgcGFzcyBhbiBlbXB0eSBzdHJpbmcgKFwiXCIpIGFuZCBzZXQgdGhlIF9fd2VicGFja19wdWJsaWNfcGF0aF9fIHZhcmlhYmxlIGZyb20geW91ciBjb2RlIHRvIHVzZSB5b3VyIG93biBsb2dpYy5cbmlmICghc2NyaXB0VXJsKSB0aHJvdyBuZXcgRXJyb3IoXCJBdXRvbWF0aWMgcHVibGljUGF0aCBpcyBub3Qgc3VwcG9ydGVkIGluIHRoaXMgYnJvd3NlclwiKTtcbnNjcmlwdFVybCA9IHNjcmlwdFVybC5yZXBsYWNlKC8jLiokLywgXCJcIikucmVwbGFjZSgvXFw/LiokLywgXCJcIikucmVwbGFjZSgvXFwvW15cXC9dKyQvLCBcIi9cIik7XG5fX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBzY3JpcHRVcmw7IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5iID0gZG9jdW1lbnQuYmFzZVVSSSB8fCBzZWxmLmxvY2F0aW9uLmhyZWY7XG5cbi8vIG9iamVjdCB0byBzdG9yZSBsb2FkZWQgYW5kIGxvYWRpbmcgY2h1bmtzXG4vLyB1bmRlZmluZWQgPSBjaHVuayBub3QgbG9hZGVkLCBudWxsID0gY2h1bmsgcHJlbG9hZGVkL3ByZWZldGNoZWRcbi8vIFtyZXNvbHZlLCByZWplY3QsIFByb21pc2VdID0gY2h1bmsgbG9hZGluZywgMCA9IGNodW5rIGxvYWRlZFxudmFyIGluc3RhbGxlZENodW5rcyA9IHtcblx0XCJtYWluXCI6IDBcbn07XG5cbi8vIG5vIGNodW5rIG9uIGRlbWFuZCBsb2FkaW5nXG5cbi8vIG5vIHByZWZldGNoaW5nXG5cbi8vIG5vIHByZWxvYWRlZFxuXG4vLyBubyBITVJcblxuLy8gbm8gSE1SIG1hbmlmZXN0XG5cbi8vIG5vIG9uIGNodW5rcyBsb2FkZWRcblxuLy8gbm8ganNvbnAgZnVuY3Rpb24iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm5jID0gdW5kZWZpbmVkOyIsImltcG9ydCBhYm91dFRhYiBmcm9tICcuL3RhYnMvYWJvdXQvYWJvdXQuanMnO1xuaW1wb3J0IG1lbnVUYWIgZnJvbSAnLi90YWJzL21lbnUvbWVudS5qcyc7XG5pbXBvcnQgXCIuL3N0eWxlLnNjc3NcIjtcblxuY29uc3QgcGFnZUNvbnRlbnQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjY29udGVudCcpO1xuXG4vL3BhZ2VDb250ZW50LmFwcGVuZENoaWxkKGFib3V0VGFiKCkpO1xuXG5sZXQgbWVudU1lbnVCdXR0b24gPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjbWVudU1lbnUnKTtcblxuYWJvdXRUYWIoKTtcbm1lbnVUYWIoKTtcbm1lbnVNZW51QnV0dG9uLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4ge1xuICAgIG1lbnVUYWIoKTtcbn0pXG5cblxubGV0IG1lbnVBYm91dEJ1dHRvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNhYm91dE1lbnUnKTtcbm1lbnVBYm91dEJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsICgpID0+IHsgXG4gICAgYWJvdXRUYWIoKTtcbn0pXG5cblxuZnVuY3Rpb24gdG9nZ2xlTW9iaWxlTWVudShtZW51KSB7XG4gICAgbWVudS5jbGFzc0xpc3QudG9nZ2xlKCdvcGVuJyk7XG59Il0sIm5hbWVzIjpbIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8wX19fIiwiVVJMIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18iLCJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fIiwicHVzaCIsIm1vZHVsZSIsImlkIiwiZXhwb3J0cyIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJsaXN0IiwidG9TdHJpbmciLCJ0aGlzIiwibWFwIiwiaXRlbSIsImNvbnRlbnQiLCJuZWVkTGF5ZXIiLCJjb25jYXQiLCJsZW5ndGgiLCJqb2luIiwiaSIsIm1vZHVsZXMiLCJtZWRpYSIsImRlZHVwZSIsInN1cHBvcnRzIiwibGF5ZXIiLCJ1bmRlZmluZWQiLCJhbHJlYWR5SW1wb3J0ZWRNb2R1bGVzIiwiayIsIl9rIiwidXJsIiwib3B0aW9ucyIsIlN0cmluZyIsIl9fZXNNb2R1bGUiLCJkZWZhdWx0IiwidGVzdCIsInNsaWNlIiwiaGFzaCIsIm5lZWRRdW90ZXMiLCJyZXBsYWNlIiwiY3NzTWFwcGluZyIsImJ0b2EiLCJiYXNlNjQiLCJ1bmVzY2FwZSIsImVuY29kZVVSSUNvbXBvbmVudCIsIkpTT04iLCJzdHJpbmdpZnkiLCJkYXRhIiwic291cmNlTWFwcGluZyIsInNvdXJjZVVSTHMiLCJzb3VyY2VzIiwic291cmNlIiwic291cmNlUm9vdCIsInN0eWxlVGFnVHJhbnNmb3JtIiwic2V0QXR0cmlidXRlcyIsImluc2VydCIsImRvbUFQSSIsImluc2VydFN0eWxlRWxlbWVudCIsInN0eWxlc0luRE9NIiwiZ2V0SW5kZXhCeUlkZW50aWZpZXIiLCJpZGVudGlmaWVyIiwicmVzdWx0IiwibW9kdWxlc1RvRG9tIiwiaWRDb3VudE1hcCIsImlkZW50aWZpZXJzIiwiYmFzZSIsImNvdW50IiwiaW5kZXhCeUlkZW50aWZpZXIiLCJvYmoiLCJjc3MiLCJzb3VyY2VNYXAiLCJyZWZlcmVuY2VzIiwidXBkYXRlciIsImFkZEVsZW1lbnRTdHlsZSIsImJ5SW5kZXgiLCJzcGxpY2UiLCJhcGkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJyZW1vdmUiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwiaW5kZXgiLCJuZXdMYXN0SWRlbnRpZmllcnMiLCJfaSIsIl9pbmRleCIsIm1lbW8iLCJzdHlsZSIsInRhcmdldCIsInN0eWxlVGFyZ2V0IiwiZG9jdW1lbnQiLCJxdWVyeVNlbGVjdG9yIiwid2luZG93IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJoZWFkIiwiZSIsImdldFRhcmdldCIsIkVycm9yIiwiYXBwZW5kQ2hpbGQiLCJlbGVtZW50IiwiY3JlYXRlRWxlbWVudCIsImF0dHJpYnV0ZXMiLCJzdHlsZUVsZW1lbnQiLCJub25jZSIsInNldEF0dHJpYnV0ZSIsImFwcGx5IiwicGFyZW50Tm9kZSIsInJlbW92ZUNoaWxkIiwicmVtb3ZlU3R5bGVFbGVtZW50Iiwic3R5bGVTaGVldCIsImNzc1RleHQiLCJmaXJzdENoaWxkIiwiY3JlYXRlVGV4dE5vZGUiLCJwYWdlQ29udGVudCIsInJlbmRlciIsImh0bWwiLCJhZGRFdmVudExpc3RlbmVyIiwiX2EiLCJfYiIsIl9jIiwiX2QiLCJnbG9iYWwiLCJkZWJ1Z0xvZ0V2ZW50IiwiZXZlbnQiLCJlbWl0TGl0RGVidWdMb2dFdmVudHMiLCJkaXNwYXRjaEV2ZW50IiwiQ3VzdG9tRXZlbnQiLCJkZXRhaWwiLCJpc3N1ZVdhcm5pbmciLCJkZWJ1Z0xvZ1JlbmRlcklkIiwibGl0SXNzdWVkV2FybmluZ3MiLCJTZXQiLCJjb2RlIiwid2FybmluZyIsImhhcyIsImNvbnNvbGUiLCJ3YXJuIiwiYWRkIiwid3JhcCIsIlNoYWR5RE9NIiwiaW5Vc2UiLCJub1BhdGNoIiwibm9kZSIsInRydXN0ZWRUeXBlcyIsInBvbGljeSIsImNyZWF0ZVBvbGljeSIsImNyZWF0ZUhUTUwiLCJzIiwiaWRlbnRpdHlGdW5jdGlvbiIsInZhbHVlIiwibm9vcFNhbml0aXplciIsIl9ub2RlIiwiX25hbWUiLCJfdHlwZSIsInNldFNhbml0aXplciIsIm5ld1Nhbml0aXplciIsInNhbml0aXplckZhY3RvcnlJbnRlcm5hbCIsIl90ZXN0T25seUNsZWFyU2FuaXRpemVyRmFjdG9yeURvTm90Q2FsbE9yRWxzZSIsImNyZWF0ZVNhbml0aXplciIsIm5hbWUiLCJ0eXBlIiwiYm91bmRBdHRyaWJ1dGVTdWZmaXgiLCJtYXJrZXIiLCJNYXRoIiwicmFuZG9tIiwibWFya2VyTWF0Y2giLCJub2RlTWFya2VyIiwiZCIsImNyZWF0ZU1hcmtlciIsInYiLCJjcmVhdGVDb21tZW50IiwiaXNQcmltaXRpdmUiLCJpc0FycmF5IiwiQXJyYXkiLCJpc0l0ZXJhYmxlIiwiU3ltYm9sIiwiaXRlcmF0b3IiLCJ0ZXh0RW5kUmVnZXgiLCJjb21tZW50RW5kUmVnZXgiLCJjb21tZW50MkVuZFJlZ2V4IiwidGFnRW5kUmVnZXgiLCJSZWdFeHAiLCJzaW5nbGVRdW90ZUF0dHJFbmRSZWdleCIsImRvdWJsZVF1b3RlQXR0ckVuZFJlZ2V4IiwicmF3VGV4dEVsZW1lbnQiLCJ0YWciLCJzdHJpbmdzIiwidmFsdWVzIiwic29tZSIsInN2ZyIsIm5vQ2hhbmdlIiwiZm9yIiwibm90aGluZyIsInRlbXBsYXRlQ2FjaGUiLCJXZWFrTWFwIiwid2Fsa2VyIiwiY3JlYXRlVHJlZVdhbGtlciIsImdldFRlbXBsYXRlSHRtbCIsImwiLCJhdHRyTmFtZXMiLCJyYXdUZXh0RW5kUmVnZXgiLCJyZWdleCIsImF0dHJOYW1lIiwibWF0Y2giLCJhdHRyTmFtZUVuZEluZGV4IiwibGFzdEluZGV4IiwiZXhlYyIsImFzc2VydCIsImVuZCIsInN0YXJ0c1dpdGgiLCJodG1sUmVzdWx0IiwiaGFzT3duUHJvcGVydHkiLCJtZXNzYWdlIiwidHJpbSIsIlRlbXBsYXRlIiwiY29uc3RydWN0b3IiLCJwYXJ0cyIsIm5vZGVJbmRleCIsImF0dHJOYW1lSW5kZXgiLCJwYXJ0Q291bnQiLCJlbCIsImN1cnJlbnROb2RlIiwic3ZnRWxlbWVudCIsImFwcGVuZCIsImNoaWxkTm9kZXMiLCJuZXh0Tm9kZSIsIm5vZGVUeXBlIiwibG9jYWxOYW1lIiwiaW5uZXJIVE1MIiwiaW5jbHVkZXMiLCJtIiwiaGFzQXR0cmlidXRlcyIsImF0dHJzVG9SZW1vdmUiLCJnZXRBdHRyaWJ1dGVOYW1lcyIsImVuZHNXaXRoIiwicmVhbE5hbWUiLCJzdGF0aWNzIiwiZ2V0QXR0cmlidXRlIiwidG9Mb3dlckNhc2UiLCJzcGxpdCIsImN0b3IiLCJQcm9wZXJ0eVBhcnQiLCJCb29sZWFuQXR0cmlidXRlUGFydCIsIkV2ZW50UGFydCIsIkF0dHJpYnV0ZVBhcnQiLCJyZW1vdmVBdHRyaWJ1dGUiLCJ0YWdOYW1lIiwidGV4dENvbnRlbnQiLCJlbXB0eVNjcmlwdCIsImluZGV4T2YiLCJraW5kIiwidGVtcGxhdGUiLCJjbG9uYWJsZVRlbXBsYXRlIiwic3RhdGljIiwiX29wdGlvbnMiLCJyZXNvbHZlRGlyZWN0aXZlIiwicGFydCIsInBhcmVudCIsImF0dHJpYnV0ZUluZGV4IiwiY3VycmVudERpcmVjdGl2ZSIsIl9fZGlyZWN0aXZlcyIsIl9fZGlyZWN0aXZlIiwibmV4dERpcmVjdGl2ZUNvbnN0cnVjdG9yIiwiY2FsbCIsIl8kaW5pdGlhbGl6ZSIsIl8kcmVzb2x2ZSIsIlRlbXBsYXRlSW5zdGFuY2UiLCJfcGFydHMiLCJfJGRpc2Nvbm5lY3RhYmxlQ2hpbGRyZW4iLCJfJHRlbXBsYXRlIiwiXyRwYXJlbnQiLCJfJGlzQ29ubmVjdGVkIiwiX2Nsb25lIiwiZnJhZ21lbnQiLCJjcmVhdGlvblNjb3BlIiwiaW1wb3J0Tm9kZSIsInBhcnRJbmRleCIsInRlbXBsYXRlUGFydCIsIkNoaWxkUGFydCIsIm5leHRTaWJsaW5nIiwiRWxlbWVudFBhcnQiLCJfdXBkYXRlIiwidmFsdWVJbmRleCIsInRlbXBsYXRlSW5zdGFuY2UiLCJfJHNldFZhbHVlIiwic3RhcnROb2RlIiwiZW5kTm9kZSIsIl8kY29tbWl0dGVkVmFsdWUiLCJfJHN0YXJ0Tm9kZSIsIl8kZW5kTm9kZSIsIl9faXNDb25uZWN0ZWQiLCJpc0Nvbm5lY3RlZCIsIl90ZXh0U2FuaXRpemVyIiwiZGlyZWN0aXZlUGFyZW50Iiwic3RhcnQiLCJfJGNsZWFyIiwiX2NvbW1pdFRleHQiLCJfY29tbWl0VGVtcGxhdGVSZXN1bHQiLCJob3N0IiwiX2NvbW1pdE5vZGUiLCJfY29tbWl0SXRlcmFibGUiLCJfaW5zZXJ0IiwicmVmIiwiaW5zZXJ0QmVmb3JlIiwicGFyZW50Tm9kZU5hbWUiLCJub2RlTmFtZSIsInRleHROb2RlIiwiXyRnZXRUZW1wbGF0ZSIsImgiLCJpbnN0YW5jZSIsImdldCIsInNldCIsIml0ZW1QYXJ0cyIsIml0ZW1QYXJ0IiwiZnJvbSIsIl8kbm90aWZ5Q29ubmVjdGlvbkNoYW5nZWQiLCJuIiwic2V0Q29ubmVjdGVkIiwiZmlsbCIsIl9zYW5pdGl6ZXIiLCJub0NvbW1pdCIsImNoYW5nZSIsIl9jb21taXRWYWx1ZSIsInN1cGVyIiwiYXJndW1lbnRzIiwiZW1wdHlTdHJpbmdGb3JCb29sZWFuQXR0cmlidXRlIiwibmV3TGlzdGVuZXIiLCJvbGRMaXN0ZW5lciIsInNob3VsZFJlbW92ZUxpc3RlbmVyIiwiY2FwdHVyZSIsIm9uY2UiLCJwYXNzaXZlIiwic2hvdWxkQWRkTGlzdGVuZXIiLCJyZW1vdmVMaXN0ZW5lciIsImFkZExpc3RlbmVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImhhbmRsZUV2ZW50IiwiXyRMSCIsIl9ib3VuZEF0dHJpYnV0ZVN1ZmZpeCIsIl9tYXJrZXIiLCJfbWFya2VyTWF0Y2giLCJfSFRNTF9SRVNVTFQiLCJfZ2V0VGVtcGxhdGVIdG1sIiwiX1RlbXBsYXRlSW5zdGFuY2UiLCJfaXNJdGVyYWJsZSIsIl9yZXNvbHZlRGlyZWN0aXZlIiwiX0NoaWxkUGFydCIsIl9BdHRyaWJ1dGVQYXJ0IiwiX0Jvb2xlYW5BdHRyaWJ1dGVQYXJ0IiwiX0V2ZW50UGFydCIsIl9Qcm9wZXJ0eVBhcnQiLCJfRWxlbWVudFBhcnQiLCJwb2x5ZmlsbFN1cHBvcnQiLCJsaXRIdG1sUG9seWZpbGxTdXBwb3J0RGV2TW9kZSIsImxpdEh0bWxWZXJzaW9ucyIsImNvbnRhaW5lciIsIlR5cGVFcnJvciIsInJlbmRlcklkIiwicGFydE93bmVyTm9kZSIsInJlbmRlckJlZm9yZSIsIl9fd2VicGFja19tb2R1bGVfY2FjaGVfXyIsIl9fd2VicGFja19yZXF1aXJlX18iLCJtb2R1bGVJZCIsImNhY2hlZE1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJnZXR0ZXIiLCJhIiwiZGVmaW5pdGlvbiIsImtleSIsIm8iLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImVudW1lcmFibGUiLCJnIiwiZ2xvYmFsVGhpcyIsIkZ1bmN0aW9uIiwicHJvcCIsInByb3RvdHlwZSIsInIiLCJ0b1N0cmluZ1RhZyIsInNjcmlwdFVybCIsImltcG9ydFNjcmlwdHMiLCJsb2NhdGlvbiIsImN1cnJlbnRTY3JpcHQiLCJzcmMiLCJzY3JpcHRzIiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJwIiwiYiIsImJhc2VVUkkiLCJzZWxmIiwiaHJlZiIsIm5jIiwibWVudU1lbnVCdXR0b24iXSwic291cmNlUm9vdCI6IiJ9